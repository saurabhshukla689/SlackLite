{"ast":null,"code":"import { equal } from \"@wry/equality\";\nimport { Trie } from \"@wry/trie\";\nimport { dep } from \"optimism\";\nimport { isReference } from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { DeepMerger, isNonNullObject, makeReference, maybeDeepFreeze } from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\nimport { fieldNameFromStoreName, hasOwn } from \"./helpers.js\";\nconst DELETE = {};\nconst delModifier = () => DELETE;\nconst INVALIDATE = {};\nexport class EntityStore {\n  policies;\n  group;\n  data = {};\n  constructor(policies, group) {\n    this.policies = policies;\n    this.group = group;\n  }\n  // Although the EntityStore class is abstract, it contains concrete\n  // implementations of the various NormalizedCache interface methods that\n  // are inherited by the Root and Layer subclasses.\n  toObject() {\n    return {\n      ...this.data\n    };\n  }\n  has(dataId) {\n    return this.lookup(dataId, true) !== void 0;\n  }\n  get(dataId, fieldName) {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      const storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (fieldName === \"__typename\" && hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  }\n  lookup(dataId, dependOnExistence) {\n    // The has method (above) calls lookup with dependOnExistence = true, so\n    // that it can later be invalidated when we add or remove a StoreObject for\n    // this dataId. Any consumer who cares about the contents of the StoreObject\n    // should not rely on this dependency, since the contents could change\n    // without the object being added or removed.\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n    if (this.policies.rootTypenamesById[dataId]) {\n      return {};\n    }\n  }\n  merge(older, newer) {\n    let dataId;\n    // Convert unexpected references to ID strings.\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n    const existing = typeof older === \"string\" ? this.lookup(dataId = older) : older;\n    const incoming = typeof newer === \"string\" ? this.lookup(dataId = newer) : newer;\n    // If newer was a string ID, but that ID was not defined in this store,\n    // then there are no fields to be merged, so we're done.\n    if (!incoming) return;\n    invariant(typeof dataId === \"string\", 95);\n    const merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n    // Even if merged === existing, existing may have come from a lower\n    // layer, so we always need to set this.data[dataId] on this level.\n    this.data[dataId] = merged;\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        const fieldsToDirty = {};\n        // If we added a new StoreObject where there was previously none, dirty\n        // anything that depended on the existence of this dataId, such as the\n        // EntityStore#has method.\n        if (!existing) fieldsToDirty.__exists = 1;\n        // Now invalidate dependents who called getFieldValue for any fields\n        // that are changing as a result of this merge.\n        Object.keys(incoming).forEach(storeFieldName => {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            // Always dirty the full storeFieldName, which may include\n            // serialized arguments following the fieldName prefix.\n            fieldsToDirty[storeFieldName] = 1;\n            // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n            // different from storeFieldName and this field does not have\n            // keyArgs configured, because that means the cache can't make\n            // any assumptions about how field values with the same field\n            // name but different arguments might be interrelated, so it\n            // must err on the side of invalidating all field values that\n            // share the same short fieldName, regardless of arguments.\n            const fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName && !this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty[fieldName] = 1;\n            }\n            // If merged[storeFieldName] has become undefined, and this is the\n            // Root layer, actually delete the property from the merged object,\n            // which is guaranteed to have been created fresh in this method.\n            if (merged[storeFieldName] === void 0 && !(this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n        if (fieldsToDirty.__typename && !(existing && existing.__typename) &&\n        // Since we return default root __typename strings\n        // automatically from store.get, we don't need to dirty the\n        // ROOT_QUERY.__typename field if merged.__typename is equal\n        // to the default string (usually \"Query\").\n        this.policies.rootTypenamesById[dataId] === merged.__typename) {\n          delete fieldsToDirty.__typename;\n        }\n        Object.keys(fieldsToDirty).forEach(fieldName => this.group.dirty(dataId, fieldName));\n      }\n    }\n  }\n  modify(dataId, fields, exact) {\n    const storeObject = this.lookup(dataId);\n    if (storeObject) {\n      const changedFields = {};\n      let needToMerge = false;\n      let allDeleted = true;\n      const sharedDetails = {\n        DELETE,\n        INVALIDATE,\n        isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: (fieldNameOrOptions, from) => this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n          fieldName: fieldNameOrOptions,\n          from: from || makeReference(dataId)\n        } : fieldNameOrOptions, {\n          store: this\n        })\n      };\n      Object.keys(storeObject).forEach(storeFieldName => {\n        const fieldName = fieldNameFromStoreName(storeFieldName);\n        let fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        const modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || (exact ? undefined : fields[fieldName]);\n        if (modify) {\n          let newValue = modify === delModifier ? DELETE : modify(maybeDeepFreeze(fieldValue), {\n            ...sharedDetails,\n            fieldName,\n            storeFieldName,\n            storage: this.getStorage(dataId, storeFieldName)\n          });\n          if (newValue === INVALIDATE) {\n            this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n            if (newValue !== fieldValue) {\n              changedFields[storeFieldName] = newValue;\n              needToMerge = true;\n              fieldValue = newValue;\n              if (__DEV__) {\n                const checkReference = ref => {\n                  if (this.lookup(ref.__ref) === undefined) {\n                    __DEV__ && invariant.warn(96, ref);\n                    return true;\n                  }\n                };\n                if (isReference(newValue)) {\n                  checkReference(newValue);\n                } else if (Array.isArray(newValue)) {\n                  // Warn about writing \"mixed\" arrays of Reference and non-Reference objects\n                  let seenReference = false;\n                  let someNonReference;\n                  for (const value of newValue) {\n                    if (isReference(value)) {\n                      seenReference = true;\n                      if (checkReference(value)) break;\n                    } else {\n                      // Do not warn on primitive values, since those could never be represented\n                      // by a reference. This is a valid (albeit uncommon) use case.\n                      if (typeof value === \"object\" && !!value) {\n                        const [id] = this.policies.identify(value);\n                        // check if object could even be referenced, otherwise we are not interested in it for this warning\n                        if (id) {\n                          someNonReference = value;\n                        }\n                      }\n                    }\n                    if (seenReference && someNonReference !== undefined) {\n                      __DEV__ && invariant.warn(97, someNonReference);\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted = false;\n        }\n      });\n      if (needToMerge) {\n        this.merge(dataId, changedFields);\n        if (allDeleted) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n  // If called with only one argument, removes the entire entity\n  // identified by dataId. If called with a fieldName as well, removes all\n  // fields of that entity whose names match fieldName according to the\n  // fieldNameFromStoreName helper function. If called with a fieldName\n  // and variables, removes all fields of that entity whose names match fieldName\n  // and whose arguments when cached exactly match the variables passed.\n  delete(dataId, fieldName, args) {\n    const storeObject = this.lookup(dataId);\n    if (storeObject) {\n      const typename = this.getFieldValue(storeObject, \"__typename\");\n      const storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n        typename,\n        fieldName,\n        args\n      }) : fieldName;\n      return this.modify(dataId, storeFieldName ? {\n        [storeFieldName]: delModifier\n      } : delModifier, !!args);\n    }\n    return false;\n  }\n  evict(options, limit) {\n    let evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n      // Always invalidate the field to trigger rereading of watched\n      // queries, even if no cache data was modified by the eviction,\n      // because queries may depend on computed fields with custom read\n      // functions, whose values are not stored in the EntityStore.\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  }\n  clear() {\n    this.replace(null);\n  }\n  extract() {\n    const obj = this.toObject();\n    const extraRootIds = [];\n    this.getRootIdSet().forEach(id => {\n      if (!hasOwn.call(this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n    if (extraRootIds.length) {\n      obj.__META = {\n        extraRootIds: extraRootIds.sort()\n      };\n    }\n    return obj;\n  }\n  replace(newData) {\n    Object.keys(this.data).forEach(dataId => {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        this.delete(dataId);\n      }\n    });\n    if (newData) {\n      const {\n        __META,\n        ...rest\n      } = newData;\n      Object.keys(rest).forEach(dataId => {\n        this.merge(dataId, rest[dataId]);\n      });\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  }\n  // Maps root entity IDs to the number of times they have been retained, minus\n  // the number of times they have been released. Retained entities keep other\n  // entities they reference (even indirectly) from being garbage collected.\n  rootIds = {};\n  retain(rootId) {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  }\n  release(rootId) {\n    if (this.rootIds[rootId] > 0) {\n      const count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  }\n  // Return a Set<string> of all the ID strings that have been retained by\n  // this layer/root *and* any layers/roots beneath it.\n  getRootIdSet(ids = new Set()) {\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n      // always considered roots for garbage collection, regardless of\n      // their retainment counts in this.rootIds.\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n    return ids;\n  }\n  // The goal of garbage collection is to remove IDs from the Root layer of the\n  // store that are no longer reachable starting from any IDs that have been\n  // explicitly retained (see retain and release, above). Returns an array of\n  // dataId strings that were removed from the store.\n  gc() {\n    const ids = this.getRootIdSet();\n    const snapshot = this.toObject();\n    ids.forEach(id => {\n      if (hasOwn.call(snapshot, id)) {\n        // Because we are iterating over an ECMAScript Set, the IDs we add here\n        // will be visited in later iterations of the forEach loop only if they\n        // were not previously contained by the Set.\n        Object.keys(this.findChildRefIds(id)).forEach(ids.add, ids);\n        // By removing IDs from the snapshot object here, we protect them from\n        // getting removed from the root store layer below.\n        delete snapshot[id];\n      }\n    });\n    const idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      let root = this;\n      while (root instanceof Layer) root = root.parent;\n      idsToRemove.forEach(id => root.delete(id));\n    }\n    return idsToRemove;\n  }\n  // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n  refs = {};\n  findChildRefIds(dataId) {\n    if (!hasOwn.call(this.refs, dataId)) {\n      const found = this.refs[dataId] = {};\n      const root = this.data[dataId];\n      if (!root) return found;\n      const workSet = new Set([root]);\n      // Within the store, only arrays and objects can contain child entity\n      // references, so we can prune the traversal using this predicate:\n      workSet.forEach(obj => {\n        if (isReference(obj)) {\n          found[obj.__ref] = true;\n          // In rare cases, a { __ref } Reference object may have other fields.\n          // This often indicates a mismerging of References with StoreObjects,\n          // but garbage collection should not be fooled by a stray __ref\n          // property in a StoreObject (ignoring all the other fields just\n          // because the StoreObject looks like a Reference). To avoid this\n          // premature termination of findChildRefIds recursion, we fall through\n          // to the code below, which will handle any other properties of obj.\n        }\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach(key => {\n            const child = obj[key];\n            // No need to add primitive values to the workSet, since they cannot\n            // contain reference objects.\n            if (isNonNullObject(child)) {\n              workSet.add(child);\n            }\n          });\n        }\n      });\n    }\n    return this.refs[dataId];\n  }\n  makeCacheKey() {\n    return this.group.keyMaker.lookupArray(arguments);\n  }\n  // Bound function that can be passed around to provide easy access to fields\n  // of Reference objects as well as ordinary objects.\n  getFieldValue = (objectOrReference, storeFieldName) => maybeDeepFreeze(isReference(objectOrReference) ? this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  canRead = objOrRef => {\n    return isReference(objOrRef) ? this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n  };\n  // Bound function that converts an id or an object with a __typename and\n  // primary key fields to a Reference object. If called with a Reference object,\n  // that same Reference object is returned. Pass true for mergeIntoStore to persist\n  // an object into the store.\n  toReference = (objOrIdOrRef, mergeIntoStore) => {\n    if (typeof objOrIdOrRef === \"string\") {\n      return makeReference(objOrIdOrRef);\n    }\n    if (isReference(objOrIdOrRef)) {\n      return objOrIdOrRef;\n    }\n    const [id] = this.policies.identify(objOrIdOrRef);\n    if (id) {\n      const ref = makeReference(id);\n      if (mergeIntoStore) {\n        this.merge(id, objOrIdOrRef);\n      }\n      return ref;\n    }\n  };\n  get supportsResultCaching() {\n    return this.group.caching;\n  }\n}\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nclass CacheGroup {\n  caching;\n  parent;\n  d = null;\n  // Used by the EntityStore#makeCacheKey method to compute cache keys\n  // specific to this CacheGroup.\n  keyMaker;\n  constructor(caching, parent = null) {\n    this.caching = caching;\n    this.parent = parent;\n    this.resetCaching();\n  }\n  resetCaching() {\n    this.d = this.caching ? dep() : null;\n    this.keyMaker = new Trie();\n  }\n  depend(dataId, storeFieldName) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      const fieldName = fieldNameFromStoreName(storeFieldName);\n      if (fieldName !== storeFieldName) {\n        // Fields with arguments that contribute extra identifying\n        // information to the fieldName (thus forming the storeFieldName)\n        // depend not only on the full storeFieldName but also on the\n        // short fieldName, so the field can be invalidated using either\n        // level of specificity.\n        this.d(makeDepKey(dataId, fieldName));\n      }\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  }\n  dirty(dataId, storeFieldName) {\n    if (this.d) {\n      this.d.dirty(makeDepKey(dataId, storeFieldName),\n      // When storeFieldName === \"__exists\", that means the entity identified\n      // by dataId has either disappeared from the cache or was newly added,\n      // so the result caching system would do well to \"forget everything it\n      // knows\" about that object. To achieve that kind of invalidation, we\n      // not only dirty the associated result cache entry, but also remove it\n      // completely from the dependency graph. For the optimism implementation\n      // details, see https://github.com/benjamn/optimism/pull/195.\n      storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n    }\n  }\n}\nfunction makeDepKey(dataId, storeFieldName) {\n  // Since field names cannot have '#' characters in them, this method\n  // of joining the field name and the ID should be unambiguous, and much\n  // cheaper than JSON.stringify([dataId, fieldName]).\n  return storeFieldName + \"#\" + dataId;\n}\nexport function maybeDependOnExistenceOfEntity(store, entityId) {\n  if (supportsResultCaching(store)) {\n    // We use this pseudo-field __exists elsewhere in the EntityStore code to\n    // represent changes in the existence of the entity object identified by\n    // entityId. This dependency gets reliably dirtied whenever an object with\n    // this ID is deleted (or newly created) within this group, so any result\n    // cache entries (for example, StoreReader#executeSelectionSet results) that\n    // depend on __exists for this entityId will get dirtied as well, leading to\n    // the eventual recomputation (instead of reuse) of those result objects the\n    // next time someone reads them from the cache.\n    store.group.depend(entityId, \"__exists\");\n  }\n}\nclass Root extends EntityStore {\n  constructor({\n    policies,\n    resultCaching = true,\n    seed\n  }) {\n    super(policies, new CacheGroup(resultCaching));\n    if (seed) this.replace(seed);\n  }\n  stump = new Stump(this);\n  addLayer(layerId, replay) {\n    // Adding an optimistic Layer on top of the Root actually adds the Layer\n    // on top of the Stump, so the Stump always comes between the Root and\n    // any Layer objects that we've added.\n    return this.stump.addLayer(layerId, replay);\n  }\n  removeLayer() {\n    // Never remove the root layer.\n    return this;\n  }\n  storageTrie = new Trie();\n  getStorage() {\n    return this.storageTrie.lookupArray(arguments);\n  }\n}\nEntityStore.Root = Root;\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nclass Layer extends EntityStore {\n  id;\n  parent;\n  replay;\n  group;\n  constructor(id, parent, replay, group) {\n    super(parent.policies, group);\n    this.id = id;\n    this.parent = parent;\n    this.replay = replay;\n    this.group = group;\n    replay(this);\n  }\n  addLayer(layerId, replay) {\n    return new Layer(layerId, this, replay, this.group);\n  }\n  removeLayer(layerId) {\n    // Remove all instances of the given id, not just the first one.\n    const parent = this.parent.removeLayer(layerId);\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        // Dirty every ID we're removing. Technically we might be able to avoid\n        // dirtying fields that have values in higher layers, but we don't have\n        // easy access to higher layers here, and we're about to recreate those\n        // layers anyway (see parent.addLayer below).\n        Object.keys(this.data).forEach(dataId => {\n          const ownStoreObject = this.data[dataId];\n          const parentStoreObject = parent[\"lookup\"](dataId);\n          if (!parentStoreObject) {\n            // The StoreObject identified by dataId was defined in this layer\n            // but will be undefined in the parent layer, so we can delete the\n            // whole entity using this.delete(dataId). Since we're about to\n            // throw this layer away, the only goal of this deletion is to dirty\n            // the removed fields.\n            this.delete(dataId);\n          } else if (!ownStoreObject) {\n            // This layer had an entry for dataId but it was undefined, which\n            // means the entity was deleted in this layer, and it's about to\n            // become undeleted when we remove this layer, so we need to dirty\n            // all fields that are about to be reexposed.\n            this.group.dirty(dataId, \"__exists\");\n            Object.keys(parentStoreObject).forEach(storeFieldName => {\n              this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            // If ownStoreObject is not exactly the same as parentStoreObject,\n            // dirty any fields whose values will change as a result of this\n            // removal.\n            Object.keys(ownStoreObject).forEach(storeFieldName => {\n              if (!equal(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n      return parent;\n    }\n    // No changes are necessary if the parent chain remains identical.\n    if (parent === this.parent) return this;\n    // Recreate this layer on top of the new parent.\n    return parent.addLayer(this.id, this.replay);\n  }\n  toObject() {\n    return {\n      ...this.parent.toObject(),\n      ...this.data\n    };\n  }\n  findChildRefIds(dataId) {\n    const fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? {\n      ...fromParent,\n      ...super.findChildRefIds(dataId)\n    } : fromParent;\n  }\n  getStorage(...args) {\n    let p = this.parent;\n    while (p.parent) p = p.parent;\n    return p.getStorage(...args);\n  }\n}\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nclass Stump extends Layer {\n  constructor(root) {\n    super(\"EntityStore.Stump\", root, () => {}, new CacheGroup(root.group.caching, root.group));\n  }\n  removeLayer() {\n    // Never remove the Stump layer.\n    return this;\n  }\n  merge(older, newer) {\n    // We never want to write any data into the Stump, so we forward any merge\n    // calls to the Root instead. Another option here would be to throw an\n    // exception, but the toReference(object, true) function can sometimes\n    // trigger Stump writes (which used to be Root writes, before the Stump\n    // concept was introduced).\n    return this.parent.merge(older, newer);\n  }\n}\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n  const existingValue = existingObject[property];\n  const incomingValue = incomingObject[property];\n  // Wherever there is a key collision, prefer the incoming value, unless\n  // it is deeply equal to the existing value. It's worth checking deep\n  // equality here (even though blindly returning incoming would be\n  // logically correct) because preserving the referential identity of\n  // existing data can prevent needless rereading and rerendering.\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nexport function supportsResultCaching(store) {\n  // When result caching is disabled, store.depend will be null.\n  return !!(store && store.supportsResultCaching);\n}","map":{"version":3,"names":["equal","Trie","dep","isReference","__DEV__","DeepMerger","isNonNullObject","makeReference","maybeDeepFreeze","invariant","fieldNameFromStoreName","hasOwn","DELETE","delModifier","INVALIDATE","EntityStore","policies","group","data","constructor","toObject","has","dataId","lookup","get","fieldName","depend","call","storeObject","rootTypenamesById","Layer","parent","dependOnExistence","merge","older","newer","__ref","existing","incoming","merged","storeObjectReconciler","refs","caching","fieldsToDirty","__exists","Object","keys","forEach","storeFieldName","hasKeyArgs","__typename","dirty","modify","fields","exact","changedFields","needToMerge","allDeleted","sharedDetails","toReference","canRead","readField","fieldNameOrOptions","from","store","fieldValue","undefined","newValue","storage","getStorage","checkReference","ref","warn","Array","isArray","seenReference","someNonReference","value","id","identify","delete","args","typename","getFieldValue","getStoreFieldName","evict","options","limit","evicted","clear","replace","extract","obj","extraRootIds","getRootIdSet","push","length","__META","sort","newData","rest","retain","rootIds","rootId","release","count","ids","Set","add","gc","snapshot","findChildRefIds","idsToRemove","root","found","workSet","key","child","makeCacheKey","keyMaker","lookupArray","arguments","objectOrReference","objOrRef","objOrIdOrRef","mergeIntoStore","supportsResultCaching","CacheGroup","d","resetCaching","makeDepKey","maybeDependOnExistenceOfEntity","entityId","Root","resultCaching","seed","stump","Stump","addLayer","layerId","replay","removeLayer","storageTrie","ownStoreObject","parentStoreObject","fromParent","p","existingObject","incomingObject","property","existingValue","incomingValue"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/cache/inmemory/entityStore.ts"],"sourcesContent":["import { equal } from \"@wry/equality\";\nimport { Trie } from \"@wry/trie\";\nimport type { DocumentNode, FieldNode, SelectionSetNode } from \"graphql\";\nimport type { OptimisticDependencyFunction } from \"optimism\";\nimport { dep } from \"optimism\";\n\nimport type {\n  Reference,\n  StoreObject,\n  StoreValue,\n} from \"@apollo/client/utilities\";\nimport { isReference } from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport {\n  DeepMerger,\n  isNonNullObject,\n  makeReference,\n  maybeDeepFreeze,\n} from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport type { Cache } from \"../core/types/Cache.js\";\nimport type {\n  CanReadFunction,\n  DeleteModifier,\n  InvalidateModifier,\n  Modifier,\n  ModifierDetails,\n  Modifiers,\n  ReadFieldOptions,\n  SafeReadonly,\n  ToReferenceFunction,\n} from \"../core/types/common.js\";\n\nimport { fieldNameFromStoreName, hasOwn } from \"./helpers.js\";\nimport type { Policies, StorageType } from \"./policies.js\";\nimport type { NormalizedCache, NormalizedCacheObject } from \"./types.js\";\n\nconst DELETE = {} as DeleteModifier;\nconst delModifier: Modifier<any> = () => DELETE;\nconst INVALIDATE = {} as InvalidateModifier;\n\nexport abstract class EntityStore implements NormalizedCache {\n  public declare static Root: typeof Root;\n\n  protected data: NormalizedCacheObject = {};\n\n  constructor(\n    public readonly policies: Policies,\n    public readonly group: CacheGroup\n  ) {}\n\n  public abstract addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any\n  ): Layer;\n\n  public abstract removeLayer(layerId: string): EntityStore;\n\n  // Although the EntityStore class is abstract, it contains concrete\n  // implementations of the various NormalizedCache interface methods that\n  // are inherited by the Root and Layer subclasses.\n\n  public toObject(): NormalizedCacheObject {\n    return { ...this.data };\n  }\n\n  public has(dataId: string): boolean {\n    return this.lookup(dataId, true) !== void 0;\n  }\n\n  public get(dataId: string, fieldName: string): StoreValue {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      const storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (\n      fieldName === \"__typename\" &&\n      hasOwn.call(this.policies.rootTypenamesById, dataId)\n    ) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  }\n\n  protected lookup(\n    dataId: string,\n    dependOnExistence?: boolean\n  ): StoreObject | undefined {\n    // The has method (above) calls lookup with dependOnExistence = true, so\n    // that it can later be invalidated when we add or remove a StoreObject for\n    // this dataId. Any consumer who cares about the contents of the StoreObject\n    // should not rely on this dependency, since the contents could change\n    // without the object being added or removed.\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n\n    if (this.policies.rootTypenamesById[dataId]) {\n      return {};\n    }\n  }\n\n  public merge(older: string | StoreObject, newer: StoreObject | string): void {\n    let dataId: string | undefined;\n\n    // Convert unexpected references to ID strings.\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n\n    const existing: StoreObject | undefined =\n      typeof older === \"string\" ? this.lookup((dataId = older)) : older;\n\n    const incoming: StoreObject | undefined =\n      typeof newer === \"string\" ? this.lookup((dataId = newer)) : newer;\n\n    // If newer was a string ID, but that ID was not defined in this store,\n    // then there are no fields to be merged, so we're done.\n    if (!incoming) return;\n\n    invariant(typeof dataId === \"string\", \"store.merge expects a string ID\");\n\n    const merged: StoreObject = new DeepMerger(storeObjectReconciler).merge(\n      existing,\n      incoming\n    );\n\n    // Even if merged === existing, existing may have come from a lower\n    // layer, so we always need to set this.data[dataId] on this level.\n    this.data[dataId] = merged;\n\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        const fieldsToDirty: Record<string, 1> = {};\n\n        // If we added a new StoreObject where there was previously none, dirty\n        // anything that depended on the existence of this dataId, such as the\n        // EntityStore#has method.\n        if (!existing) fieldsToDirty.__exists = 1;\n\n        // Now invalidate dependents who called getFieldValue for any fields\n        // that are changing as a result of this merge.\n        Object.keys(incoming).forEach((storeFieldName) => {\n          if (\n            !existing ||\n            existing[storeFieldName] !== merged[storeFieldName]\n          ) {\n            // Always dirty the full storeFieldName, which may include\n            // serialized arguments following the fieldName prefix.\n            fieldsToDirty[storeFieldName] = 1;\n\n            // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n            // different from storeFieldName and this field does not have\n            // keyArgs configured, because that means the cache can't make\n            // any assumptions about how field values with the same field\n            // name but different arguments might be interrelated, so it\n            // must err on the side of invalidating all field values that\n            // share the same short fieldName, regardless of arguments.\n            const fieldName = fieldNameFromStoreName(storeFieldName);\n            if (\n              fieldName !== storeFieldName &&\n              !this.policies.hasKeyArgs(merged.__typename, fieldName)\n            ) {\n              fieldsToDirty[fieldName] = 1;\n            }\n\n            // If merged[storeFieldName] has become undefined, and this is the\n            // Root layer, actually delete the property from the merged object,\n            // which is guaranteed to have been created fresh in this method.\n            if (merged[storeFieldName] === void 0 && !(this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n\n        if (\n          fieldsToDirty.__typename &&\n          !(existing && existing.__typename) &&\n          // Since we return default root __typename strings\n          // automatically from store.get, we don't need to dirty the\n          // ROOT_QUERY.__typename field if merged.__typename is equal\n          // to the default string (usually \"Query\").\n          this.policies.rootTypenamesById[dataId] === merged.__typename\n        ) {\n          delete fieldsToDirty.__typename;\n        }\n\n        Object.keys(fieldsToDirty).forEach((fieldName) =>\n          this.group.dirty(dataId as string, fieldName)\n        );\n      }\n    }\n  }\n\n  public modify(\n    dataId: string,\n    fields: Modifier<any> | Modifiers<Record<string, any>>,\n    exact: boolean\n  ): boolean {\n    const storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      const changedFields: Record<string, any> = {};\n      let needToMerge = false;\n      let allDeleted = true;\n\n      const sharedDetails = {\n        DELETE,\n        INVALIDATE,\n        isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: <V = StoreValue>(\n          fieldNameOrOptions: string | ReadFieldOptions,\n          from?: StoreObject | Reference\n        ) =>\n          this.policies.readField<V>(\n            typeof fieldNameOrOptions === \"string\" ?\n              {\n                fieldName: fieldNameOrOptions,\n                from: from || makeReference(dataId),\n              }\n            : fieldNameOrOptions,\n            { store: this }\n          ),\n      } satisfies Partial<ModifierDetails>;\n\n      Object.keys(storeObject).forEach((storeFieldName) => {\n        const fieldName = fieldNameFromStoreName(storeFieldName);\n        let fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        const modify: Modifier<StoreValue> | undefined =\n          typeof fields === \"function\" ? fields : (\n            fields[storeFieldName] || (exact ? undefined : fields[fieldName])\n          );\n        if (modify) {\n          let newValue =\n            modify === delModifier ? DELETE : (\n              modify(maybeDeepFreeze(fieldValue), {\n                ...sharedDetails,\n                fieldName,\n                storeFieldName,\n                storage: this.getStorage(dataId, storeFieldName),\n              })\n            );\n          if (newValue === INVALIDATE) {\n            this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n            if (newValue !== fieldValue) {\n              changedFields[storeFieldName] = newValue;\n              needToMerge = true;\n              fieldValue = newValue as StoreValue;\n\n              if (__DEV__) {\n                const checkReference = (ref: Reference) => {\n                  if (this.lookup(ref.__ref) === undefined) {\n                    invariant.warn(\n                      \"cache.modify: You are trying to write a Reference that is not part of the store: %o\\n\" +\n                        \"Please make sure to set the `mergeIntoStore` parameter to `true` when creating a Reference that is not part of the store yet:\\n\" +\n                        \"`toReference(object, true)`\",\n                      ref\n                    );\n                    return true;\n                  }\n                };\n                if (isReference(newValue)) {\n                  checkReference(newValue);\n                } else if (Array.isArray(newValue)) {\n                  // Warn about writing \"mixed\" arrays of Reference and non-Reference objects\n                  let seenReference: boolean = false;\n                  let someNonReference: unknown;\n                  for (const value of newValue) {\n                    if (isReference(value)) {\n                      seenReference = true;\n                      if (checkReference(value)) break;\n                    } else {\n                      // Do not warn on primitive values, since those could never be represented\n                      // by a reference. This is a valid (albeit uncommon) use case.\n                      if (typeof value === \"object\" && !!value) {\n                        const [id] = this.policies.identify(value);\n                        // check if object could even be referenced, otherwise we are not interested in it for this warning\n                        if (id) {\n                          someNonReference = value;\n                        }\n                      }\n                    }\n                    if (seenReference && someNonReference !== undefined) {\n                      invariant.warn(\n                        \"cache.modify: Writing an array with a mix of both References and Objects will not result in the Objects being normalized correctly.\\n\" +\n                          \"Please convert the object instance %o to a Reference before writing it to the cache by calling `toReference(object, true)`.\",\n                        someNonReference\n                      );\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted = false;\n        }\n      });\n\n      if (needToMerge) {\n        this.merge(dataId, changedFields);\n\n        if (allDeleted) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // If called with only one argument, removes the entire entity\n  // identified by dataId. If called with a fieldName as well, removes all\n  // fields of that entity whose names match fieldName according to the\n  // fieldNameFromStoreName helper function. If called with a fieldName\n  // and variables, removes all fields of that entity whose names match fieldName\n  // and whose arguments when cached exactly match the variables passed.\n  public delete(\n    dataId: string,\n    fieldName?: string,\n    args?: Record<string, any>\n  ) {\n    const storeObject = this.lookup(dataId);\n    if (storeObject) {\n      const typename = this.getFieldValue<string>(storeObject, \"__typename\");\n      const storeFieldName =\n        fieldName && args ?\n          this.policies.getStoreFieldName({ typename, fieldName, args })\n        : fieldName;\n      return this.modify(\n        dataId,\n        storeFieldName ?\n          {\n            [storeFieldName]: delModifier,\n          }\n        : delModifier,\n        !!args\n      );\n    }\n    return false;\n  }\n\n  public evict(options: Cache.EvictOptions, limit: EntityStore): boolean {\n    let evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n      // Always invalidate the field to trigger rereading of watched\n      // queries, even if no cache data was modified by the eviction,\n      // because queries may depend on computed fields with custom read\n      // functions, whose values are not stored in the EntityStore.\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  }\n\n  public clear(): void {\n    this.replace(null);\n  }\n\n  public extract(): NormalizedCacheObject {\n    const obj = this.toObject();\n    const extraRootIds: string[] = [];\n    this.getRootIdSet().forEach((id) => {\n      if (!hasOwn.call(this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n    if (extraRootIds.length) {\n      obj.__META = { extraRootIds: extraRootIds.sort() };\n    }\n    return obj;\n  }\n\n  public replace(newData: NormalizedCacheObject | null): void {\n    Object.keys(this.data).forEach((dataId) => {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        this.delete(dataId);\n      }\n    });\n    if (newData) {\n      const { __META, ...rest } = newData;\n      Object.keys(rest).forEach((dataId) => {\n        this.merge(dataId, rest[dataId] as StoreObject);\n      });\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  }\n\n  public abstract getStorage(\n    idOrObj: string | StoreObject,\n    ...storeFieldNames: (string | number)[]\n  ): StorageType;\n\n  // Maps root entity IDs to the number of times they have been retained, minus\n  // the number of times they have been released. Retained entities keep other\n  // entities they reference (even indirectly) from being garbage collected.\n  private rootIds: {\n    [rootId: string]: number;\n  } = {};\n\n  public retain(rootId: string): number {\n    return (this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1);\n  }\n\n  public release(rootId: string): number {\n    if (this.rootIds[rootId] > 0) {\n      const count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  }\n\n  // Return a Set<string> of all the ID strings that have been retained by\n  // this layer/root *and* any layers/roots beneath it.\n  public getRootIdSet(ids = new Set<string>()) {\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n      // always considered roots for garbage collection, regardless of\n      // their retainment counts in this.rootIds.\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n    return ids;\n  }\n\n  // The goal of garbage collection is to remove IDs from the Root layer of the\n  // store that are no longer reachable starting from any IDs that have been\n  // explicitly retained (see retain and release, above). Returns an array of\n  // dataId strings that were removed from the store.\n  public gc() {\n    const ids = this.getRootIdSet();\n    const snapshot = this.toObject();\n    ids.forEach((id) => {\n      if (hasOwn.call(snapshot, id)) {\n        // Because we are iterating over an ECMAScript Set, the IDs we add here\n        // will be visited in later iterations of the forEach loop only if they\n        // were not previously contained by the Set.\n        Object.keys(this.findChildRefIds(id)).forEach(ids.add, ids);\n        // By removing IDs from the snapshot object here, we protect them from\n        // getting removed from the root store layer below.\n        delete snapshot[id];\n      }\n    });\n    const idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      let root: EntityStore = this;\n      while (root instanceof Layer) root = root.parent;\n      idsToRemove.forEach((id) => root.delete(id));\n    }\n    return idsToRemove;\n  }\n\n  // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n  private refs: {\n    [dataId: string]: Record<string, true>;\n  } = {};\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    if (!hasOwn.call(this.refs, dataId)) {\n      const found = (this.refs[dataId] = {} as Record<string, true>);\n      const root = this.data[dataId];\n      if (!root) return found;\n\n      const workSet = new Set<Record<string | number, any>>([root]);\n      // Within the store, only arrays and objects can contain child entity\n      // references, so we can prune the traversal using this predicate:\n      workSet.forEach((obj) => {\n        if (isReference(obj)) {\n          found[obj.__ref] = true;\n          // In rare cases, a { __ref } Reference object may have other fields.\n          // This often indicates a mismerging of References with StoreObjects,\n          // but garbage collection should not be fooled by a stray __ref\n          // property in a StoreObject (ignoring all the other fields just\n          // because the StoreObject looks like a Reference). To avoid this\n          // premature termination of findChildRefIds recursion, we fall through\n          // to the code below, which will handle any other properties of obj.\n        }\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach((key) => {\n            const child = obj[key];\n            // No need to add primitive values to the workSet, since they cannot\n            // contain reference objects.\n            if (isNonNullObject(child)) {\n              workSet.add(child);\n            }\n          });\n        }\n      });\n    }\n    return this.refs[dataId];\n  }\n\n  // Used to compute cache keys specific to this.group.\n  /** overload for `InMemoryCache.maybeBroadcastWatch` */\n  public makeCacheKey(\n    document: DocumentNode,\n    callback: Cache.WatchCallback<any>,\n    details: string\n  ): object;\n  /** overload for `StoreReader.executeSelectionSet` */\n  public makeCacheKey(\n    selectionSet: SelectionSetNode,\n    parent: string /* = ( Reference.__ref ) */ | StoreObject,\n    varString: string | undefined\n  ): object;\n  /** overload for `StoreReader.executeSubSelectedArray` */\n  public makeCacheKey(\n    field: FieldNode,\n    array: readonly any[],\n    varString: string | undefined\n  ): object;\n  /**\n   * @deprecated This is only meant for internal usage,\n   * in your own code please use a `Trie` instance instead.\n   */\n  public makeCacheKey(...args: any[]): object;\n  public makeCacheKey() {\n    return this.group.keyMaker.lookupArray(arguments);\n  }\n\n  // Bound function that can be passed around to provide easy access to fields\n  // of Reference objects as well as ordinary objects.\n  public getFieldValue = <T = StoreValue>(\n    objectOrReference: StoreObject | Reference | undefined,\n    storeFieldName: string\n  ) =>\n    maybeDeepFreeze(\n      isReference(objectOrReference) ?\n        this.get(objectOrReference.__ref, storeFieldName)\n      : objectOrReference && objectOrReference[storeFieldName]\n    ) as SafeReadonly<T>;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  public canRead: CanReadFunction = (objOrRef) => {\n    return isReference(objOrRef) ?\n        this.has(objOrRef.__ref)\n      : typeof objOrRef === \"object\";\n  };\n\n  // Bound function that converts an id or an object with a __typename and\n  // primary key fields to a Reference object. If called with a Reference object,\n  // that same Reference object is returned. Pass true for mergeIntoStore to persist\n  // an object into the store.\n  public toReference: ToReferenceFunction = (objOrIdOrRef, mergeIntoStore) => {\n    if (typeof objOrIdOrRef === \"string\") {\n      return makeReference(objOrIdOrRef);\n    }\n\n    if (isReference(objOrIdOrRef)) {\n      return objOrIdOrRef;\n    }\n\n    const [id] = this.policies.identify(objOrIdOrRef);\n\n    if (id) {\n      const ref = makeReference(id);\n      if (mergeIntoStore) {\n        this.merge(id, objOrIdOrRef);\n      }\n      return ref;\n    }\n  };\n\n  public get supportsResultCaching(): boolean {\n    return this.group.caching;\n  }\n}\n\nexport type FieldValueGetter = EntityStore[\"getFieldValue\"];\n\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nclass CacheGroup {\n  private d: OptimisticDependencyFunction<string> | null = null;\n\n  // Used by the EntityStore#makeCacheKey method to compute cache keys\n  // specific to this CacheGroup.\n  public keyMaker!: Trie<object>;\n\n  constructor(\n    public readonly caching: boolean,\n    private parent: CacheGroup | null = null\n  ) {\n    this.resetCaching();\n  }\n\n  public resetCaching() {\n    this.d = this.caching ? dep<string>() : null;\n    this.keyMaker = new Trie();\n  }\n\n  public depend(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      const fieldName = fieldNameFromStoreName(storeFieldName);\n      if (fieldName !== storeFieldName) {\n        // Fields with arguments that contribute extra identifying\n        // information to the fieldName (thus forming the storeFieldName)\n        // depend not only on the full storeFieldName but also on the\n        // short fieldName, so the field can be invalidated using either\n        // level of specificity.\n        this.d(makeDepKey(dataId, fieldName));\n      }\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  }\n\n  public dirty(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d.dirty(\n        makeDepKey(dataId, storeFieldName),\n        // When storeFieldName === \"__exists\", that means the entity identified\n        // by dataId has either disappeared from the cache or was newly added,\n        // so the result caching system would do well to \"forget everything it\n        // knows\" about that object. To achieve that kind of invalidation, we\n        // not only dirty the associated result cache entry, but also remove it\n        // completely from the dependency graph. For the optimism implementation\n        // details, see https://github.com/benjamn/optimism/pull/195.\n        storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\"\n      );\n    }\n  }\n}\n\nfunction makeDepKey(dataId: string, storeFieldName: string) {\n  // Since field names cannot have '#' characters in them, this method\n  // of joining the field name and the ID should be unambiguous, and much\n  // cheaper than JSON.stringify([dataId, fieldName]).\n  return storeFieldName + \"#\" + dataId;\n}\n\nexport function maybeDependOnExistenceOfEntity(\n  store: NormalizedCache,\n  entityId: string\n) {\n  if (supportsResultCaching(store)) {\n    // We use this pseudo-field __exists elsewhere in the EntityStore code to\n    // represent changes in the existence of the entity object identified by\n    // entityId. This dependency gets reliably dirtied whenever an object with\n    // this ID is deleted (or newly created) within this group, so any result\n    // cache entries (for example, StoreReader#executeSelectionSet results) that\n    // depend on __exists for this entityId will get dirtied as well, leading to\n    // the eventual recomputation (instead of reuse) of those result objects the\n    // next time someone reads them from the cache.\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n\nclass Root extends EntityStore {\n  constructor({\n    policies,\n    resultCaching = true,\n    seed,\n  }: {\n    policies: Policies;\n    resultCaching?: boolean;\n    seed?: NormalizedCacheObject;\n  }) {\n    super(policies, new CacheGroup(resultCaching));\n    if (seed) this.replace(seed);\n  }\n\n  public readonly stump = new Stump(this);\n\n  public addLayer(layerId: string, replay: (layer: EntityStore) => any): Layer {\n    // Adding an optimistic Layer on top of the Root actually adds the Layer\n    // on top of the Stump, so the Stump always comes between the Root and\n    // any Layer objects that we've added.\n    return this.stump.addLayer(layerId, replay);\n  }\n\n  public removeLayer(): Root {\n    // Never remove the root layer.\n    return this;\n  }\n\n  public readonly storageTrie = new Trie<StorageType>();\n  public getStorage(): StorageType {\n    return this.storageTrie.lookupArray(arguments);\n  }\n}\nEntityStore.Root = Root;\n\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nclass Layer extends EntityStore {\n  constructor(\n    public readonly id: string,\n    public readonly parent: EntityStore,\n    public readonly replay: (layer: EntityStore) => any,\n    public readonly group: CacheGroup\n  ) {\n    super(parent.policies, group);\n    replay(this);\n  }\n\n  public addLayer(layerId: string, replay: (layer: EntityStore) => any): Layer {\n    return new Layer(layerId, this, replay, this.group);\n  }\n\n  public removeLayer(layerId: string): EntityStore {\n    // Remove all instances of the given id, not just the first one.\n    const parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        // Dirty every ID we're removing. Technically we might be able to avoid\n        // dirtying fields that have values in higher layers, but we don't have\n        // easy access to higher layers here, and we're about to recreate those\n        // layers anyway (see parent.addLayer below).\n        Object.keys(this.data).forEach((dataId) => {\n          const ownStoreObject = this.data[dataId];\n          const parentStoreObject = parent[\"lookup\"](dataId);\n          if (!parentStoreObject) {\n            // The StoreObject identified by dataId was defined in this layer\n            // but will be undefined in the parent layer, so we can delete the\n            // whole entity using this.delete(dataId). Since we're about to\n            // throw this layer away, the only goal of this deletion is to dirty\n            // the removed fields.\n            this.delete(dataId);\n          } else if (!ownStoreObject) {\n            // This layer had an entry for dataId but it was undefined, which\n            // means the entity was deleted in this layer, and it's about to\n            // become undeleted when we remove this layer, so we need to dirty\n            // all fields that are about to be reexposed.\n            this.group.dirty(dataId, \"__exists\");\n            Object.keys(parentStoreObject).forEach((storeFieldName) => {\n              this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            // If ownStoreObject is not exactly the same as parentStoreObject,\n            // dirty any fields whose values will change as a result of this\n            // removal.\n            Object.keys(ownStoreObject).forEach((storeFieldName) => {\n              if (\n                !equal(\n                  ownStoreObject[storeFieldName],\n                  parentStoreObject[storeFieldName]\n                )\n              ) {\n                this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n\n      return parent;\n    }\n\n    // No changes are necessary if the parent chain remains identical.\n    if (parent === this.parent) return this;\n\n    // Recreate this layer on top of the new parent.\n    return parent.addLayer(this.id, this.replay);\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return {\n      ...this.parent.toObject(),\n      ...this.data,\n    };\n  }\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    const fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ?\n        {\n          ...fromParent,\n          ...super.findChildRefIds(dataId),\n        }\n      : fromParent;\n  }\n\n  public getStorage(\n    ...args: Parameters<EntityStore[\"getStorage\"]>\n  ): StorageType {\n    let p: EntityStore = this.parent;\n    while ((p as Layer).parent) p = (p as Layer).parent;\n    return p.getStorage(...args);\n  }\n}\n\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nclass Stump extends Layer {\n  constructor(root: Root) {\n    super(\n      \"EntityStore.Stump\",\n      root,\n      () => {},\n      new CacheGroup(root.group.caching, root.group)\n    );\n  }\n\n  public removeLayer() {\n    // Never remove the Stump layer.\n    return this;\n  }\n\n  public merge(older: string | StoreObject, newer: string | StoreObject) {\n    // We never want to write any data into the Stump, so we forward any merge\n    // calls to the Root instead. Another option here would be to throw an\n    // exception, but the toReference(object, true) function can sometimes\n    // trigger Stump writes (which used to be Root writes, before the Stump\n    // concept was introduced).\n    return this.parent.merge(older, newer);\n  }\n}\n\nfunction storeObjectReconciler(\n  existingObject: StoreObject,\n  incomingObject: StoreObject,\n  property: string | number\n): StoreValue {\n  const existingValue = existingObject[property];\n  const incomingValue = incomingObject[property];\n  // Wherever there is a key collision, prefer the incoming value, unless\n  // it is deeply equal to the existing value. It's worth checking deep\n  // equality here (even though blindly returning incoming would be\n  // logically correct) because preserving the referential identity of\n  // existing data can prevent needless rereading and rerendering.\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nexport function supportsResultCaching(store: any): store is EntityStore {\n  // When result caching is disabled, store.depend will be null.\n  return !!(store && store.supportsResultCaching);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
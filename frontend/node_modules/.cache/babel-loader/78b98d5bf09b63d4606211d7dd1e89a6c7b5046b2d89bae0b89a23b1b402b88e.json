{"ast":null,"code":"import { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { cacheSizes } from \"../caching/sizes.js\";\nconst globalCaches = {};\nexport function registerGlobalCache(name, getSize) {\n  globalCaches[name] = getSize;\n}\n/**\n* For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/\nexport const getApolloClientMemoryInternals = __DEV__ ? _getApolloClientMemoryInternals : undefined;\n/**\n* For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/\nexport const getInMemoryCacheMemoryInternals = __DEV__ ? _getInMemoryCacheMemoryInternals : undefined;\n/**\n* For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/\nexport const getApolloCacheMemoryInternals = __DEV__ ? _getApolloCacheMemoryInternals : undefined;\nfunction getCurrentCacheSizes() {\n  // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here\n  const defaults = {\n    canonicalStringify: 1000 /* defaultCacheSizes[\"canonicalStringify\"] */,\n    checkDocument: 2000 /* defaultCacheSizes[\"checkDocument\"] */,\n    print: 2000 /* defaultCacheSizes[\"print\"] */,\n    \"documentTransform.cache\": 2000 /* defaultCacheSizes[\"documentTransform.cache\"] */,\n    \"queryManager.getDocumentInfo\": 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */,\n    \"PersistedQueryLink.persistedQueryHashes\": 2000 /* defaultCacheSizes[\"PersistedQueryLink.persistedQueryHashes\"] */,\n    \"fragmentRegistry.transform\": 2000 /* defaultCacheSizes[\"fragmentRegistry.transform\"] */,\n    \"fragmentRegistry.lookup\": 1000 /* defaultCacheSizes[\"fragmentRegistry.lookup\"] */,\n    \"fragmentRegistry.findFragmentSpreads\": 4000 /* defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"] */,\n    \"cache.fragmentQueryDocuments\": 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */,\n    \"removeTypenameFromVariables.getVariableDefinitions\": 2000 /* defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"] */,\n    \"inMemoryCache.maybeBroadcastWatch\": 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */,\n    \"inMemoryCache.executeSelectionSet\": 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */,\n    \"inMemoryCache.executeSubSelectedArray\": 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */\n  };\n  return Object.fromEntries(Object.entries(defaults).map(([k, v]) => [k, cacheSizes[k] || v]));\n}\nfunction _getApolloClientMemoryInternals() {\n  if (!__DEV__) throw new Error(\"only supported in development mode\");\n  return {\n    limits: getCurrentCacheSizes(),\n    sizes: {\n      print: globalCaches.print?.(),\n      canonicalStringify: globalCaches.canonicalStringify?.(),\n      links: linkInfo(this.link),\n      queryManager: {\n        getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n        documentTransforms: transformInfo(this[\"queryManager\"].documentTransform)\n      },\n      ...this.cache.getMemoryInternals?.()\n    }\n  };\n}\nfunction _getApolloCacheMemoryInternals() {\n  return {\n    cache: {\n      fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"])\n    }\n  };\n}\nfunction _getInMemoryCacheMemoryInternals() {\n  const fragments = this.config.fragments;\n  return {\n    ..._getApolloCacheMemoryInternals.apply(this),\n    addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]),\n    inMemoryCache: {\n      executeSelectionSet: getWrapperInformation(this[\"storeReader\"][\"executeSelectionSet\"]),\n      executeSubSelectedArray: getWrapperInformation(this[\"storeReader\"][\"executeSubSelectedArray\"]),\n      maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"])\n    },\n    fragmentRegistry: {\n      findFragmentSpreads: getWrapperInformation(fragments?.findFragmentSpreads),\n      lookup: getWrapperInformation(fragments?.lookup),\n      transform: getWrapperInformation(fragments?.transform)\n    }\n  };\n}\nfunction isWrapper(f) {\n  return !!f && \"dirtyKey\" in f;\n}\nfunction getWrapperInformation(f) {\n  return isWrapper(f) ? f.size : undefined;\n}\nfunction isDefined(value) {\n  return value != null;\n}\nfunction transformInfo(transform) {\n  return recurseTransformInfo(transform).map(cache => ({\n    cache\n  }));\n}\nfunction recurseTransformInfo(transform) {\n  return transform ? [getWrapperInformation(transform?.[\"performWork\"]), ...recurseTransformInfo(transform?.[\"left\"]), ...recurseTransformInfo(transform?.[\"right\"])].filter(isDefined) : [];\n}\nfunction linkInfo(link) {\n  return link ? [link?.getMemoryInternals?.(), ...linkInfo(link?.left), ...linkInfo(link?.right)].filter(isDefined) : [];\n}","map":{"version":3,"names":["__DEV__","cacheSizes","globalCaches","registerGlobalCache","name","getSize","getApolloClientMemoryInternals","_getApolloClientMemoryInternals","undefined","getInMemoryCacheMemoryInternals","_getInMemoryCacheMemoryInternals","getApolloCacheMemoryInternals","_getApolloCacheMemoryInternals","getCurrentCacheSizes","defaults","canonicalStringify","checkDocument","print","Object","fromEntries","entries","map","k","v","Error","limits","sizes","links","linkInfo","link","queryManager","getDocumentInfo","size","documentTransforms","transformInfo","documentTransform","cache","getMemoryInternals","fragmentQueryDocuments","getWrapperInformation","fragments","config","apply","addTypenameDocumentTransform","inMemoryCache","executeSelectionSet","executeSubSelectedArray","maybeBroadcastWatch","fragmentRegistry","findFragmentSpreads","lookup","transform","isWrapper","f","isDefined","value","recurseTransformInfo","filter","left","right"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/utilities/internal/getMemoryInternals.ts"],"sourcesContent":["import type { OptimisticWrapperFunction } from \"optimism\";\n\nimport type {\n  ApolloCache,\n  ApolloLink,\n  DocumentTransform,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport type { ApolloClient } from \"@apollo/client\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\n\nimport type { CacheSizes } from \"../caching/sizes.js\";\nimport { cacheSizes, defaultCacheSizes } from \"../caching/sizes.js\";\n\nconst globalCaches: {\n  print?: () => number;\n  canonicalStringify?: () => number;\n} = {};\n\nexport function registerGlobalCache(\n  name: keyof typeof globalCaches,\n  getSize: () => number\n) {\n  globalCaches[name] = getSize;\n}\n\n/**\n * Transformative helper type to turn a function of the form\n *\n * ```ts\n * (this: any) => R;\n * ```\n *\n * into a function of the form\n *\n * ```ts\n * () => R;\n * ```\n *\n * preserving the return type, but removing the `this` parameter.\n *\n * @remarks\n *\n * Further down in the definitions of `_getApolloClientMemoryInternals`,\n * `_getApolloCacheMemoryInternals` and `_getInMemoryCacheMemoryInternals`,\n * having the `this` parameter annotation is extremely useful for type checking\n * inside the function.\n *\n * If this is preserved in the exported types, though, it leads to a situation\n * where `ApolloCache.getMemoryInternals` is a function that requires a `this`\n * of the type `ApolloCache`, while the extending class `InMemoryCache` has a\n * `getMemoryInternals` function that requires a `this` of the type\n * `InMemoryCache`.\n * This is not compatible with TypeScript's inheritence system (although it is\n * perfectly correct), and so TypeScript will complain loudly.\n *\n * We still want to define our functions with the `this` annotation, though,\n * and have the return type inferred.\n * (This requirement for return type inference here makes it impossible to use\n * a function overload that is more explicit on the inner overload than it is\n * on the external overload.)\n *\n * So in the end, we use this helper to remove the `this` annotation from the\n * exported function types, while keeping it in the internal implementation.\n */\ntype RemoveThis<T> = T extends (this: any) => infer R ? () => R : never;\n\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport const getApolloClientMemoryInternals =\n  __DEV__ ?\n    (_getApolloClientMemoryInternals as RemoveThis<\n      typeof _getApolloClientMemoryInternals\n    >)\n  : undefined;\n\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport const getInMemoryCacheMemoryInternals =\n  __DEV__ ?\n    (_getInMemoryCacheMemoryInternals as RemoveThis<\n      typeof _getInMemoryCacheMemoryInternals\n    >)\n  : undefined;\n\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport const getApolloCacheMemoryInternals =\n  __DEV__ ?\n    (_getApolloCacheMemoryInternals as RemoveThis<\n      typeof _getApolloCacheMemoryInternals\n    >)\n  : undefined;\n\nfunction getCurrentCacheSizes() {\n  // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here\n  const defaults: Record<keyof CacheSizes, number> = {\n    canonicalStringify: defaultCacheSizes[\"canonicalStringify\"],\n    checkDocument: defaultCacheSizes[\"checkDocument\"],\n    print: defaultCacheSizes[\"print\"],\n    \"documentTransform.cache\": defaultCacheSizes[\"documentTransform.cache\"],\n    \"queryManager.getDocumentInfo\":\n      defaultCacheSizes[\"queryManager.getDocumentInfo\"],\n    \"PersistedQueryLink.persistedQueryHashes\":\n      defaultCacheSizes[\"PersistedQueryLink.persistedQueryHashes\"],\n    \"fragmentRegistry.transform\":\n      defaultCacheSizes[\"fragmentRegistry.transform\"],\n    \"fragmentRegistry.lookup\": defaultCacheSizes[\"fragmentRegistry.lookup\"],\n    \"fragmentRegistry.findFragmentSpreads\":\n      defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"],\n    \"cache.fragmentQueryDocuments\":\n      defaultCacheSizes[\"cache.fragmentQueryDocuments\"],\n    \"removeTypenameFromVariables.getVariableDefinitions\":\n      defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"],\n    \"inMemoryCache.maybeBroadcastWatch\":\n      defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"],\n    \"inMemoryCache.executeSelectionSet\":\n      defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"],\n    \"inMemoryCache.executeSubSelectedArray\":\n      defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"],\n  };\n  return Object.fromEntries(\n    Object.entries(defaults).map(([k, v]) => [\n      k,\n      cacheSizes[k as keyof CacheSizes] || v,\n    ])\n  );\n}\n\nfunction _getApolloClientMemoryInternals(this: ApolloClient) {\n  if (!__DEV__) throw new Error(\"only supported in development mode\");\n\n  return {\n    limits: getCurrentCacheSizes(),\n    sizes: {\n      print: globalCaches.print?.(),\n      canonicalStringify: globalCaches.canonicalStringify?.(),\n      links: linkInfo(this.link),\n      queryManager: {\n        getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n        documentTransforms: transformInfo(\n          this[\"queryManager\"].documentTransform\n        ),\n      },\n      ...(this.cache.getMemoryInternals?.() as Partial<\n        ReturnType<typeof _getApolloCacheMemoryInternals>\n      > &\n        Partial<ReturnType<typeof _getInMemoryCacheMemoryInternals>>),\n    },\n  };\n}\n\nfunction _getApolloCacheMemoryInternals(this: ApolloCache) {\n  return {\n    cache: {\n      fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"]),\n    },\n  };\n}\n\nfunction _getInMemoryCacheMemoryInternals(this: InMemoryCache) {\n  const fragments = this.config.fragments as\n    | undefined\n    | {\n        findFragmentSpreads?: Function;\n        transform?: Function;\n        lookup?: Function;\n      };\n\n  return {\n    ..._getApolloCacheMemoryInternals.apply(this as any),\n    addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]),\n    inMemoryCache: {\n      executeSelectionSet: getWrapperInformation(\n        this[\"storeReader\"][\"executeSelectionSet\"]\n      ),\n      executeSubSelectedArray: getWrapperInformation(\n        this[\"storeReader\"][\"executeSubSelectedArray\"]\n      ),\n      maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"]),\n    },\n    fragmentRegistry: {\n      findFragmentSpreads: getWrapperInformation(\n        fragments?.findFragmentSpreads\n      ),\n      lookup: getWrapperInformation(fragments?.lookup),\n      transform: getWrapperInformation(fragments?.transform),\n    },\n  };\n}\n\nfunction isWrapper(f?: Function): f is OptimisticWrapperFunction<any, any> {\n  return !!f && \"dirtyKey\" in f;\n}\n\nfunction getWrapperInformation(f?: Function) {\n  return isWrapper(f) ? f.size : undefined;\n}\n\nfunction isDefined<T>(value: T | undefined | null): value is T {\n  return value != null;\n}\n\nfunction transformInfo(transform?: DocumentTransform) {\n  return recurseTransformInfo(transform).map((cache) => ({ cache }));\n}\n\nfunction recurseTransformInfo(transform?: DocumentTransform): number[] {\n  return transform ?\n      [\n        getWrapperInformation(transform?.[\"performWork\"]),\n        ...recurseTransformInfo(transform?.[\"left\"]),\n        ...recurseTransformInfo(transform?.[\"right\"]),\n      ].filter(isDefined)\n    : [];\n}\n\nfunction linkInfo(link?: ApolloLink): unknown[] {\n  return link ?\n      [\n        link?.getMemoryInternals?.(),\n        ...linkInfo(link?.left),\n        ...linkInfo(link?.right),\n      ].filter(isDefined)\n    : [];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
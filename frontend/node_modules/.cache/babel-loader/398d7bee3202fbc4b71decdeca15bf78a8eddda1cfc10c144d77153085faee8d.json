{"ast":null,"code":"import { Kind } from \"graphql\";\nimport { wrap } from \"optimism\";\nimport { addTypenameToDocument, cacheSizes, canonicalStringify, isReference } from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { DeepMerger, getDefaultValues, getFragmentFromSelection, getMainDefinition, getQueryDefinition, isArray, isField, isNonNullObject, makeReference, maybeDeepFreeze, mergeDeepArray, resultKeyNameFromField, shouldInclude } from \"@apollo/client/utilities/internal\";\nimport { invariant, newInvariantError } from \"@apollo/client/utilities/invariant\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { maybeDependOnExistenceOfEntity, supportsResultCaching } from \"./entityStore.js\";\nimport { extractFragmentContext, getTypenameFromStoreObject } from \"./helpers.js\";\nfunction execSelectionSetKeyArgs(options) {\n  return [options.selectionSet, options.objectOrReference, options.context];\n}\nexport class StoreReader {\n  // cached version of executeSelectionSet\n  executeSelectionSet;\n  // cached version of executeSubSelectedArray\n  executeSubSelectedArray;\n  config;\n  knownResults = new WeakMap();\n  constructor(config) {\n    this.config = config;\n    // memoized functions in this class will be \"garbage-collected\"\n    // by recreating the whole `StoreReader` in\n    // `InMemoryCache.resetResultsCache`\n    // (triggered from `InMemoryCache.gc` with `resetResultCache: true`)\n    this.executeSelectionSet = wrap(options => {\n      const peekArgs = execSelectionSetKeyArgs(options);\n      const other = this.executeSelectionSet.peek(...peekArgs);\n      if (other) {\n        // If we previously read this result with canonization enabled, we can\n        // return that canonized result as-is.\n        return other;\n      }\n      maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n      // Finally, if we didn't find any useful previous results, run the real\n      // execSelectionSetImpl method with the given options.\n      return this.execSelectionSetImpl(options);\n    }, {\n      max: cacheSizes[\"inMemoryCache.executeSelectionSet\"] || 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */,\n      keyArgs: execSelectionSetKeyArgs,\n      // Note that the parameters of makeCacheKey are determined by the\n      // array returned by keyArgs.\n      makeCacheKey(selectionSet, parent, context) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, context.varString);\n        }\n      }\n    });\n    this.executeSubSelectedArray = wrap(options => {\n      maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n      return this.execSubSelectedArrayImpl(options);\n    }, {\n      max: cacheSizes[\"inMemoryCache.executeSubSelectedArray\"] || 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */,\n      makeCacheKey({\n        field,\n        array,\n        context\n      }) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(field, array, context.varString);\n        }\n      }\n    });\n  }\n  /**\n   * Given a store and a query, return as much of the result as possible and\n   * identify if any data was missing from the store.\n   */\n  diffQueryAgainstStore({\n    store,\n    query,\n    rootId = \"ROOT_QUERY\",\n    variables,\n    returnPartialData = true\n  }) {\n    const policies = this.config.cache.policies;\n    variables = {\n      ...getDefaultValues(getQueryDefinition(query)),\n      ...variables\n    };\n    const rootRef = makeReference(rootId);\n    const execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: rootRef,\n      enclosingRef: rootRef,\n      context: {\n        store,\n        query,\n        policies,\n        variables,\n        varString: canonicalStringify(variables),\n        ...extractFragmentContext(query, this.config.fragments)\n      }\n    });\n    let missing;\n    if (execResult.missing) {\n      missing = new MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables);\n    }\n    const complete = !missing;\n    const {\n      result\n    } = execResult;\n    return {\n      result: complete || returnPartialData ? Object.keys(result).length === 0 ? null : result : null,\n      complete,\n      missing\n    };\n  }\n  isFresh(result, parent, selectionSet, context) {\n    if (supportsResultCaching(context.store) && this.knownResults.get(result) === selectionSet) {\n      const latest = this.executeSelectionSet.peek(selectionSet, parent, context);\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n    return false;\n  }\n  // Uncached version of executeSelectionSet.\n  execSelectionSetImpl({\n    selectionSet,\n    objectOrReference,\n    enclosingRef,\n    context\n  }) {\n    if (isReference(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: {},\n        missing: `Dangling reference to missing ${objectOrReference.__ref} object`\n      };\n    }\n    const {\n      variables,\n      policies,\n      store\n    } = context;\n    const typename = store.getFieldValue(objectOrReference, \"__typename\");\n    const objectsToMerge = [];\n    let missing;\n    const missingMerger = new DeepMerger();\n    if (typeof typename === \"string\" && !policies.rootIdsByTypename[typename]) {\n      // Ensure we always include a default value for the __typename\n      // field, if we have one. Note that this field can be overridden by other\n      // merged objects.\n      objectsToMerge.push({\n        __typename: typename\n      });\n    }\n    function handleMissing(result, resultName) {\n      if (result.missing) {\n        missing = missingMerger.merge(missing, {\n          [resultName]: result.missing\n        });\n      }\n      return result.result;\n    }\n    const workSet = new Set(selectionSet.selections);\n    workSet.forEach(selection => {\n      // Omit fields with directives @skip(if: <truthy value>) or\n      // @include(if: <falsy value>).\n      if (!shouldInclude(selection, variables)) return;\n      if (isField(selection)) {\n        let fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference\n        }, context);\n        const resultName = resultKeyNameFromField(selection);\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            missing = missingMerger.merge(missing, {\n              [resultName]: `Can't find field '${selection.name.value}' on ${isReference(objectOrReference) ? objectOrReference.__ref + \" object\" : \"object \" + JSON.stringify(objectOrReference, null, 2)}`\n            });\n          }\n        } else if (isArray(fieldValue)) {\n          if (fieldValue.length > 0) {\n            fieldValue = handleMissing(this.executeSubSelectedArray({\n              field: selection,\n              array: fieldValue,\n              enclosingRef,\n              context\n            }), resultName);\n          }\n        } else if (!selection.selectionSet) {\n          // do nothing\n        } else if (fieldValue != null) {\n          // In this case, because we know the field has a selection set,\n          // it must be trying to query a GraphQLObjectType, which is why\n          // fieldValue must be != null.\n          fieldValue = handleMissing(this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue,\n            enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n            context\n          }), resultName);\n        }\n        if (fieldValue !== void 0) {\n          objectsToMerge.push({\n            [resultName]: fieldValue\n          });\n        }\n      } else {\n        const fragment = getFragmentFromSelection(selection, context.lookupFragment);\n        if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n          throw newInvariantError(103, selection.name.value);\n        }\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n    const result = mergeDeepArray(objectsToMerge);\n    const finalResult = {\n      result,\n      missing\n    };\n    const frozen = maybeDeepFreeze(finalResult);\n    // Store this result with its selection set so that we can quickly\n    // recognize it again in the StoreReader#isFresh method.\n    if (frozen.result) {\n      this.knownResults.set(frozen.result, selectionSet);\n    }\n    return frozen;\n  }\n  // Uncached version of executeSubSelectedArray.\n  execSubSelectedArrayImpl({\n    field,\n    array,\n    enclosingRef,\n    context\n  }) {\n    let missing;\n    let missingMerger = new DeepMerger();\n    function handleMissing(childResult, i) {\n      if (childResult.missing) {\n        missing = missingMerger.merge(missing, {\n          [i]: childResult.missing\n        });\n      }\n      return childResult.result;\n    }\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n    array = array.map((item, i) => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n      // This is a nested array, recurse\n      if (isArray(item)) {\n        return handleMissing(this.executeSubSelectedArray({\n          field,\n          array: item,\n          enclosingRef,\n          context\n        }), i);\n      }\n      // This is an object, run the selection set on it\n      if (field.selectionSet) {\n        return handleMissing(this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          enclosingRef: isReference(item) ? item : enclosingRef,\n          context\n        }), i);\n      }\n      if (__DEV__) {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n      return item;\n    });\n    return {\n      result: array,\n      missing\n    };\n  }\n}\nfunction firstMissing(tree) {\n  try {\n    JSON.stringify(tree, (_, value) => {\n      if (typeof value === \"string\") throw value;\n      return value;\n    });\n  } catch (result) {\n    return result;\n  }\n}\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n  if (!field.selectionSet) {\n    const workSet = new Set([fieldValue]);\n    workSet.forEach(value => {\n      if (isNonNullObject(value)) {\n        invariant(!isReference(value), 104, getTypenameFromStoreObject(store, value), field.name.value);\n        Object.values(value).forEach(workSet.add, workSet);\n      }\n    });\n  }\n}","map":{"version":3,"names":["Kind","wrap","addTypenameToDocument","cacheSizes","canonicalStringify","isReference","__DEV__","DeepMerger","getDefaultValues","getFragmentFromSelection","getMainDefinition","getQueryDefinition","isArray","isField","isNonNullObject","makeReference","maybeDeepFreeze","mergeDeepArray","resultKeyNameFromField","shouldInclude","invariant","newInvariantError","MissingFieldError","maybeDependOnExistenceOfEntity","supportsResultCaching","extractFragmentContext","getTypenameFromStoreObject","execSelectionSetKeyArgs","options","selectionSet","objectOrReference","context","StoreReader","executeSelectionSet","executeSubSelectedArray","config","knownResults","WeakMap","constructor","peekArgs","other","peek","store","enclosingRef","__ref","execSelectionSetImpl","max","keyArgs","makeCacheKey","parent","varString","execSubSelectedArrayImpl","field","array","diffQueryAgainstStore","query","rootId","variables","returnPartialData","policies","cache","rootRef","execResult","fragments","missing","firstMissing","complete","result","Object","keys","length","isFresh","get","latest","rootTypenamesById","has","typename","getFieldValue","objectsToMerge","missingMerger","rootIdsByTypename","push","__typename","handleMissing","resultName","merge","workSet","Set","selections","forEach","selection","fieldValue","readField","fieldName","name","value","from","added","JSON","stringify","fragment","lookupFragment","kind","FRAGMENT_SPREAD","fragmentMatches","add","finalResult","frozen","set","childResult","i","filter","canRead","map","item","assertSelectionSetForIdValue","tree","_","values"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/cache/inmemory/readFromStore.ts"],"sourcesContent":["import type { DocumentNode, FieldNode, SelectionSetNode } from \"graphql\";\nimport { Kind } from \"graphql\";\nimport type { OptimisticWrapperFunction } from \"optimism\";\nimport { wrap } from \"optimism\";\n\nimport type { Reference, StoreObject } from \"@apollo/client/utilities\";\nimport {\n  addTypenameToDocument,\n  cacheSizes,\n  canonicalStringify,\n  isReference,\n} from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport type {\n  FragmentMap,\n  FragmentMapFunction,\n} from \"@apollo/client/utilities/internal\";\nimport {\n  DeepMerger,\n  getDefaultValues,\n  getFragmentFromSelection,\n  getMainDefinition,\n  getQueryDefinition,\n  isArray,\n  isField,\n  isNonNullObject,\n  makeReference,\n  maybeDeepFreeze,\n  mergeDeepArray,\n  resultKeyNameFromField,\n  shouldInclude,\n} from \"@apollo/client/utilities/internal\";\nimport {\n  invariant,\n  newInvariantError,\n} from \"@apollo/client/utilities/invariant\";\n\nimport { defaultCacheSizes } from \"../../utilities/caching/sizes.js\";\nimport type { Cache } from \"../core/types/Cache.js\";\nimport type { MissingTree } from \"../core/types/common.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\n\nimport {\n  maybeDependOnExistenceOfEntity,\n  supportsResultCaching,\n} from \"./entityStore.js\";\nimport {\n  extractFragmentContext,\n  getTypenameFromStoreObject,\n} from \"./helpers.js\";\nimport type { InMemoryCache } from \"./inMemoryCache.js\";\nimport type { Policies } from \"./policies.js\";\nimport type {\n  DiffQueryAgainstStoreOptions,\n  InMemoryCacheConfig,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from \"./types.js\";\n\ninterface ReadContext extends ReadMergeModifyContext {\n  query: DocumentNode;\n  policies: Policies;\n  fragmentMap: FragmentMap;\n  lookupFragment: FragmentMapFunction;\n}\n\ntype ExecResult<R = any> = {\n  result: R;\n  missing?: MissingTree;\n};\n\ntype ExecSelectionSetOptions = {\n  selectionSet: SelectionSetNode;\n  objectOrReference: StoreObject | Reference;\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\ntype ExecSubSelectedArrayOptions = {\n  field: FieldNode;\n  array: readonly any[];\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\ninterface StoreReaderConfig {\n  cache: InMemoryCache;\n  fragments?: InMemoryCacheConfig[\"fragments\"];\n}\n\n// Arguments type after keyArgs translation.\ntype ExecSelectionSetKeyArgs = [\n  SelectionSetNode,\n  StoreObject | Reference,\n  ReadMergeModifyContext,\n];\n\nfunction execSelectionSetKeyArgs(\n  options: ExecSelectionSetOptions\n): ExecSelectionSetKeyArgs {\n  return [options.selectionSet, options.objectOrReference, options.context];\n}\n\nexport class StoreReader {\n  // cached version of executeSelectionSet\n  private executeSelectionSet: OptimisticWrapperFunction<\n    [ExecSelectionSetOptions], // Actual arguments tuple type.\n    ExecResult, // Actual return type.\n    ExecSelectionSetKeyArgs\n  >;\n\n  // cached version of executeSubSelectedArray\n  private executeSubSelectedArray: OptimisticWrapperFunction<\n    [ExecSubSelectedArrayOptions],\n    ExecResult<any>,\n    [ExecSubSelectedArrayOptions]\n  >;\n\n  private config: {\n    cache: InMemoryCache;\n    fragments?: InMemoryCacheConfig[\"fragments\"];\n  };\n\n  private knownResults = new WeakMap<Record<string, any>, SelectionSetNode>();\n\n  constructor(config: StoreReaderConfig) {\n    this.config = config;\n\n    // memoized functions in this class will be \"garbage-collected\"\n    // by recreating the whole `StoreReader` in\n    // `InMemoryCache.resetResultsCache`\n    // (triggered from `InMemoryCache.gc` with `resetResultCache: true`)\n    this.executeSelectionSet = wrap(\n      (options) => {\n        const peekArgs = execSelectionSetKeyArgs(options);\n\n        const other = this.executeSelectionSet.peek(...peekArgs);\n\n        if (other) {\n          // If we previously read this result with canonization enabled, we can\n          // return that canonized result as-is.\n          return other;\n        }\n\n        maybeDependOnExistenceOfEntity(\n          options.context.store,\n          options.enclosingRef.__ref\n        );\n\n        // Finally, if we didn't find any useful previous results, run the real\n        // execSelectionSetImpl method with the given options.\n        return this.execSelectionSetImpl(options);\n      },\n      {\n        max:\n          cacheSizes[\"inMemoryCache.executeSelectionSet\"] ||\n          defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"],\n        keyArgs: execSelectionSetKeyArgs,\n        // Note that the parameters of makeCacheKey are determined by the\n        // array returned by keyArgs.\n        makeCacheKey(selectionSet, parent, context) {\n          if (supportsResultCaching(context.store)) {\n            return context.store.makeCacheKey(\n              selectionSet,\n              isReference(parent) ? parent.__ref : parent,\n              context.varString\n            );\n          }\n        },\n      }\n    );\n\n    this.executeSubSelectedArray = wrap(\n      (options: ExecSubSelectedArrayOptions) => {\n        maybeDependOnExistenceOfEntity(\n          options.context.store,\n          options.enclosingRef.__ref\n        );\n        return this.execSubSelectedArrayImpl(options);\n      },\n      {\n        max:\n          cacheSizes[\"inMemoryCache.executeSubSelectedArray\"] ||\n          defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"],\n        makeCacheKey({ field, array, context }) {\n          if (supportsResultCaching(context.store)) {\n            return context.store.makeCacheKey(field, array, context.varString);\n          }\n        },\n      }\n    );\n  }\n\n  /**\n   * Given a store and a query, return as much of the result as possible and\n   * identify if any data was missing from the store.\n   */\n  public diffQueryAgainstStore<T>({\n    store,\n    query,\n    rootId = \"ROOT_QUERY\",\n    variables,\n    returnPartialData = true,\n  }: DiffQueryAgainstStoreOptions): Cache.DiffResult<T> {\n    const policies = this.config.cache.policies;\n\n    variables = {\n      ...getDefaultValues(getQueryDefinition(query)),\n      ...variables!,\n    };\n\n    const rootRef = makeReference(rootId);\n    const execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: rootRef,\n      enclosingRef: rootRef,\n      context: {\n        store,\n        query,\n        policies,\n        variables,\n        varString: canonicalStringify(variables),\n        ...extractFragmentContext(query, this.config.fragments),\n      },\n    });\n\n    let missing: MissingFieldError | undefined;\n    if (execResult.missing) {\n      missing = new MissingFieldError(\n        firstMissing(execResult.missing)!,\n        execResult.missing,\n        query,\n        variables\n      );\n    }\n\n    const complete = !missing;\n    const { result } = execResult;\n\n    return {\n      result:\n        complete || returnPartialData ?\n          Object.keys(result).length === 0 ?\n            null\n          : result\n        : null,\n      complete,\n      missing,\n    } as Cache.DiffResult<T>;\n  }\n\n  public isFresh(\n    result: Record<string, any>,\n    parent: StoreObject | Reference,\n    selectionSet: SelectionSetNode,\n    context: ReadMergeModifyContext\n  ): boolean {\n    if (\n      supportsResultCaching(context.store) &&\n      this.knownResults.get(result) === selectionSet\n    ) {\n      const latest = this.executeSelectionSet.peek(\n        selectionSet,\n        parent,\n        context\n      );\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Uncached version of executeSelectionSet.\n  private execSelectionSetImpl({\n    selectionSet,\n    objectOrReference,\n    enclosingRef,\n    context,\n  }: ExecSelectionSetOptions): ExecResult {\n    if (\n      isReference(objectOrReference) &&\n      !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n      !context.store.has(objectOrReference.__ref)\n    ) {\n      return {\n        result: {},\n        missing: `Dangling reference to missing ${objectOrReference.__ref} object`,\n      };\n    }\n\n    const { variables, policies, store } = context;\n    const typename = store.getFieldValue<string>(\n      objectOrReference,\n      \"__typename\"\n    );\n\n    const objectsToMerge: Record<string, any>[] = [];\n    let missing: MissingTree | undefined;\n    const missingMerger = new DeepMerger();\n\n    if (typeof typename === \"string\" && !policies.rootIdsByTypename[typename]) {\n      // Ensure we always include a default value for the __typename\n      // field, if we have one. Note that this field can be overridden by other\n      // merged objects.\n      objectsToMerge.push({ __typename: typename });\n    }\n\n    function handleMissing<T>(result: ExecResult<T>, resultName: string): T {\n      if (result.missing) {\n        missing = missingMerger.merge(missing, {\n          [resultName]: result.missing,\n        });\n      }\n      return result.result;\n    }\n\n    const workSet = new Set(selectionSet.selections);\n\n    workSet.forEach((selection) => {\n      // Omit fields with directives @skip(if: <truthy value>) or\n      // @include(if: <falsy value>).\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        let fieldValue = policies.readField(\n          {\n            fieldName: selection.name.value,\n            field: selection,\n            variables: context.variables,\n            from: objectOrReference,\n          },\n          context\n        );\n\n        const resultName = resultKeyNameFromField(selection);\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            missing = missingMerger.merge(missing, {\n              [resultName]: `Can't find field '${selection.name.value}' on ${\n                isReference(objectOrReference) ?\n                  objectOrReference.__ref + \" object\"\n                : \"object \" + JSON.stringify(objectOrReference, null, 2)\n              }`,\n            });\n          }\n        } else if (isArray(fieldValue)) {\n          if (fieldValue.length > 0) {\n            fieldValue = handleMissing(\n              this.executeSubSelectedArray({\n                field: selection,\n                array: fieldValue,\n                enclosingRef,\n                context,\n              }),\n              resultName\n            );\n          }\n        } else if (!selection.selectionSet) {\n          // do nothing\n        } else if (fieldValue != null) {\n          // In this case, because we know the field has a selection set,\n          // it must be trying to query a GraphQLObjectType, which is why\n          // fieldValue must be != null.\n          fieldValue = handleMissing(\n            this.executeSelectionSet({\n              selectionSet: selection.selectionSet,\n              objectOrReference: fieldValue as StoreObject | Reference,\n              enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n              context,\n            }),\n            resultName\n          );\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push({ [resultName]: fieldValue });\n        }\n      } else {\n        const fragment = getFragmentFromSelection(\n          selection,\n          context.lookupFragment\n        );\n\n        if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n          throw newInvariantError(`No fragment named %s`, selection.name.value);\n        }\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n\n    const result = mergeDeepArray(objectsToMerge);\n    const finalResult: ExecResult = { result, missing };\n    const frozen = maybeDeepFreeze(finalResult);\n\n    // Store this result with its selection set so that we can quickly\n    // recognize it again in the StoreReader#isFresh method.\n    if (frozen.result) {\n      this.knownResults.set(frozen.result, selectionSet);\n    }\n\n    return frozen;\n  }\n\n  // Uncached version of executeSubSelectedArray.\n  private execSubSelectedArrayImpl({\n    field,\n    array,\n    enclosingRef,\n    context,\n  }: ExecSubSelectedArrayOptions): ExecResult {\n    let missing: MissingTree | undefined;\n    let missingMerger = new DeepMerger<MissingTree[]>();\n\n    function handleMissing<T>(childResult: ExecResult<T>, i: number): T {\n      if (childResult.missing) {\n        missing = missingMerger.merge(missing, { [i]: childResult.missing });\n      }\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map((item, i) => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n\n      // This is a nested array, recurse\n      if (isArray(item)) {\n        return handleMissing(\n          this.executeSubSelectedArray({\n            field,\n            array: item,\n            enclosingRef,\n            context,\n          }),\n          i\n        );\n      }\n\n      // This is an object, run the selection set on it\n      if (field.selectionSet) {\n        return handleMissing(\n          this.executeSelectionSet({\n            selectionSet: field.selectionSet,\n            objectOrReference: item,\n            enclosingRef: isReference(item) ? item : enclosingRef,\n            context,\n          }),\n          i\n        );\n      }\n\n      if (__DEV__) {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      return item;\n    });\n\n    return {\n      result: array,\n      missing,\n    };\n  }\n}\n\nfunction firstMissing(tree: MissingTree): string | undefined {\n  try {\n    JSON.stringify(tree, (_, value) => {\n      if (typeof value === \"string\") throw value;\n      return value;\n    });\n  } catch (result) {\n    return result as string;\n  }\n}\n\nfunction assertSelectionSetForIdValue(\n  store: NormalizedCache,\n  field: FieldNode,\n  fieldValue: any\n) {\n  if (!field.selectionSet) {\n    const workSet = new Set([fieldValue]);\n    workSet.forEach((value) => {\n      if (isNonNullObject(value)) {\n        invariant(\n          !isReference(value),\n          `Missing selection set for object of type %s returned for query field %s`,\n          getTypenameFromStoreObject(store, value),\n          field.name.value\n        );\n        Object.values(value).forEach(workSet.add, workSet);\n      }\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
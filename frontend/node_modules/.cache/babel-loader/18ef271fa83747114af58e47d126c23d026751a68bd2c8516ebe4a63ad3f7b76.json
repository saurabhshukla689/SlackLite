{"ast":null,"code":"import { getOperationDefinition, getOperationName } from \"@apollo/client/utilities/internal\";\nexport function createOperation(request, {\n  client\n}) {\n  const operation = {\n    query: request.query,\n    variables: request.variables || {},\n    extensions: request.extensions || {},\n    operationName: getOperationName(request.query),\n    operationType: getOperationDefinition(request.query).operation\n  };\n  let context = {\n    ...request.context\n  };\n  const setContext = next => {\n    if (typeof next === \"function\") {\n      context = {\n        ...context,\n        ...next(getContext())\n      };\n    } else {\n      context = {\n        ...context,\n        ...next\n      };\n    }\n  };\n  const getContext = () => Object.freeze({\n    ...context\n  });\n  Object.defineProperty(operation, \"setContext\", {\n    enumerable: false,\n    value: setContext\n  });\n  Object.defineProperty(operation, \"getContext\", {\n    enumerable: false,\n    value: getContext\n  });\n  Object.defineProperty(operation, \"client\", {\n    enumerable: false,\n    value: client\n  });\n  return operation;\n}","map":{"version":3,"names":["getOperationDefinition","getOperationName","createOperation","request","client","operation","query","variables","extensions","operationName","operationType","context","setContext","next","getContext","Object","freeze","defineProperty","enumerable","value"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/link/utils/createOperation.ts"],"sourcesContent":["import type { ApolloLink } from \"@apollo/client/link\";\nimport {\n  getOperationDefinition,\n  getOperationName,\n} from \"@apollo/client/utilities/internal\";\n\nexport function createOperation(\n  request: ApolloLink.Request,\n  { client }: ApolloLink.ExecuteContext\n): ApolloLink.Operation {\n  const operation = {\n    query: request.query,\n    variables: request.variables || {},\n    extensions: request.extensions || {},\n    operationName: getOperationName(request.query),\n    operationType: getOperationDefinition(request.query)!.operation,\n  } satisfies Omit<\n    ApolloLink.Operation,\n    \"client\" | \"getContext\" | \"setContext\"\n  > as ApolloLink.Operation;\n\n  let context = { ...request.context };\n\n  const setContext: ApolloLink.Operation[\"setContext\"] = (next) => {\n    if (typeof next === \"function\") {\n      context = { ...context, ...next(getContext()) };\n    } else {\n      context = { ...context, ...next };\n    }\n  };\n  const getContext: ApolloLink.Operation[\"getContext\"] = () =>\n    Object.freeze({ ...context });\n\n  Object.defineProperty(operation, \"setContext\", {\n    enumerable: false,\n    value: setContext,\n  });\n\n  Object.defineProperty(operation, \"getContext\", {\n    enumerable: false,\n    value: getContext,\n  });\n\n  Object.defineProperty(operation, \"client\", {\n    enumerable: false,\n    value: client,\n  });\n\n  return operation;\n}\n"],"mappings":"AACA,SACEA,sBAAsB,EACtBC,gBAAgB,QACX,mCAAmC;AAE1C,OAAM,SAAUC,eAAeA,CAC7BC,OAA2B,EAC3B;EAAEC;AAAM,CAA6B;EAErC,MAAMC,SAAS,GAAG;IAChBC,KAAK,EAAEH,OAAO,CAACG,KAAK;IACpBC,SAAS,EAAEJ,OAAO,CAACI,SAAS,IAAI,EAAE;IAClCC,UAAU,EAAEL,OAAO,CAACK,UAAU,IAAI,EAAE;IACpCC,aAAa,EAAER,gBAAgB,CAACE,OAAO,CAACG,KAAK,CAAC;IAC9CI,aAAa,EAAEV,sBAAsB,CAACG,OAAO,CAACG,KAAK,CAAE,CAACD;GAI/B;EAEzB,IAAIM,OAAO,GAAG;IAAE,GAAGR,OAAO,CAACQ;EAAO,CAAE;EAEpC,MAAMC,UAAU,GAAwCC,IAAI,IAAI;IAC9D,IAAI,OAAOA,IAAI,KAAK,UAAU,EAAE;MAC9BF,OAAO,GAAG;QAAE,GAAGA,OAAO;QAAE,GAAGE,IAAI,CAACC,UAAU,EAAE;MAAC,CAAE;IACjD,CAAC,MAAM;MACLH,OAAO,GAAG;QAAE,GAAGA,OAAO;QAAE,GAAGE;MAAI,CAAE;IACnC;EACF,CAAC;EACD,MAAMC,UAAU,GAAuCA,CAAA,KACrDC,MAAM,CAACC,MAAM,CAAC;IAAE,GAAGL;EAAO,CAAE,CAAC;EAE/BI,MAAM,CAACE,cAAc,CAACZ,SAAS,EAAE,YAAY,EAAE;IAC7Ca,UAAU,EAAE,KAAK;IACjBC,KAAK,EAAEP;GACR,CAAC;EAEFG,MAAM,CAACE,cAAc,CAACZ,SAAS,EAAE,YAAY,EAAE;IAC7Ca,UAAU,EAAE,KAAK;IACjBC,KAAK,EAAEL;GACR,CAAC;EAEFC,MAAM,CAACE,cAAc,CAACZ,SAAS,EAAE,QAAQ,EAAE;IACzCa,UAAU,EAAE,KAAK;IACjBC,KAAK,EAAEf;GACR,CAAC;EAEF,OAAOC,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Kind } from \"graphql\";\nimport { Slot } from \"optimism\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n// Contextual slot that allows us to disable accessor warnings on fields when in\n// migrate mode.\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/\nexport const disableWarningsSlot = new Slot();\nexport function getFragmentMaskMode(fragment) {\n  const directive = fragment.directives?.find(({\n    name\n  }) => name.value === \"unmask\");\n  if (!directive) {\n    return \"mask\";\n  }\n  const modeArg = directive.arguments?.find(({\n    name\n  }) => name.value === \"mode\");\n  if (__DEV__) {\n    if (modeArg) {\n      if (modeArg.value.kind === Kind.VARIABLE) {\n        __DEV__ && invariant.warn(44);\n      } else if (modeArg.value.kind !== Kind.STRING) {\n        __DEV__ && invariant.warn(45);\n      } else if (modeArg.value.value !== \"migrate\") {\n        __DEV__ && invariant.warn(46, modeArg.value.value);\n      }\n    }\n  }\n  if (modeArg && \"value\" in modeArg.value && modeArg.value.value === \"migrate\") {\n    return \"migrate\";\n  }\n  return \"unmask\";\n}","map":{"version":3,"names":["Kind","Slot","__DEV__","invariant","disableWarningsSlot","getFragmentMaskMode","fragment","directive","directives","find","name","value","modeArg","arguments","kind","VARIABLE","warn","STRING"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/masking/utils.ts"],"sourcesContent":["import type { FragmentSpreadNode } from \"graphql\";\nimport { Kind } from \"graphql\";\nimport { Slot } from \"optimism\";\n\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\n// Contextual slot that allows us to disable accessor warnings on fields when in\n// migrate mode.\n/** @internal */\nexport const disableWarningsSlot = new Slot<boolean>();\n\nexport function getFragmentMaskMode(\n  fragment: FragmentSpreadNode\n): \"mask\" | \"migrate\" | \"unmask\" {\n  const directive = fragment.directives?.find(\n    ({ name }) => name.value === \"unmask\"\n  );\n\n  if (!directive) {\n    return \"mask\";\n  }\n\n  const modeArg = directive.arguments?.find(\n    ({ name }) => name.value === \"mode\"\n  );\n\n  if (__DEV__) {\n    if (modeArg) {\n      if (modeArg.value.kind === Kind.VARIABLE) {\n        invariant.warn(\"@unmask 'mode' argument does not support variables.\");\n      } else if (modeArg.value.kind !== Kind.STRING) {\n        invariant.warn(\"@unmask 'mode' argument must be of type string.\");\n      } else if (modeArg.value.value !== \"migrate\") {\n        invariant.warn(\n          \"@unmask 'mode' argument does not recognize value '%s'.\",\n          modeArg.value.value\n        );\n      }\n    }\n  }\n\n  if (\n    modeArg &&\n    \"value\" in modeArg.value &&\n    modeArg.value.value === \"migrate\"\n  ) {\n    return \"migrate\";\n  }\n\n  return \"unmask\";\n}\n"],"mappings":"AACA,SAASA,IAAT,QAAqB,SAAS;AAC9B,SAASC,IAAT,QAAqB,UAAU;AAE/B,SAASC,OAAT,QAAwB,sCAAsC;AAC9D,SAASC,SAAT,QAA0B,oCAAoC;AAE9D;AACA;;;;;;AAEA,OAAO,MAAMC,mBAAb,GAAmC,IAAIH,IAAI,CAA3C,CAAsD;AAEtD,gBAAgBI,mBAAmBA,CACjCC,QAA4B,EAD9B;EAGE,MAAMC,SAAR,GAAoBD,QAAQ,CAACE,UAAU,EAAEC,IAAI,CACzC,CAAC;IAAEC;EADP,CACa,KAAKA,IAAI,CAACC,KADvB,KACiC,QAAQ,CACtC;EAED,IAAI,CAACJ,SAAS,EAAE;IACd,OAAO,MAAM;EACf;EAEA,MAAMK,OAAR,GAAkBL,SAAS,CAACM,SAAS,EAAEJ,IAAI,CACvC,CAAC;IAAEC;EADP,CACa,KAAKA,IAAI,CAACC,KADvB,KACiC,MAAM,CACpC;EAED,IAAIT,OAAO,EAAE;IACX,IAAIU,OAAO,EAAE;MACX,IAAIA,OAAO,CAACD,KAAK,CAACG,IAAxB,KAAiCd,IAAI,CAACe,QAAQ,EAAE;mBACxCZ,SAAS,CAACa,IAAlB,IAA6E;MACvE,OAAO,IAAIJ,OAAO,CAACD,KAAK,CAACG,IAA/B,KAAwCd,IAAI,CAACiB,MAAM,EAAE;mBAC7Cd,SAAS,CAACa,IAAlB,IAAyE;MACnE,OAAO,IAAIJ,OAAO,CAACD,KAAK,CAACA,KAA/B,KAAyC,SAAS,EAAE;mBAC5CR,SAAS,CAACa,IAAlB,KAEUJ,OAAO,CAACD,KAAK,CAACA,KAFxB,CAGS;MACH;IACF;EACF;EAEA,IACEC,OADJ,IAEI,OAAJ,IAAeA,OAAO,CAACD,KAAvB,IACIC,OAAO,CAACD,KAAK,CAACA,KAAlB,KAA4B,SAAS,EACjC;IACA,OAAO,SAAS;EAClB;EAEA,OAAO,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
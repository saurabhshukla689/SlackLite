{"ast":null,"code":"import equal from \"@wry/equality\";\nimport * as React from \"react\";\nimport { useDeepMemo, wrapHook } from \"./internal/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\n/**\n * `useFragment` represents a lightweight live binding into the Apollo Client Cache and enables Apollo Client to broadcast very specific fragment results to individual components. This hook returns an always-up-to-date view of whatever data the cache currently contains for a given fragment. `useFragment` never triggers network requests of its own.\n *\n * Note that the `useQuery` hook remains the primary hook responsible for querying and populating data in the cache ([see the API reference](./hooks#usequery)). As a result, the component reading the fragment data via `useFragment` is still subscribed to all changes in the query data, but receives updates only when that fragment's specific data change.\n *\n * To view a `useFragment` example, see the [Fragments](https://www.apollographql.com/docs/react/data/fragments#usefragment) page.\n */\nexport function useFragment(options) {\n  \"use no memo\";\n\n  return wrapHook(\"useFragment\",\n  // eslint-disable-next-line react-compiler/react-compiler\n  useFragment_, useApolloClient(options.client))(options);\n}\nfunction useFragment_(options) {\n  const client = useApolloClient(options.client);\n  const {\n    cache\n  } = client;\n  const {\n    from,\n    ...rest\n  } = options;\n  // We calculate the cache id seperately from `stableOptions` because we don't\n  // want changes to non key fields in the `from` property to affect\n  // `stableOptions` and retrigger our subscription. If the cache identifier\n  // stays the same between renders, we want to reuse the existing subscription.\n  const id = React.useMemo(() => typeof from === \"string\" ? from : from === null ? null : cache.identify(from), [cache, from]);\n  const stableOptions = useDeepMemo(() => ({\n    ...rest,\n    from: id\n  }), [rest, id]);\n  // Since .next is async, we need to make sure that we\n  // get the correct diff on the next render given new diffOptions\n  const diff = React.useMemo(() => {\n    const {\n      fragment,\n      fragmentName,\n      from,\n      optimistic = true\n    } = stableOptions;\n    if (from === null) {\n      return {\n        result: diffToResult({\n          result: {},\n          complete: false\n        })\n      };\n    }\n    const {\n      cache\n    } = client;\n    const diff = cache.diff({\n      ...stableOptions,\n      returnPartialData: true,\n      id: from,\n      query: cache[\"getFragmentDoc\"](client[\"transform\"](fragment), fragmentName),\n      optimistic\n    });\n    return {\n      result: diffToResult({\n        ...diff,\n        result: client[\"queryManager\"].maskFragment({\n          fragment,\n          fragmentName,\n          // TODO: Revert to `diff.result` once `useFragment` supports `null` as\n          // valid return value\n          data: diff.result === null ? {} : diff.result\n        })\n      })\n    };\n  }, [client, stableOptions]);\n  // Used for both getSnapshot and getServerSnapshot\n  const getSnapshot = React.useCallback(() => diff.result, [diff]);\n  return useSyncExternalStore(React.useCallback(forceUpdate => {\n    let lastTimeout = 0;\n    const subscription = stableOptions.from === null ? null : client.watchFragment(stableOptions).subscribe({\n      next: result => {\n        // Avoid unnecessarily rerendering this hook for the initial result\n        // emitted from watchFragment which should be equal to\n        // `diff.result`.\n        if (equal(result, diff.result)) return;\n        diff.result = result;\n        // If we get another update before we've re-rendered, bail out of\n        // the update and try again. This ensures that the relative timing\n        // between useQuery and useFragment stays roughly the same as\n        // fixed in https://github.com/apollographql/apollo-client/pull/11083\n        clearTimeout(lastTimeout);\n        lastTimeout = setTimeout(forceUpdate);\n      }\n    });\n    return () => {\n      subscription?.unsubscribe();\n      clearTimeout(lastTimeout);\n    };\n  }, [client, stableOptions, diff]), getSnapshot, getSnapshot);\n}\nfunction diffToResult(diff) {\n  const result = {\n    data: diff.result,\n    complete: !!diff.complete,\n    dataState: diff.complete ? \"complete\" : \"partial\"\n  }; // TODO: Remove assertion once useFragment returns null\n  if (diff.missing) {\n    result.missing = diff.missing.missing;\n  }\n  return result;\n}","map":{"version":3,"names":["equal","React","useDeepMemo","wrapHook","useApolloClient","useSyncExternalStore","useFragment","options","useFragment_","client","cache","from","rest","id","useMemo","identify","stableOptions","diff","fragment","fragmentName","optimistic","result","diffToResult","complete","returnPartialData","query","maskFragment","data","getSnapshot","useCallback","forceUpdate","lastTimeout","subscription","watchFragment","subscribe","next","clearTimeout","setTimeout","unsubscribe","dataState","missing"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/react/hooks/useFragment.ts"],"sourcesContent":["import equal from \"@wry/equality\";\nimport * as React from \"react\";\n\nimport type {\n  ApolloClient,\n  DataValue,\n  DocumentNode,\n  GetDataState,\n  OperationVariables,\n  TypedDocumentNode,\n} from \"@apollo/client\";\nimport type {\n  Cache,\n  MissingTree,\n  Reference,\n  StoreObject,\n} from \"@apollo/client/cache\";\nimport type { FragmentType, MaybeMasked } from \"@apollo/client/masking\";\nimport type { NoInfer } from \"@apollo/client/utilities/internal\";\n\nimport { useDeepMemo, wrapHook } from \"./internal/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\n\nexport declare namespace useFragment {\n  import _self = useFragment;\n  export interface Options<TData, TVariables extends OperationVariables> {\n    /**\n     * A GraphQL document created using the `gql` template string tag from\n     * `graphql-tag` with one or more fragments which will be used to determine\n     * the shape of data to read. If you provide more than one fragment in this\n     * document then you must also specify `fragmentName` to select a single.\n     */\n    fragment: DocumentNode | TypedDocumentNode<TData, TVariables>;\n\n    /**\n     * The name of the fragment in your GraphQL document to be used. If you do\n     * not provide a `fragmentName` and there is only one fragment in your\n     * `fragment` document then that fragment will be used.\n     */\n    fragmentName?: string;\n\n    /**\n     * Any variables that the GraphQL query may depend on.\n     */\n    variables?: NoInfer<TVariables>;\n\n    /**\n     * An object containing a `__typename` and primary key fields (such as `id`) identifying the entity object from which the fragment will be retrieved, or a `{ __ref: \"...\" }` reference, or a `string` ID (uncommon).\n     */\n    from:\n      | StoreObject\n      | Reference\n      | FragmentType<NoInfer<TData>>\n      | string\n      | null;\n\n    /**\n     * Whether to read from optimistic or non-optimistic cache data. If\n     * this named option is provided, the optimistic parameter of the\n     * readQuery method can be omitted.\n     *\n     * @defaultValue true\n     */\n    optimistic?: boolean;\n\n    /**\n     * The instance of `ApolloClient` to use to look up the fragment.\n     *\n     * By default, the instance that's passed down via context is used, but you\n     * can provide a different instance here.\n     *\n     * @docGroup 1. Operation options\n     */\n    client?: ApolloClient;\n  }\n\n  namespace DocumentationTypes {\n    namespace useFragment {\n      export interface Options<\n        TData = unknown,\n        TVariables extends OperationVariables = OperationVariables,\n      > extends _self.Options<TData, TVariables> {}\n    }\n  }\n\n  // TODO: Update this to return `null` when there is no data returned from the\n  // fragment.\n  export type Result<TData> =\n    | ({\n        /** {@inheritDoc @apollo/client/react!useFragment.DocumentationTypes.useFragment.Result#complete:member} */\n        complete: true;\n        /** {@inheritDoc @apollo/client/react!useFragment.DocumentationTypes.useFragment.Result#missing:member} */\n        missing?: never;\n      } & GetDataState<MaybeMasked<TData>, \"complete\">)\n    | ({\n        /** {@inheritDoc @apollo/client/react!useFragment.DocumentationTypes.useFragment.Result#complete:member} */\n        complete: false;\n        /** {@inheritDoc @apollo/client/react!useFragment.DocumentationTypes.useFragment.Result#missing:member} */\n        missing?: MissingTree;\n      } & GetDataState<MaybeMasked<TData>, \"partial\">);\n\n  export namespace DocumentationTypes {\n    namespace useFragment {\n      export interface Result<TData> {\n        data: MaybeMasked<TData> | DataValue.Partial<MaybeMasked<TData>>;\n        complete: boolean;\n        /**\n         * A tree of all `MissingFieldError` messages reported during fragment reading, where the branches of the tree indicate the paths of the errors within the query result.\n         */\n        missing?: MissingTree;\n      }\n    }\n  }\n  export namespace DocumentationTypes {\n    /** {@inheritDoc @apollo/client/react!useFragment:function(1)} */\n    export function useFragment<\n      TData = unknown,\n      TVariables extends OperationVariables = OperationVariables,\n    >({\n      fragment,\n      from,\n      fragmentName,\n      variables,\n      optimistic,\n      client,\n    }: useFragment.Options<TData, TVariables>): useFragment.Result<TData>;\n  }\n}\n\n/**\n * `useFragment` represents a lightweight live binding into the Apollo Client Cache and enables Apollo Client to broadcast very specific fragment results to individual components. This hook returns an always-up-to-date view of whatever data the cache currently contains for a given fragment. `useFragment` never triggers network requests of its own.\n *\n * Note that the `useQuery` hook remains the primary hook responsible for querying and populating data in the cache ([see the API reference](./hooks#usequery)). As a result, the component reading the fragment data via `useFragment` is still subscribed to all changes in the query data, but receives updates only when that fragment's specific data change.\n *\n * To view a `useFragment` example, see the [Fragments](https://www.apollographql.com/docs/react/data/fragments#usefragment) page.\n */\nexport function useFragment<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(options: useFragment.Options<TData, TVariables>): useFragment.Result<TData> {\n  \"use no memo\";\n  return wrapHook(\n    \"useFragment\",\n    // eslint-disable-next-line react-compiler/react-compiler\n    useFragment_,\n    useApolloClient(options.client)\n  )(options);\n}\n\nfunction useFragment_<TData, TVariables extends OperationVariables>(\n  options: useFragment.Options<TData, TVariables>\n): useFragment.Result<TData> {\n  const client = useApolloClient(options.client);\n  const { cache } = client;\n  const { from, ...rest } = options;\n\n  // We calculate the cache id seperately from `stableOptions` because we don't\n  // want changes to non key fields in the `from` property to affect\n  // `stableOptions` and retrigger our subscription. If the cache identifier\n  // stays the same between renders, we want to reuse the existing subscription.\n  const id = React.useMemo(\n    () =>\n      typeof from === \"string\" ? from\n      : from === null ? null\n      : cache.identify(from),\n    [cache, from]\n  );\n\n  const stableOptions = useDeepMemo(() => ({ ...rest, from: id! }), [rest, id]);\n\n  // Since .next is async, we need to make sure that we\n  // get the correct diff on the next render given new diffOptions\n  const diff = React.useMemo(() => {\n    const { fragment, fragmentName, from, optimistic = true } = stableOptions;\n\n    if (from === null) {\n      return {\n        result: diffToResult({\n          result: {},\n          complete: false,\n        } as Cache.DiffResult<TData>),\n      };\n    }\n\n    const { cache } = client;\n    const diff = cache.diff<TData, TVariables>({\n      ...stableOptions,\n      returnPartialData: true,\n      id: from,\n      query: cache[\"getFragmentDoc\"](\n        client[\"transform\"](fragment),\n        fragmentName\n      ),\n      optimistic,\n    });\n\n    return {\n      result: diffToResult<TData>({\n        ...diff,\n        result: client[\"queryManager\"].maskFragment({\n          fragment,\n          fragmentName,\n          // TODO: Revert to `diff.result` once `useFragment` supports `null` as\n          // valid return value\n          data: diff.result === null ? {} : diff.result,\n        }) as any,\n      }),\n    };\n  }, [client, stableOptions]);\n\n  // Used for both getSnapshot and getServerSnapshot\n  const getSnapshot = React.useCallback(() => diff.result, [diff]);\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (forceUpdate) => {\n        let lastTimeout = 0;\n\n        const subscription =\n          stableOptions.from === null ?\n            null\n          : client.watchFragment(stableOptions).subscribe({\n              next: (result) => {\n                // Avoid unnecessarily rerendering this hook for the initial result\n                // emitted from watchFragment which should be equal to\n                // `diff.result`.\n                if (equal(result, diff.result)) return;\n                diff.result = result;\n                // If we get another update before we've re-rendered, bail out of\n                // the update and try again. This ensures that the relative timing\n                // between useQuery and useFragment stays roughly the same as\n                // fixed in https://github.com/apollographql/apollo-client/pull/11083\n                clearTimeout(lastTimeout);\n                lastTimeout = setTimeout(forceUpdate) as any;\n              },\n            });\n        return () => {\n          subscription?.unsubscribe();\n          clearTimeout(lastTimeout);\n        };\n      },\n      [client, stableOptions, diff]\n    ),\n    getSnapshot,\n    getSnapshot\n  );\n}\n\nfunction diffToResult<TData>(\n  diff: Cache.DiffResult<TData>\n): useFragment.Result<TData> {\n  const result = {\n    data: diff.result,\n    complete: !!diff.complete,\n    dataState: diff.complete ? \"complete\" : \"partial\",\n  } as useFragment.Result<TData>; // TODO: Remove assertion once useFragment returns null\n\n  if (diff.missing) {\n    result.missing = diff.missing.missing;\n  }\n\n  return result;\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,eAAe;AACjC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAmB9B,SAASC,WAAW,EAAEC,QAAQ,QAAQ,qBAAqB;AAC3D,SAASC,eAAe,QAAQ,sBAAsB;AACtD,SAASC,oBAAoB,QAAQ,2BAA2B;AA4GhE;;;;;;;AAOA,OAAM,SAAUC,WAAWA,CAGzBC,OAA+C;EAC/C,aAAa;;EACb,OAAOJ,QAAQ,CACb,aAAa;EACb;EACAK,YAAY,EACZJ,eAAe,CAACG,OAAO,CAACE,MAAM,CAAC,CAChC,CAACF,OAAO,CAAC;AACZ;AAEA,SAASC,YAAYA,CACnBD,OAA+C;EAE/C,MAAME,MAAM,GAAGL,eAAe,CAACG,OAAO,CAACE,MAAM,CAAC;EAC9C,MAAM;IAAEC;EAAK,CAAE,GAAGD,MAAM;EACxB,MAAM;IAAEE,IAAI;IAAE,GAAGC;EAAI,CAAE,GAAGL,OAAO;EAEjC;EACA;EACA;EACA;EACA,MAAMM,EAAE,GAAGZ,KAAK,CAACa,OAAO,CACtB,MACE,OAAOH,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAC7BA,IAAI,KAAK,IAAI,GAAG,IAAI,GACpBD,KAAK,CAACK,QAAQ,CAACJ,IAAI,CAAC,EACxB,CAACD,KAAK,EAAEC,IAAI,CAAC,CACd;EAED,MAAMK,aAAa,GAAGd,WAAW,CAAC,OAAO;IAAE,GAAGU,IAAI;IAAED,IAAI,EAAEE;EAAG,CAAE,CAAC,EAAE,CAACD,IAAI,EAAEC,EAAE,CAAC,CAAC;EAE7E;EACA;EACA,MAAMI,IAAI,GAAGhB,KAAK,CAACa,OAAO,CAAC,MAAK;IAC9B,MAAM;MAAEI,QAAQ;MAAEC,YAAY;MAAER,IAAI;MAAES,UAAU,GAAG;IAAI,CAAE,GAAGJ,aAAa;IAEzE,IAAIL,IAAI,KAAK,IAAI,EAAE;MACjB,OAAO;QACLU,MAAM,EAAEC,YAAY,CAAC;UACnBD,MAAM,EAAE,EAAE;UACVE,QAAQ,EAAE;SACgB;OAC7B;IACH;IAEA,MAAM;MAAEb;IAAK,CAAE,GAAGD,MAAM;IACxB,MAAMQ,IAAI,GAAGP,KAAK,CAACO,IAAI,CAAoB;MACzC,GAAGD,aAAa;MAChBQ,iBAAiB,EAAE,IAAI;MACvBX,EAAE,EAAEF,IAAI;MACRc,KAAK,EAAEf,KAAK,CAAC,gBAAgB,CAAC,CAC5BD,MAAM,CAAC,WAAW,CAAC,CAACS,QAAQ,CAAC,EAC7BC,YAAY,CACb;MACDC;KACD,CAAC;IAEF,OAAO;MACLC,MAAM,EAAEC,YAAY,CAAQ;QAC1B,GAAGL,IAAI;QACPI,MAAM,EAAEZ,MAAM,CAAC,cAAc,CAAC,CAACiB,YAAY,CAAC;UAC1CR,QAAQ;UACRC,YAAY;UACZ;UACA;UACAQ,IAAI,EAAEV,IAAI,CAACI,MAAM,KAAK,IAAI,GAAG,EAAE,GAAGJ,IAAI,CAACI;SACxC;OACF;KACF;EACH,CAAC,EAAE,CAACZ,MAAM,EAAEO,aAAa,CAAC,CAAC;EAE3B;EACA,MAAMY,WAAW,GAAG3B,KAAK,CAAC4B,WAAW,CAAC,MAAMZ,IAAI,CAACI,MAAM,EAAE,CAACJ,IAAI,CAAC,CAAC;EAEhE,OAAOZ,oBAAoB,CACzBJ,KAAK,CAAC4B,WAAW,CACdC,WAAW,IAAI;IACd,IAAIC,WAAW,GAAG,CAAC;IAEnB,MAAMC,YAAY,GAChBhB,aAAa,CAACL,IAAI,KAAK,IAAI,GACzB,IAAI,GACJF,MAAM,CAACwB,aAAa,CAACjB,aAAa,CAAC,CAACkB,SAAS,CAAC;MAC5CC,IAAI,EAAGd,MAAM,IAAI;QACf;QACA;QACA;QACA,IAAIrB,KAAK,CAACqB,MAAM,EAAEJ,IAAI,CAACI,MAAM,CAAC,EAAE;QAChCJ,IAAI,CAACI,MAAM,GAAGA,MAAM;QACpB;QACA;QACA;QACA;QACAe,YAAY,CAACL,WAAW,CAAC;QACzBA,WAAW,GAAGM,UAAU,CAACP,WAAW,CAAQ;MAC9C;KACD,CAAC;IACN,OAAO,MAAK;MACVE,YAAY,EAAEM,WAAW,EAAE;MAC3BF,YAAY,CAACL,WAAW,CAAC;IAC3B,CAAC;EACH,CAAC,EACD,CAACtB,MAAM,EAAEO,aAAa,EAAEC,IAAI,CAAC,CAC9B,EACDW,WAAW,EACXA,WAAW,CACZ;AACH;AAEA,SAASN,YAAYA,CACnBL,IAA6B;EAE7B,MAAMI,MAAM,GAAG;IACbM,IAAI,EAAEV,IAAI,CAACI,MAAM;IACjBE,QAAQ,EAAE,CAAC,CAACN,IAAI,CAACM,QAAQ;IACzBgB,SAAS,EAAEtB,IAAI,CAACM,QAAQ,GAAG,UAAU,GAAG;GACZ,CAAC,CAAC;EAEhC,IAAIN,IAAI,CAACuB,OAAO,EAAE;IAChBnB,MAAM,CAACmB,OAAO,GAAGvB,IAAI,CAACuB,OAAO,CAACA,OAAO;EACvC;EAEA,OAAOnB,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as React from \"react\";\nimport { canonicalStringify } from \"@apollo/client/cache\";\nimport { assertWrappedQueryRef, getSuspenseCache, unwrapQueryRef, updateWrappedQueryRef, wrapQueryRef } from \"@apollo/client/react/internal\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\nimport { useDeepMemo, useRenderGuard } from \"./internal/index.js\";\nimport { validateSuspenseHookOptions } from \"./internal/validateSuspenseHookOptions.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useLoadableQuery(query, options = {}) {\n  const client = useApolloClient(options.client);\n  const suspenseCache = getSuspenseCache(client);\n  const watchQueryOptions = useWatchQueryOptions({\n    client,\n    query,\n    options\n  });\n  const {\n    queryKey = []\n  } = options;\n  const [queryRef, setQueryRef] = React.useState(null);\n  assertWrappedQueryRef(queryRef);\n  const internalQueryRef = queryRef && unwrapQueryRef(queryRef);\n  if (queryRef && internalQueryRef?.didChangeOptions(watchQueryOptions)) {\n    const promise = internalQueryRef.applyOptions(watchQueryOptions);\n    updateWrappedQueryRef(queryRef, promise);\n  }\n  const calledDuringRender = useRenderGuard();\n  const fetchMore = React.useCallback(options => {\n    if (!internalQueryRef) {\n      throw new Error(\"The query has not been loaded. Please load the query.\");\n    }\n    const promise = internalQueryRef.fetchMore(options);\n    setQueryRef(wrapQueryRef(internalQueryRef));\n    return promise;\n  }, [internalQueryRef]);\n  const refetch = React.useCallback(options => {\n    if (!internalQueryRef) {\n      throw new Error(\"The query has not been loaded. Please load the query.\");\n    }\n    const promise = internalQueryRef.refetch(options);\n    setQueryRef(wrapQueryRef(internalQueryRef));\n    return promise;\n  }, [internalQueryRef]);\n  const loadQuery = React.useCallback((...args) => {\n    invariant(!calledDuringRender(), 31);\n    const [variables] = args;\n    const cacheKey = [query, canonicalStringify(variables), ...[].concat(queryKey)];\n    const queryRef = suspenseCache.getQueryRef(cacheKey, () => client.watchQuery({\n      ...watchQueryOptions,\n      variables\n    }));\n    setQueryRef(wrapQueryRef(queryRef));\n  }, [query, queryKey, suspenseCache, watchQueryOptions, calledDuringRender, client]);\n  const subscribeToMore = React.useCallback(options => {\n    invariant(internalQueryRef, 32);\n    return internalQueryRef.observable.subscribeToMore(\n    // TODO: The internalQueryRef doesn't have TVariables' type information so we have to cast it here\n    options);\n  }, [internalQueryRef]);\n  const reset = React.useCallback(() => {\n    setQueryRef(null);\n  }, []);\n  return [loadQuery, queryRef, {\n    fetchMore,\n    refetch,\n    reset,\n    subscribeToMore\n  }];\n}\nfunction useWatchQueryOptions({\n  client,\n  query,\n  options\n}) {\n  return useDeepMemo(() => {\n    const fetchPolicy = options.fetchPolicy || client.defaultOptions.watchQuery?.fetchPolicy || \"cache-first\";\n    const watchQueryOptions = {\n      ...options,\n      fetchPolicy,\n      query,\n      notifyOnNetworkStatusChange: false,\n      nextFetchPolicy: void 0\n    };\n    if (__DEV__) {\n      validateSuspenseHookOptions(watchQueryOptions);\n    }\n    return watchQueryOptions;\n  }, [client, options, query]);\n}","map":{"version":3,"names":["React","canonicalStringify","assertWrappedQueryRef","getSuspenseCache","unwrapQueryRef","updateWrappedQueryRef","wrapQueryRef","__DEV__","invariant","useDeepMemo","useRenderGuard","validateSuspenseHookOptions","useApolloClient","useLoadableQuery","query","options","client","suspenseCache","watchQueryOptions","useWatchQueryOptions","queryKey","queryRef","setQueryRef","useState","internalQueryRef","didChangeOptions","promise","applyOptions","calledDuringRender","fetchMore","useCallback","Error","refetch","loadQuery","args","variables","cacheKey","concat","getQueryRef","watchQuery","subscribeToMore","observable","reset","fetchPolicy","defaultOptions","notifyOnNetworkStatusChange","nextFetchPolicy"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/react/hooks/useLoadableQuery.ts"],"sourcesContent":["import * as React from \"react\";\n\nimport type {\n  ApolloClient,\n  DataState,\n  DefaultContext,\n  DocumentNode,\n  ErrorPolicy,\n  ObservableQuery,\n  OperationVariables,\n  RefetchWritePolicy,\n  TypedDocumentNode,\n  WatchQueryFetchPolicy,\n} from \"@apollo/client\";\nimport type { SubscribeToMoreFunction } from \"@apollo/client\";\nimport { canonicalStringify } from \"@apollo/client/cache\";\nimport type { QueryRef } from \"@apollo/client/react\";\nimport type {\n  CacheKey,\n  FetchMoreFunction,\n  RefetchFunction,\n} from \"@apollo/client/react/internal\";\nimport {\n  assertWrappedQueryRef,\n  getSuspenseCache,\n  unwrapQueryRef,\n  updateWrappedQueryRef,\n  wrapQueryRef,\n} from \"@apollo/client/react/internal\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport { __use, useDeepMemo, useRenderGuard } from \"./internal/index.js\";\nimport { validateSuspenseHookOptions } from \"./internal/validateSuspenseHookOptions.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\ntype ResetFunction = () => void;\n\nexport declare namespace useLoadableQuery {\n  export type LoadQueryFunction<TVariables extends OperationVariables> = (\n    // Use variadic args to handle cases where TVariables is type `never`, in\n    // which case we don't want to allow a variables argument. In other\n    // words, we don't want to allow variables to be passed as an argument to this\n    // function if the query does not expect variables in the document.\n    ...args: {} extends TVariables ? [variables?: TVariables]\n    : [variables: TVariables]\n  ) => void;\n\n  export type Result<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n    TStates extends\n      DataState<TData>[\"dataState\"] = DataState<TData>[\"dataState\"],\n  > = [\n    loadQuery: LoadQueryFunction<TVariables>,\n    queryRef: QueryRef<TData, TVariables, TStates> | null,\n    handlers: Handlers<TData, TVariables>,\n  ];\n  export interface Handlers<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  > {\n    /** {@inheritDoc @apollo/client!QueryResultDocumentation#fetchMore:member} */\n    fetchMore: FetchMoreFunction<TData, TVariables>;\n    /** {@inheritDoc @apollo/client!QueryResultDocumentation#refetch:member} */\n    refetch: RefetchFunction<TData, TVariables>;\n    /** {@inheritDoc @apollo/client!ObservableQuery#subscribeToMore:member(1)} */\n    subscribeToMore: SubscribeToMoreFunction<TData, TVariables>;\n    /**\n     * A function that resets the `queryRef` back to `null`.\n     */\n    reset: ResetFunction;\n  }\n\n  export type FetchPolicy = Extract<\n    WatchQueryFetchPolicy,\n    \"cache-first\" | \"network-only\" | \"no-cache\" | \"cache-and-network\"\n  >;\n\n  export interface Options {\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#client:member} */\n    client?: ApolloClient;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#context:member} */\n    context?: DefaultContext;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#errorPolicy:member} */\n    errorPolicy?: ErrorPolicy;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#fetchPolicy:member} */\n    fetchPolicy?: FetchPolicy;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#queryKey:member} */\n    queryKey?: string | number | any[];\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#refetchWritePolicy:member} */\n    refetchWritePolicy?: RefetchWritePolicy;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#returnPartialData:member} */\n    returnPartialData?: boolean;\n  }\n\n  export namespace DocumentationTypes {\n    /** {@inheritDoc @apollo/client/react!useLoadableQuery:function(1)} */\n    export function useLoadableQuery<\n      TData = unknown,\n      TVariables extends OperationVariables = OperationVariables,\n    >(\n      query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n      options: useLoadableQuery.Options\n    ): useLoadableQuery.Result<TData, TVariables>;\n  }\n}\n\n/**\n * A hook for imperatively loading a query, such as responding to a user\n * interaction.\n *\n * > Refer to the [Suspense - Fetching in response to user interaction](https://www.apollographql.com/docs/react/data/suspense#fetching-in-response-to-user-interaction) section for a more in-depth overview of `useLoadableQuery`.\n *\n * @example\n *\n * ```jsx\n * import { gql, useLoadableQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function App() {\n *   const [loadGreeting, queryRef] = useLoadableQuery(GET_GREETING);\n *\n *   return (\n *     <>\n *       <button onClick={() => loadGreeting({ language: \"english\" })}>\n *         Load greeting\n *       </button>\n *       <Suspense fallback={<div>Loading...</div>}>\n *         {queryRef && <Hello queryRef={queryRef} />}\n *       </Suspense>\n *     </>\n *   );\n * }\n *\n * function Hello({ queryRef }) {\n *   const { data } = useReadQuery(queryRef);\n *\n *   return <div>{data.greeting.message}</div>;\n * }\n * ```\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns A tuple in the form of `[loadQuery, queryRef, handlers]`\n */\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: useLoadableQuery.Options & {\n    returnPartialData: true;\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): useLoadableQuery.Result<\n  TData,\n  TVariables,\n  \"complete\" | \"streaming\" | \"partial\" | \"empty\"\n>;\n\n/** {@inheritDoc @apollo/client/react!useLoadableQuery:function(1)} */\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: useLoadableQuery.Options & {\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): useLoadableQuery.Result<\n  TData,\n  TVariables,\n  \"complete\" | \"streaming\" | \"empty\"\n>;\n\n/** {@inheritDoc @apollo/client/react!useLoadableQuery:function(1)} */\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: useLoadableQuery.Options & {\n    returnPartialData: true;\n  }\n): useLoadableQuery.Result<\n  TData,\n  TVariables,\n  \"complete\" | \"streaming\" | \"partial\"\n>;\n\n/** {@inheritDoc @apollo/client/react!useLoadableQuery:function(1)} */\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: useLoadableQuery.Options\n): useLoadableQuery.Result<TData, TVariables, \"complete\" | \"streaming\">;\n\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: useLoadableQuery.Options = {}\n): useLoadableQuery.Result<TData, TVariables> {\n  const client = useApolloClient(options.client);\n  const suspenseCache = getSuspenseCache(client);\n  const watchQueryOptions = useWatchQueryOptions({ client, query, options });\n  const { queryKey = [] } = options;\n\n  const [queryRef, setQueryRef] = React.useState<QueryRef<\n    TData,\n    TVariables,\n    DataState<TData>[\"dataState\"]\n  > | null>(null);\n\n  assertWrappedQueryRef(queryRef);\n\n  const internalQueryRef = queryRef && unwrapQueryRef(queryRef);\n\n  if (queryRef && internalQueryRef?.didChangeOptions(watchQueryOptions)) {\n    const promise = internalQueryRef.applyOptions(watchQueryOptions);\n    updateWrappedQueryRef(queryRef, promise);\n  }\n\n  const calledDuringRender = useRenderGuard();\n\n  const fetchMore: FetchMoreFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      if (!internalQueryRef) {\n        throw new Error(\n          \"The query has not been loaded. Please load the query.\"\n        );\n      }\n\n      const promise = internalQueryRef.fetchMore(options);\n\n      setQueryRef(wrapQueryRef(internalQueryRef));\n\n      return promise;\n    },\n    [internalQueryRef]\n  );\n\n  const refetch: RefetchFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      if (!internalQueryRef) {\n        throw new Error(\n          \"The query has not been loaded. Please load the query.\"\n        );\n      }\n\n      const promise = internalQueryRef.refetch(options);\n\n      setQueryRef(wrapQueryRef(internalQueryRef));\n\n      return promise;\n    },\n    [internalQueryRef]\n  );\n\n  const loadQuery: useLoadableQuery.LoadQueryFunction<TVariables> =\n    React.useCallback(\n      (...args) => {\n        invariant(\n          !calledDuringRender(),\n          \"useLoadableQuery: 'loadQuery' should not be called during render. To start a query during render, use the 'useBackgroundQuery' hook.\"\n        );\n\n        const [variables] = args;\n\n        const cacheKey: CacheKey = [\n          query,\n          canonicalStringify(variables),\n          ...([] as any[]).concat(queryKey),\n        ];\n\n        const queryRef = suspenseCache.getQueryRef(cacheKey, () =>\n          client.watchQuery({\n            ...watchQueryOptions,\n            variables,\n          } as ApolloClient.WatchQueryOptions<any, any>)\n        );\n\n        setQueryRef(wrapQueryRef(queryRef));\n      },\n      [\n        query,\n        queryKey,\n        suspenseCache,\n        watchQueryOptions,\n        calledDuringRender,\n        client,\n      ]\n    );\n\n  const subscribeToMore: SubscribeToMoreFunction<TData, TVariables> =\n    React.useCallback(\n      (options) => {\n        invariant(\n          internalQueryRef,\n          \"The query has not been loaded. Please load the query.\"\n        );\n\n        return internalQueryRef.observable.subscribeToMore(\n          // TODO: The internalQueryRef doesn't have TVariables' type information so we have to cast it here\n          options as any as ObservableQuery.SubscribeToMoreOptions<\n            TData,\n            OperationVariables\n          >\n        );\n      },\n      [internalQueryRef]\n    );\n\n  const reset: ResetFunction = React.useCallback(() => {\n    setQueryRef(null);\n  }, []);\n\n  return [loadQuery, queryRef, { fetchMore, refetch, reset, subscribeToMore }];\n}\n\nfunction useWatchQueryOptions<TData, TVariables extends OperationVariables>({\n  client,\n  query,\n  options,\n}: {\n  client: ApolloClient;\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n  options: useLoadableQuery.Options;\n}): ApolloClient.WatchQueryOptions<TData, TVariables> {\n  return useDeepMemo<ApolloClient.WatchQueryOptions<TData, TVariables>>(() => {\n    const fetchPolicy =\n      options.fetchPolicy ||\n      client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\";\n\n    const watchQueryOptions = {\n      ...options,\n      fetchPolicy,\n      query,\n      notifyOnNetworkStatusChange: false,\n      nextFetchPolicy: void 0,\n    };\n\n    if (__DEV__) {\n      validateSuspenseHookOptions(watchQueryOptions as any);\n    }\n\n    return watchQueryOptions as ApolloClient.WatchQueryOptions<\n      TData,\n      TVariables\n    >;\n  }, [client, options, query]);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
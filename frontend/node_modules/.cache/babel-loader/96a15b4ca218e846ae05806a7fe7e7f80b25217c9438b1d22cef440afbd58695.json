{"ast":null,"code":"import { print as origPrint } from \"graphql\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { AutoCleanedWeakCache, registerGlobalCache } from \"@apollo/client/utilities/internal\";\nimport { cacheSizes } from \"../caching/index.js\";\nlet printCache;\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n *\n * @remarks This is the same function as the GraphQL.js `print` function but\n * with an added cache to avoid recomputation when encountering the same\n * `ASTNode` more than once.\n */\nexport const print = Object.assign(ast => {\n  let result = printCache.get(ast);\n  if (!result) {\n    result = origPrint(ast);\n    printCache.set(ast, result);\n  }\n  return result;\n}, {\n  reset() {\n    printCache = new AutoCleanedWeakCache(cacheSizes.print || 2000 /* defaultCacheSizes.print */);\n  }\n});\nprint.reset();\nif (__DEV__) {\n  registerGlobalCache(\"print\", () => printCache ? printCache.size : 0);\n}","map":{"version":3,"names":["print","origPrint","__DEV__","AutoCleanedWeakCache","registerGlobalCache","cacheSizes","printCache","Object","assign","ast","result","get","set","reset","size"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/utilities/graphql/print.ts"],"sourcesContent":["import type { ASTNode } from \"graphql\";\nimport { print as origPrint } from \"graphql\";\n\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport {\n  AutoCleanedWeakCache,\n  registerGlobalCache,\n} from \"@apollo/client/utilities/internal\";\n\nimport { cacheSizes, defaultCacheSizes } from \"../caching/index.js\";\n\nlet printCache!: AutoCleanedWeakCache<ASTNode, string>;\n\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n *\n * @remarks This is the same function as the GraphQL.js `print` function but\n * with an added cache to avoid recomputation when encountering the same\n * `ASTNode` more than once.\n */\nexport const print = Object.assign(\n  (ast: ASTNode) => {\n    let result = printCache.get(ast);\n\n    if (!result) {\n      result = origPrint(ast);\n      printCache.set(ast, result);\n    }\n    return result;\n  },\n  {\n    reset() {\n      printCache = new AutoCleanedWeakCache<ASTNode, string>(\n        cacheSizes.print || defaultCacheSizes.print\n      );\n    },\n  }\n);\nprint.reset();\n\nif (__DEV__) {\n  registerGlobalCache(\"print\", () => (printCache ? printCache.size : 0));\n}\n"],"mappings":"AACA,SAASA,KAAK,IAAIC,SAAS,QAAQ,SAAS;AAE5C,SAASC,OAAO,QAAQ,sCAAsC;AAC9D,SACEC,oBAAoB,EACpBC,mBAAmB,QACd,mCAAmC;AAE1C,SAASC,UAAU,QAA2B,qBAAqB;AAEnE,IAAIC,UAAkD;AAEtD;;;;;;;;AAQA,OAAO,MAAMN,KAAK,GAAGO,MAAM,CAACC,MAAM,CAC/BC,GAAY,IAAI;EACf,IAAIC,MAAM,GAAGJ,UAAU,CAACK,GAAG,CAACF,GAAG,CAAC;EAEhC,IAAI,CAACC,MAAM,EAAE;IACXA,MAAM,GAAGT,SAAS,CAACQ,GAAG,CAAC;IACvBH,UAAU,CAACM,GAAG,CAACH,GAAG,EAAEC,MAAM,CAAC;EAC7B;EACA,OAAOA,MAAM;AACf,CAAC,EACD;EACEG,KAAKA,CAAA;IACHP,UAAU,GAAG,IAAIH,oBAAoB,CACnCE,UAAU,CAACL,KAAK,sCAA2B,CAC5C;EACH;CACD,CACF;AACDA,KAAK,CAACa,KAAK,EAAE;AAEb,IAAIX,OAAO,EAAE;EACXE,mBAAmB,CAAC,OAAO,EAAE,MAAOE,UAAU,GAAGA,UAAU,CAACQ,IAAI,GAAG,CAAE,CAAC;AACxE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
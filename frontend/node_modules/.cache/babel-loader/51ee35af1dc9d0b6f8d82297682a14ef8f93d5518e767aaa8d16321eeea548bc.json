{"ast":null,"code":"import { Trie } from \"@wry/trie\";\nimport { FragmentReference } from \"./FragmentReference.js\";\nimport { InternalQueryReference } from \"./QueryReference.js\";\nexport class SuspenseCache {\n  queryRefs = new Trie();\n  fragmentRefs = new Trie();\n  options;\n  constructor(options = {}) {\n    this.options = options;\n  }\n  getQueryRef(cacheKey, createObservable) {\n    const ref = this.queryRefs.lookupArray(cacheKey);\n    if (!ref.current) {\n      ref.current = new InternalQueryReference(createObservable(), {\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: () => {\n          delete ref.current;\n        }\n      });\n    }\n    return ref.current;\n  }\n  getFragmentRef(cacheKey, client, options) {\n    const ref = this.fragmentRefs.lookupArray(cacheKey);\n    if (!ref.current) {\n      ref.current = new FragmentReference(client, options, {\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: () => {\n          delete ref.current;\n        }\n      });\n    }\n    return ref.current;\n  }\n  add(cacheKey, queryRef) {\n    const ref = this.queryRefs.lookupArray(cacheKey);\n    ref.current = queryRef;\n  }\n}","map":{"version":3,"names":["Trie","FragmentReference","InternalQueryReference","SuspenseCache","queryRefs","fragmentRefs","options","constructor","getQueryRef","cacheKey","createObservable","ref","lookupArray","current","autoDisposeTimeoutMs","onDispose","getFragmentRef","client","add","queryRef"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/react/internal/cache/SuspenseCache.ts"],"sourcesContent":["import { Trie } from \"@wry/trie\";\n\nimport type {\n  ApolloClient,\n  DataState,\n  ObservableQuery,\n  OperationVariables,\n} from \"@apollo/client\";\n\nimport { FragmentReference } from \"./FragmentReference.js\";\nimport { InternalQueryReference } from \"./QueryReference.js\";\nimport type { CacheKey, FragmentCacheKey } from \"./types.js\";\n\nexport interface SuspenseCacheOptions {\n  /**\n   * Specifies the amount of time, in milliseconds, the suspense cache will wait\n   * for a suspended component to read from the suspense cache before it\n   * automatically disposes of the query. This prevents memory leaks when a\n   * component unmounts before a suspended resource finishes loading. Increase\n   * the timeout if your queries take longer than than the specified time to\n   * prevent your queries from suspending over and over.\n   *\n   * Defaults to 30 seconds.\n   */\n  autoDisposeTimeoutMs?: number;\n}\n\nexport class SuspenseCache {\n  private queryRefs = new Trie<{ current?: InternalQueryReference }>();\n  private fragmentRefs = new Trie<{ current?: FragmentReference }>();\n\n  private options: SuspenseCacheOptions;\n\n  constructor(options: SuspenseCacheOptions = {}) {\n    this.options = options;\n  }\n\n  getQueryRef<\n    TData = unknown,\n    TStates extends\n      DataState<TData>[\"dataState\"] = DataState<TData>[\"dataState\"],\n  >(cacheKey: CacheKey, createObservable: () => ObservableQuery<TData>) {\n    const ref = this.queryRefs.lookupArray(cacheKey) as {\n      current?: InternalQueryReference<TData, TStates>;\n    };\n\n    if (!ref.current) {\n      ref.current = new InternalQueryReference(createObservable(), {\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: () => {\n          delete ref.current;\n        },\n      });\n    }\n\n    return ref.current;\n  }\n\n  getFragmentRef<TData, TVariables extends OperationVariables>(\n    cacheKey: FragmentCacheKey,\n    client: ApolloClient,\n    options: ApolloClient.WatchFragmentOptions<TData, TVariables> & {\n      from: string;\n    }\n  ) {\n    const ref = this.fragmentRefs.lookupArray(cacheKey) as {\n      current?: FragmentReference<TData, TVariables>;\n    };\n\n    if (!ref.current) {\n      ref.current = new FragmentReference(client, options, {\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: () => {\n          delete ref.current;\n        },\n      });\n    }\n\n    return ref.current;\n  }\n\n  add(cacheKey: CacheKey, queryRef: InternalQueryReference<any, any>) {\n    const ref = this.queryRefs.lookupArray(cacheKey);\n    ref.current = queryRef;\n  }\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,WAAW;AAShC,SAASC,iBAAiB,QAAQ,wBAAwB;AAC1D,SAASC,sBAAsB,QAAQ,qBAAqB;AAiB5D,OAAM,MAAOC,aAAa;EAChBC,SAAS,GAAG,IAAIJ,IAAI,EAAwC;EAC5DK,YAAY,GAAG,IAAIL,IAAI,EAAmC;EAE1DM,OAAO;EAEfC,YAAYD,OAAA,GAAgC,EAAE;IAC5C,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;EAEAE,WAAWA,CAITC,QAAkB,EAAEC,gBAA8C;IAClE,MAAMC,GAAG,GAAG,IAAI,CAACP,SAAS,CAACQ,WAAW,CAACH,QAAQ,CAE9C;IAED,IAAI,CAACE,GAAG,CAACE,OAAO,EAAE;MAChBF,GAAG,CAACE,OAAO,GAAG,IAAIX,sBAAsB,CAACQ,gBAAgB,EAAE,EAAE;QAC3DI,oBAAoB,EAAE,IAAI,CAACR,OAAO,CAACQ,oBAAoB;QACvDC,SAAS,EAAEA,CAAA,KAAK;UACd,OAAOJ,GAAG,CAACE,OAAO;QACpB;OACD,CAAC;IACJ;IAEA,OAAOF,GAAG,CAACE,OAAO;EACpB;EAEAG,cAAcA,CACZP,QAA0B,EAC1BQ,MAAoB,EACpBX,OAEC;IAED,MAAMK,GAAG,GAAG,IAAI,CAACN,YAAY,CAACO,WAAW,CAACH,QAAQ,CAEjD;IAED,IAAI,CAACE,GAAG,CAACE,OAAO,EAAE;MAChBF,GAAG,CAACE,OAAO,GAAG,IAAIZ,iBAAiB,CAACgB,MAAM,EAAEX,OAAO,EAAE;QACnDQ,oBAAoB,EAAE,IAAI,CAACR,OAAO,CAACQ,oBAAoB;QACvDC,SAAS,EAAEA,CAAA,KAAK;UACd,OAAOJ,GAAG,CAACE,OAAO;QACpB;OACD,CAAC;IACJ;IAEA,OAAOF,GAAG,CAACE,OAAO;EACpB;EAEAK,GAAGA,CAACT,QAAkB,EAAEU,QAA0C;IAChE,MAAMR,GAAG,GAAG,IAAI,CAACP,SAAS,CAACQ,WAAW,CAACH,QAAQ,CAAC;IAChDE,GAAG,CAACE,OAAO,GAAGM,QAAQ;EACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
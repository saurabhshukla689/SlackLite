{"ast":null,"code":"import * as React from \"react\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nconst contextKey = Symbol.for(\"__APOLLO_CONTEXT__\");\nexport function getApolloContext() {\n  invariant(\"createContext\" in React, 37);\n  let context = React.createContext[contextKey];\n  if (!context) {\n    Object.defineProperty(React.createContext, contextKey, {\n      value: context = React.createContext({}),\n      enumerable: false,\n      writable: false,\n      configurable: true\n    });\n    context.displayName = \"ApolloContext\";\n  }\n  return context;\n}","map":{"version":3,"names":["React","invariant","contextKey","Symbol","for","getApolloContext","context","createContext","Object","defineProperty","value","enumerable","writable","configurable","displayName"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/react/context/ApolloContext.ts"],"sourcesContent":["import type * as ReactTypes from \"react\";\nimport * as React from \"react\";\n\nimport type { ApolloClient } from \"@apollo/client\";\nimport type {\n  HookWrappers,\n  wrapperSymbol,\n} from \"@apollo/client/react/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nexport interface ApolloContextValue {\n  client?: ApolloClient;\n  [wrapperSymbol]?: HookWrappers;\n}\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nconst contextKey = Symbol.for(\"__APOLLO_CONTEXT__\");\n\nexport function getApolloContext(): ReactTypes.Context<ApolloContextValue> {\n  invariant(\n    \"createContext\" in React,\n    \"Invoking `getApolloContext` in an environment where `React.createContext` is not available.\\n\" +\n      \"The Apollo Client functionality you are trying to use is only available in React Client Components.\\n\" +\n      'Please make sure to add \"use client\" at the top of your file.\\n' +\n      // TODO: change to React documentation once React documentation contains information about Client Components\n      \"For more information, see https://nextjs.org/docs/getting-started/react-essentials#client-components\"\n  );\n\n  let context = (React.createContext as any)[\n    contextKey\n  ] as React.Context<ApolloContextValue>;\n  if (!context) {\n    Object.defineProperty(React.createContext, contextKey, {\n      value: (context = React.createContext<ApolloContextValue>({})),\n      enumerable: false,\n      writable: false,\n      configurable: true,\n    });\n    context.displayName = \"ApolloContext\";\n  }\n  return context;\n}\n"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAO;AAO9B,SAASC,SAAT,QAA0B,oCAAoC;AAO9D;AACA;AACA;AACA;AACA,MAAMC,UAAN,GAAmBC,MAAM,CAACC,GAAG,CAAC,oBAAoB,CAAC;AAEnD,gBAAgBC,gBAAgBA,CAAA,EAAhC;EACEJ,SAAF,CACI,eADJ,IACuBD,KADvB,KAOG;EAED,IAAIM,OAAN,GAAiBN,KAAK,CAACO,aAAqB,CACxCL,UAAU,CAC0B;EACtC,IAAI,CAACI,OAAO,EAAE;IACZE,MAAM,CAACC,cAAc,CAACT,KAAK,CAACO,aAAa,EAAEL,UAAU,EAAE;MACrDQ,KAAK,EAAGJ,OAAd,GAAwBN,KAAK,CAACO,aAAa,CAAqB,CAAhE,CAAkE,CAAE;MAC9DI,UAAU,EAAE,KAAK;MACjBC,QAAQ,EAAE,KAAK;MACfC,YAAY,EAAE;IACpB,CAAK,CAAC;IACFP,OAAO,CAACQ,WAAZ,GAA0B,eAAe;EACvC;EACA,OAAOR,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { CombinedProtocolErrors } from \"./CombinedProtocolErrors.js\";\nimport { isErrorLike } from \"./isErrorLike.js\";\nimport { UnconventionalError } from \"./UnconventionalError.js\";\n// This Symbol allows us to pass transport-specific errors from the link chain\n// into QueryManager/client internals without risking a naming collision within\n// extensions (which implementers can use as they see fit).\nexport const PROTOCOL_ERRORS_SYMBOL = Symbol();\nexport function graphQLResultHasProtocolErrors(result) {\n  if (\"extensions\" in result) {\n    return CombinedProtocolErrors.is(result.extensions[PROTOCOL_ERRORS_SYMBOL]);\n  }\n  return false;\n}\nexport function toErrorLike(error) {\n  if (isErrorLike(error)) {\n    return error;\n  }\n  if (typeof error === \"string\") {\n    return new Error(error, {\n      cause: error\n    });\n  }\n  return new UnconventionalError(error);\n}\nexport { CombinedGraphQLErrors } from \"./CombinedGraphQLErrors.js\";\nexport { CombinedProtocolErrors } from \"./CombinedProtocolErrors.js\";\nexport { isErrorLike } from \"./isErrorLike.js\";\nexport { LinkError, registerLinkError } from \"./LinkError.js\";\nexport { LocalStateError } from \"./LocalStateError.js\";\nexport { ServerError } from \"./ServerError.js\";\nexport { ServerParseError } from \"./ServerParseError.js\";\nexport { UnconventionalError } from \"./UnconventionalError.js\";","map":{"version":3,"names":["CombinedProtocolErrors","isErrorLike","UnconventionalError","PROTOCOL_ERRORS_SYMBOL","Symbol","graphQLResultHasProtocolErrors","result","is","extensions","toErrorLike","error","Error","cause","CombinedGraphQLErrors","LinkError","registerLinkError","LocalStateError","ServerError","ServerParseError"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/errors/index.ts"],"sourcesContent":["import { CombinedProtocolErrors } from \"./CombinedProtocolErrors.js\";\nimport { isErrorLike } from \"./isErrorLike.js\";\nimport { UnconventionalError } from \"./UnconventionalError.js\";\n\n// This Symbol allows us to pass transport-specific errors from the link chain\n// into QueryManager/client internals without risking a naming collision within\n// extensions (which implementers can use as they see fit).\nexport const PROTOCOL_ERRORS_SYMBOL: unique symbol = Symbol();\n\ntype WithSymbolExtensions<T> = T & {\n  extensions: Record<string | symbol, any>;\n};\n\nexport function graphQLResultHasProtocolErrors<T extends {}>(\n  result: T\n): result is T & {\n  extensions: Record<string | symbol, any>;\n} {\n  if (\"extensions\" in result) {\n    return CombinedProtocolErrors.is(\n      (result as WithSymbolExtensions<T>).extensions[PROTOCOL_ERRORS_SYMBOL]\n    );\n  }\n  return false;\n}\n\nexport function toErrorLike(error: unknown) {\n  if (isErrorLike(error)) {\n    return error;\n  }\n\n  if (typeof error === \"string\") {\n    return new Error(error, { cause: error });\n  }\n\n  return new UnconventionalError(error);\n}\n\nexport { CombinedGraphQLErrors } from \"./CombinedGraphQLErrors.js\";\nexport { CombinedProtocolErrors } from \"./CombinedProtocolErrors.js\";\nexport { isErrorLike } from \"./isErrorLike.js\";\nexport { LinkError, registerLinkError } from \"./LinkError.js\";\nexport { LocalStateError } from \"./LocalStateError.js\";\nexport { ServerError } from \"./ServerError.js\";\nexport { ServerParseError } from \"./ServerParseError.js\";\nexport { UnconventionalError } from \"./UnconventionalError.js\";\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,6BAA6B;AACpE,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,mBAAmB,QAAQ,0BAA0B;AAE9D;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAkBC,MAAM,EAAE;AAM7D,OAAM,SAAUC,8BAA8BA,CAC5CC,MAAS;EAIT,IAAI,YAAY,IAAIA,MAAM,EAAE;IAC1B,OAAON,sBAAsB,CAACO,EAAE,CAC7BD,MAAkC,CAACE,UAAU,CAACL,sBAAsB,CAAC,CACvE;EACH;EACA,OAAO,KAAK;AACd;AAEA,OAAM,SAAUM,WAAWA,CAACC,KAAc;EACxC,IAAIT,WAAW,CAACS,KAAK,CAAC,EAAE;IACtB,OAAOA,KAAK;EACd;EAEA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAO,IAAIC,KAAK,CAACD,KAAK,EAAE;MAAEE,KAAK,EAAEF;IAAK,CAAE,CAAC;EAC3C;EAEA,OAAO,IAAIR,mBAAmB,CAACQ,KAAK,CAAC;AACvC;AAEA,SAASG,qBAAqB,QAAQ,4BAA4B;AAClE,SAASb,sBAAsB,QAAQ,6BAA6B;AACpE,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASa,SAAS,EAAEC,iBAAiB,QAAQ,gBAAgB;AAC7D,SAASC,eAAe,QAAQ,sBAAsB;AACtD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAAShB,mBAAmB,QAAQ,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
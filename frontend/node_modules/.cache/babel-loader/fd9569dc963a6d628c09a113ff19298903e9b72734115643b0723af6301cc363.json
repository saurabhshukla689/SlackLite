{"ast":null,"code":"import { Kind, visit } from \"graphql\";\nconst TYPENAME_FIELD = {\n  kind: Kind.FIELD,\n  name: {\n    kind: Kind.NAME,\n    value: \"__typename\"\n  }\n};\n/**\n * Adds `__typename` to all selection sets in the document except for the root\n * selection set.\n *\n * @param doc - The `ASTNode` to add `__typename` to\n *\n * @example\n *\n * ```ts\n * const document = gql`\n *   # ...\n * `;\n *\n * const withTypename = addTypenameToDocument(document);\n * ```\n */\nexport const addTypenameToDocument = Object.assign(function (doc) {\n  return visit(doc, {\n    SelectionSet: {\n      enter(node, _key, parent) {\n        // Don't add __typename to OperationDefinitions.\n        if (parent && parent.kind === Kind.OPERATION_DEFINITION) {\n          return;\n        }\n        // No changes if no selections.\n        const {\n          selections\n        } = node;\n        if (!selections) {\n          return;\n        }\n        // If selections already have a __typename, or are part of an\n        // introspection query, do nothing.\n        const skip = selections.some(selection => {\n          return selection.kind === Kind.FIELD && (selection.name.value === \"__typename\" || selection.name.value.lastIndexOf(\"__\", 0) === 0);\n        });\n        if (skip) {\n          return;\n        }\n        // If this SelectionSet is @export-ed as an input variable, it should\n        // not have a __typename field (see issue #4691).\n        const field = parent;\n        if (field.kind === Kind.FIELD && field.directives && field.directives.some(d => d.name.value === \"export\")) {\n          return;\n        }\n        // Create and return a new SelectionSet with a __typename Field.\n        return {\n          ...node,\n          selections: [...selections, TYPENAME_FIELD]\n        };\n      }\n    }\n  });\n}, {\n  added(field) {\n    return field === TYPENAME_FIELD;\n  }\n});","map":{"version":3,"names":["Kind","visit","TYPENAME_FIELD","kind","FIELD","name","NAME","value","addTypenameToDocument","Object","assign","doc","SelectionSet","enter","node","_key","parent","OPERATION_DEFINITION","selections","skip","some","selection","lastIndexOf","field","directives","d","added"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/utilities/graphql/transform.ts"],"sourcesContent":["import type { ASTNode, FieldNode, OperationDefinitionNode } from \"graphql\";\nimport { Kind, visit } from \"graphql\";\n\nconst TYPENAME_FIELD: FieldNode = {\n  kind: Kind.FIELD,\n  name: {\n    kind: Kind.NAME,\n    value: \"__typename\",\n  },\n};\n\n/**\n * Adds `__typename` to all selection sets in the document except for the root\n * selection set.\n *\n * @param doc - The `ASTNode` to add `__typename` to\n *\n * @example\n *\n * ```ts\n * const document = gql`\n *   # ...\n * `;\n *\n * const withTypename = addTypenameToDocument(document);\n * ```\n */\nexport const addTypenameToDocument = Object.assign(\n  function <TNode extends ASTNode>(doc: TNode): TNode {\n    return visit(doc, {\n      SelectionSet: {\n        enter(node, _key, parent) {\n          // Don't add __typename to OperationDefinitions.\n          if (\n            parent &&\n            (parent as OperationDefinitionNode).kind ===\n              Kind.OPERATION_DEFINITION\n          ) {\n            return;\n          }\n\n          // No changes if no selections.\n          const { selections } = node;\n          if (!selections) {\n            return;\n          }\n\n          // If selections already have a __typename, or are part of an\n          // introspection query, do nothing.\n          const skip = selections.some((selection) => {\n            return (\n              selection.kind === Kind.FIELD &&\n              (selection.name.value === \"__typename\" ||\n                selection.name.value.lastIndexOf(\"__\", 0) === 0)\n            );\n          });\n          if (skip) {\n            return;\n          }\n\n          // If this SelectionSet is @export-ed as an input variable, it should\n          // not have a __typename field (see issue #4691).\n          const field = parent as FieldNode;\n          if (\n            field.kind === Kind.FIELD &&\n            field.directives &&\n            field.directives.some((d) => d.name.value === \"export\")\n          ) {\n            return;\n          }\n\n          // Create and return a new SelectionSet with a __typename Field.\n          return {\n            ...node,\n            selections: [...selections, TYPENAME_FIELD],\n          };\n        },\n      },\n    });\n  },\n  {\n    added(field: FieldNode): boolean {\n      return field === TYPENAME_FIELD;\n    },\n  }\n);\n"],"mappings":"AACA,SAASA,IAAI,EAAEC,KAAK,QAAQ,SAAS;AAErC,MAAMC,cAAc,GAAc;EAChCC,IAAI,EAAEH,IAAI,CAACI,KAAK;EAChBC,IAAI,EAAE;IACJF,IAAI,EAAEH,IAAI,CAACM,IAAI;IACfC,KAAK,EAAE;;CAEV;AAED;;;;;;;;;;;;;;;;AAgBA,OAAO,MAAMC,qBAAqB,GAAGC,MAAM,CAACC,MAAM,CAChD,UAAiCC,GAAU;EACzC,OAAOV,KAAK,CAACU,GAAG,EAAE;IAChBC,YAAY,EAAE;MACZC,KAAKA,CAACC,IAAI,EAAEC,IAAI,EAAEC,MAAM;QACtB;QACA,IACEA,MAAM,IACLA,MAAkC,CAACb,IAAI,KACtCH,IAAI,CAACiB,oBAAoB,EAC3B;UACA;QACF;QAEA;QACA,MAAM;UAAEC;QAAU,CAAE,GAAGJ,IAAI;QAC3B,IAAI,CAACI,UAAU,EAAE;UACf;QACF;QAEA;QACA;QACA,MAAMC,IAAI,GAAGD,UAAU,CAACE,IAAI,CAAEC,SAAS,IAAI;UACzC,OACEA,SAAS,CAAClB,IAAI,KAAKH,IAAI,CAACI,KAAK,KAC5BiB,SAAS,CAAChB,IAAI,CAACE,KAAK,KAAK,YAAY,IACpCc,SAAS,CAAChB,IAAI,CAACE,KAAK,CAACe,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;QAEtD,CAAC,CAAC;QACF,IAAIH,IAAI,EAAE;UACR;QACF;QAEA;QACA;QACA,MAAMI,KAAK,GAAGP,MAAmB;QACjC,IACEO,KAAK,CAACpB,IAAI,KAAKH,IAAI,CAACI,KAAK,IACzBmB,KAAK,CAACC,UAAU,IAChBD,KAAK,CAACC,UAAU,CAACJ,IAAI,CAAEK,CAAC,IAAKA,CAAC,CAACpB,IAAI,CAACE,KAAK,KAAK,QAAQ,CAAC,EACvD;UACA;QACF;QAEA;QACA,OAAO;UACL,GAAGO,IAAI;UACPI,UAAU,EAAE,CAAC,GAAGA,UAAU,EAAEhB,cAAc;SAC3C;MACH;;GAEH,CAAC;AACJ,CAAC,EACD;EACEwB,KAAKA,CAACH,KAAgB;IACpB,OAAOA,KAAK,KAAKrB,cAAc;EACjC;CACD,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
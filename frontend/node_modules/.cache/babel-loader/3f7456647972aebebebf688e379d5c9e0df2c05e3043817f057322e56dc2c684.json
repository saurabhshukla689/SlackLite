{"ast":null,"code":"const prefixCounts = new Map();\n/**\n* These IDs won't be globally unique, but they will be unique within this\n* process, thanks to the counter, and unguessable thanks to the random suffix.\n*\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/\nexport function makeUniqueId(prefix) {\n  const count = prefixCounts.get(prefix) || 1;\n  prefixCounts.set(prefix, count + 1);\n  return `${prefix}:${count}:${Math.random().toString(36).slice(2)}`;\n}","map":{"version":3,"names":["prefixCounts","Map","makeUniqueId","prefix","count","get","set","Math","random","toString","slice"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/utilities/internal/makeUniqueId.ts"],"sourcesContent":["const prefixCounts = new Map<string, number>();\n\n/**\n * These IDs won't be globally unique, but they will be unique within this\n * process, thanks to the counter, and unguessable thanks to the random suffix.\n *\n * @internal\n */\nexport function makeUniqueId(prefix: string) {\n  const count = prefixCounts.get(prefix) || 1;\n  prefixCounts.set(prefix, count + 1);\n  return `${prefix}:${count}:${Math.random().toString(36).slice(2)}`;\n}\n"],"mappings":"AAAA,MAAMA,YAAN,GAAqB,IAAIC,GAAG,CAA5B,CAA8C;;;;;;;;;AAQ9C,gBAAgBC,YAAYA,CAACC,MAAc,EAA3C;EACE,MAAMC,KAAR,GAAgBJ,YAAY,CAACK,GAAG,CAACF,MAAM,KAAK,CAAC;EAC3CH,YAAY,CAACM,GAAG,CAACH,MAAM,EAAEC,KAA3B,GAAmC,CAAC,CAAC;EACnC,OAAO,GAAGD,MAAM,IAAIC,KAAK,IAAIG,IAAI,CAACC,MAAM,CAA1C,CAA4C,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;AACpE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
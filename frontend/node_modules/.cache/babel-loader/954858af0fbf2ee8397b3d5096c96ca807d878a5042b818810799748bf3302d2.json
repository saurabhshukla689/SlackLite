{"ast":null,"code":"import { global } from \"@apollo/client/utilities/internal/globals\";\nimport { setErrorMessageHandler } from \"./setErrorMessageHandler.js\";\nimport { ApolloErrorMessageHandler } from \"./symbol.js\";\n/**\n * Injects Apollo Client's default error message handler into the application and\n * also loads the error codes that are passed in as arguments.\n */\nexport function loadErrorMessageHandler(...errorCodes) {\n  setErrorMessageHandler(handler);\n  for (const codes of errorCodes) {\n    Object.assign(handler, codes);\n  }\n  return handler;\n}\nconst handler = (message, args) => {\n  if (typeof message === \"number\") {\n    const definition = global[ApolloErrorMessageHandler][message];\n    if (!message || !definition?.message) return;\n    message = definition.message;\n  }\n  return args.reduce((msg, arg) => msg.replace(/%[sdfo]/, String(arg)), String(message));\n};","map":{"version":3,"names":["global","setErrorMessageHandler","ApolloErrorMessageHandler","loadErrorMessageHandler","errorCodes","handler","codes","Object","assign","message","args","definition","reduce","msg","arg","replace","String"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/dev/loadErrorMessageHandler.ts"],"sourcesContent":["import { global } from \"@apollo/client/utilities/internal/globals\";\n\nimport type { ErrorCodes } from \"../invariantErrorCodes.js\";\n\nimport type { ErrorMessageHandler } from \"./setErrorMessageHandler.js\";\nimport { setErrorMessageHandler } from \"./setErrorMessageHandler.js\";\nimport { ApolloErrorMessageHandler } from \"./symbol.js\";\n\n/**\n * Injects Apollo Client's default error message handler into the application and\n * also loads the error codes that are passed in as arguments.\n */\nexport function loadErrorMessageHandler(...errorCodes: ErrorCodes[]) {\n  setErrorMessageHandler(handler as typeof handler & ErrorCodes);\n\n  for (const codes of errorCodes) {\n    Object.assign(handler, codes);\n  }\n\n  return handler;\n}\n\nconst handler = ((message: string | number, args: unknown[]) => {\n  if (typeof message === \"number\") {\n    const definition = global[ApolloErrorMessageHandler]![message];\n    if (!message || !definition?.message) return;\n    message = definition.message;\n  }\n  return args.reduce<string>(\n    (msg, arg) => msg.replace(/%[sdfo]/, String(arg)),\n    String(message)\n  );\n}) as ErrorMessageHandler & ErrorCodes;\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,2CAA2C;AAKlE,SAASC,sBAAsB,QAAQ,6BAA6B;AACpE,SAASC,yBAAyB,QAAQ,aAAa;AAEvD;;;;AAIA,OAAM,SAAUC,uBAAuBA,CAAC,GAAGC,UAAwB;EACjEH,sBAAsB,CAACI,OAAsC,CAAC;EAE9D,KAAK,MAAMC,KAAK,IAAIF,UAAU,EAAE;IAC9BG,MAAM,CAACC,MAAM,CAACH,OAAO,EAAEC,KAAK,CAAC;EAC/B;EAEA,OAAOD,OAAO;AAChB;AAEA,MAAMA,OAAO,GAAIA,CAACI,OAAwB,EAAEC,IAAe,KAAI;EAC7D,IAAI,OAAOD,OAAO,KAAK,QAAQ,EAAE;IAC/B,MAAME,UAAU,GAAGX,MAAM,CAACE,yBAAyB,CAAE,CAACO,OAAO,CAAC;IAC9D,IAAI,CAACA,OAAO,IAAI,CAACE,UAAU,EAAEF,OAAO,EAAE;IACtCA,OAAO,GAAGE,UAAU,CAACF,OAAO;EAC9B;EACA,OAAOC,IAAI,CAACE,MAAM,CAChB,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,CAACE,OAAO,CAAC,SAAS,EAAEC,MAAM,CAACF,GAAG,CAAC,CAAC,EACjDE,MAAM,CAACP,OAAO,CAAC,CAChB;AACH,CAAsC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
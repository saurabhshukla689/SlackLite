{"ast":null,"code":"import { equal } from \"@wry/equality\";\nimport { wrap } from \"optimism\";\nimport { addTypenameToDocument, cacheSizes, canonicalStringify, DocumentTransform, isReference, print } from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { getInMemoryCacheMemoryInternals } from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\nimport { ApolloCache } from \"../core/cache.js\";\nimport { EntityStore, supportsResultCaching } from \"./entityStore.js\";\nimport { hasOwn, normalizeConfig } from \"./helpers.js\";\nimport { Policies } from \"./policies.js\";\nimport { forgetCache, makeVar, recallCache } from \"./reactiveVars.js\";\nimport { StoreReader } from \"./readFromStore.js\";\nimport { StoreWriter } from \"./writeToStore.js\";\nexport class InMemoryCache extends ApolloCache {\n  data;\n  optimisticData;\n  config;\n  watches = new Set();\n  storeReader;\n  storeWriter;\n  addTypenameTransform = new DocumentTransform(addTypenameToDocument);\n  maybeBroadcastWatch;\n  // Override the default value, since InMemoryCache result objects are frozen\n  // in development and expected to remain logically immutable in production.\n  assumeImmutableResults = true;\n  // Dynamically imported code can augment existing typePolicies or\n  // possibleTypes by calling cache.policies.addTypePolicies or\n  // cache.policies.addPossibletypes.\n  policies;\n  makeVar = makeVar;\n  constructor(config = {}) {\n    super();\n    this.config = normalizeConfig(config);\n    this.policies = new Policies({\n      cache: this,\n      dataIdFromObject: this.config.dataIdFromObject,\n      possibleTypes: this.config.possibleTypes,\n      typePolicies: this.config.typePolicies\n    });\n    this.init();\n  }\n  init() {\n    // Passing { resultCaching: false } in the InMemoryCache constructor options\n    // will completely disable dependency tracking, which will improve memory\n    // usage but worsen the performance of repeated reads.\n    const rootStore = this.data = new EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching\n    });\n    // When no optimistic writes are currently active, cache.optimisticData ===\n    // cache.data, so there are no additional layers on top of the actual data.\n    // When an optimistic update happens, this.optimisticData will become a\n    // linked list of EntityStore Layer objects that terminates with the\n    // original this.data cache object.\n    this.optimisticData = rootStore.stump;\n    this.resetResultCache();\n  }\n  resetResultCache() {\n    const {\n      fragments\n    } = this.config;\n    this.addTypenameTransform.resetCache();\n    fragments?.resetCaches();\n    // The StoreWriter is mostly stateless and so doesn't really need to be\n    // reset, but it does need to have its writer.storeReader reference updated,\n    // so it's simpler to update this.storeWriter as well.\n    this.storeWriter = new StoreWriter(this, this.storeReader = new StoreReader({\n      cache: this,\n      fragments\n    }), fragments);\n    this.maybeBroadcastWatch = wrap((c, options) => {\n      return this.broadcastWatch(c, options);\n    }, {\n      max: cacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] || 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */,\n      makeCacheKey: c => {\n        // Return a cache key (thus enabling result caching) only if we're\n        // currently using a data store that can track cache dependencies.\n        const store = c.optimistic ? this.optimisticData : this.data;\n        if (supportsResultCaching(store)) {\n          const {\n            optimistic,\n            id,\n            variables\n          } = c;\n          return store.makeCacheKey(c.query,\n          // Different watches can have the same query, optimistic\n          // status, rootId, and variables, but if their callbacks are\n          // different, the (identical) result needs to be delivered to\n          // each distinct callback. The easiest way to achieve that\n          // separation is to include c.callback in the cache key for\n          // maybeBroadcastWatch calls. See issue #5733.\n          c.callback, canonicalStringify({\n            optimistic,\n            id,\n            variables\n          }));\n        }\n      }\n    });\n    // Since we have thrown away all the cached functions that depend on the\n    // CacheGroup dependencies maintained by EntityStore, we should also reset\n    // all CacheGroup dependency information.\n    new Set([this.data.group, this.optimisticData.group]).forEach(group => group.resetCaching());\n  }\n  restore(data) {\n    this.init();\n    // Since calling this.init() discards/replaces the entire StoreReader, along\n    // with the result caches it maintains, this.data.replace(data) won't have\n    // to bother deleting the old data.\n    if (data) this.data.replace(data);\n    return this;\n  }\n  extract(optimistic = false) {\n    return (optimistic ? this.optimisticData : this.data).extract();\n  }\n  read(options) {\n    const {\n      // Since read returns data or null, without any additional metadata\n      // about whether/where there might have been missing fields, the\n      // default behavior cannot be returnPartialData = true (like it is\n      // for the diff method), since defaulting to true would violate the\n      // integrity of the T in the return type. However, partial data may\n      // be useful in some cases, so returnPartialData:true may be\n      // specified explicitly.\n      returnPartialData = false\n    } = options;\n    return this.storeReader.diffQueryAgainstStore({\n      ...options,\n      store: options.optimistic ? this.optimisticData : this.data,\n      config: this.config,\n      returnPartialData\n    }).result;\n  }\n  write(options) {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore(this.data, options);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n  modify(options) {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      // To my knowledge, TypeScript does not currently provide a way to\n      // enforce that an optional property?:type must *not* be undefined\n      // when present. That ability would be useful here, because we want\n      // options.id to default to ROOT_QUERY only when no options.id was\n      // provided. If the caller attempts to pass options.id with a\n      // falsy/undefined value (perhaps because cache.identify failed), we\n      // should not assume the goal was to modify the ROOT_QUERY object.\n      // We could throw, but it seems natural to return false to indicate\n      // that nothing was modified.\n      return false;\n    }\n    const store = options.optimistic // Defaults to false.\n    ? this.optimisticData : this.data;\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields, false);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n  diff(options) {\n    return this.storeReader.diffQueryAgainstStore({\n      ...options,\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      config: this.config\n    });\n  }\n  watch(watch) {\n    if (!this.watches.size) {\n      // In case we previously called forgetCache(this) because\n      // this.watches became empty (see below), reattach this cache to any\n      // reactive variables on which it previously depended. It might seem\n      // paradoxical that we're able to recall something we supposedly\n      // forgot, but the point of calling forgetCache(this) is to silence\n      // useless broadcasts while this.watches is empty, and to allow the\n      // cache to be garbage collected. If, however, we manage to call\n      // recallCache(this) here, this cache object must not have been\n      // garbage collected yet, and should resume receiving updates from\n      // reactive variables, now that it has a watcher to notify.\n      recallCache(this);\n    }\n    this.watches.add(watch);\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n    return () => {\n      // Once we remove the last watch from this.watches, cache.broadcastWatches\n      // no longer does anything, so we preemptively tell the reactive variable\n      // system to exclude this cache from future broadcasts.\n      if (this.watches.delete(watch) && !this.watches.size) {\n        forgetCache(this);\n      }\n      // Remove this watch from the LRU cache managed by the\n      // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n      // leaks involving the closure of watch.callback.\n      this.maybeBroadcastWatch.forget(watch);\n    };\n  }\n  gc(options) {\n    canonicalStringify.reset();\n    print.reset();\n    const ids = this.optimisticData.gc();\n    if (options && !this.txCount && options.resetResultCache) {\n      this.resetResultCache();\n    }\n    return ids;\n  }\n  // Call this method to ensure the given root ID remains in the cache after\n  // garbage collection, along with its transitive child entities. Note that\n  // the cache automatically retains all directly written entities. By default,\n  // the retainment persists after optimistic updates are removed. Pass true\n  // for the optimistic argument if you would prefer for the retainment to be\n  // discarded when the top-most optimistic layer is removed. Returns the\n  // resulting (non-negative) retainment count.\n  retain(rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  }\n  // Call this method to undo the effect of the retain method, above. Once the\n  // retainment count falls to zero, the given ID will no longer be preserved\n  // during garbage collection, though it may still be preserved by other safe\n  // entities that refer to it. Returns the resulting (non-negative) retainment\n  // count, in case that's useful.\n  release(rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  }\n  // Returns the canonical ID for a given StoreObject, obeying typePolicies\n  // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n  // the object must contain a __typename and any primary key fields required\n  // to identify entities of that type. If you pass a query result object, be\n  // sure that none of the primary key fields have been renamed by aliasing.\n  // If you pass a Reference object, its __ref ID string will be returned.\n  identify(object) {\n    if (isReference(object)) return object.__ref;\n    try {\n      return this.policies.identify(object)[0];\n    } catch (e) {\n      __DEV__ && invariant.warn(e);\n    }\n  }\n  evict(options) {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        // See comment in modify method about why we return false when\n        // options.id exists but is falsy/undefined.\n        return false;\n      }\n      options = {\n        ...options,\n        id: \"ROOT_QUERY\"\n      };\n    }\n    try {\n      // It's unlikely that the eviction will end up invoking any other\n      // cache update operations while it's running, but {in,de}crementing\n      // this.txCount still seems like a good idea, for uniformity with\n      // the other update methods.\n      ++this.txCount;\n      // Pass this.data as a limit on the depth of the eviction, so evictions\n      // during optimistic updates (when this.data is temporarily set equal to\n      // this.optimisticData) do not escape their optimistic Layer.\n      return this.optimisticData.evict(options, this.data);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n  reset(options) {\n    this.init();\n    canonicalStringify.reset();\n    if (options && options.discardWatches) {\n      // Similar to what happens in the unsubscribe function returned by\n      // cache.watch, applied to all current watches.\n      this.watches.forEach(watch => this.maybeBroadcastWatch.forget(watch));\n      this.watches.clear();\n      forgetCache(this);\n    } else {\n      // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n      // this.broadcastWatches() triggers a broadcast to every current watcher\n      // (letting them know their data is now missing). This default behavior is\n      // convenient because it means the watches do not have to be manually\n      // reestablished after resetting the cache. To prevent this broadcast and\n      // cancel all watches, pass true for options.discardWatches.\n      this.broadcastWatches();\n    }\n    return Promise.resolve();\n  }\n  removeOptimistic(idToRemove) {\n    const newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  }\n  txCount = 0;\n  batch(options) {\n    const {\n      update,\n      optimistic = true,\n      removeOptimistic,\n      onWatchUpdated\n    } = options;\n    let updateResult;\n    const perform = layer => {\n      const {\n        data,\n        optimisticData\n      } = this;\n      ++this.txCount;\n      if (layer) {\n        this.data = this.optimisticData = layer;\n      }\n      try {\n        return updateResult = update(this);\n      } finally {\n        --this.txCount;\n        this.data = data;\n        this.optimisticData = optimisticData;\n      }\n    };\n    const alreadyDirty = new Set();\n    if (onWatchUpdated && !this.txCount) {\n      // If an options.onWatchUpdated callback is provided, we want to call it\n      // with only the Cache.WatchOptions objects affected by options.update,\n      // but there might be dirty watchers already waiting to be broadcast that\n      // have nothing to do with the update. To prevent including those watchers\n      // in the post-update broadcast, we perform this initial broadcast to\n      // collect the dirty watchers, so we can re-dirty them later, after the\n      // post-update broadcast, allowing them to receive their pending\n      // broadcasts the next time broadcastWatches is called, just as they would\n      // if we never called cache.batch.\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch) {\n          alreadyDirty.add(watch);\n          return false;\n        }\n      });\n    }\n    if (typeof optimistic === \"string\") {\n      // Note that there can be multiple layers with the same optimistic ID.\n      // When removeOptimistic(id) is called for that id, all matching layers\n      // will be removed, and the remaining layers will be reapplied.\n      this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n    } else if (optimistic === false) {\n      // Ensure both this.data and this.optimisticData refer to the root\n      // (non-optimistic) layer of the cache during the update. Note that\n      // this.data could be a Layer if we are currently executing an optimistic\n      // update function, but otherwise will always be an EntityStore.Root\n      // instance.\n      perform(this.data);\n    } else {\n      // Otherwise, leave this.data and this.optimisticData unchanged and run\n      // the update with broadcast batching.\n      perform();\n    }\n    if (typeof removeOptimistic === \"string\") {\n      this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n    }\n    // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n    // takes the else branch and calls this.broadcastWatches(options), which\n    // does nothing when this.txCount > 0.\n    if (onWatchUpdated && alreadyDirty.size) {\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch, diff) {\n          const result = onWatchUpdated.call(this, watch, diff);\n          if (result !== false) {\n            // Since onWatchUpdated did not return false, this diff is\n            // about to be broadcast to watch.callback, so we don't need\n            // to re-dirty it with the other alreadyDirty watches below.\n            alreadyDirty.delete(watch);\n          }\n          return result;\n        }\n      });\n      // Silently re-dirty any watches that were already dirty before the update\n      // was performed, and were not broadcast just now.\n      if (alreadyDirty.size) {\n        alreadyDirty.forEach(watch => this.maybeBroadcastWatch.dirty(watch));\n      }\n    } else {\n      // If alreadyDirty is empty or we don't have an onWatchUpdated\n      // function, we don't need to go to the trouble of wrapping\n      // options.onWatchUpdated.\n      this.broadcastWatches(options);\n    }\n    return updateResult;\n  }\n  performTransaction(update, optimisticId) {\n    return this.batch({\n      update,\n      optimistic: optimisticId || optimisticId !== null\n    });\n  }\n  transformDocument(document) {\n    return this.addTypenameTransform.transformDocument(this.addFragmentsToDocument(document));\n  }\n  fragmentMatches(fragment, typename) {\n    return this.policies.fragmentMatches(fragment, typename);\n  }\n  lookupFragment(fragmentName) {\n    return this.config.fragments?.lookup(fragmentName) || null;\n  }\n  broadcastWatches(options) {\n    if (!this.txCount) {\n      this.watches.forEach(c => this.maybeBroadcastWatch(c, options));\n    }\n  }\n  addFragmentsToDocument(document) {\n    const {\n      fragments\n    } = this.config;\n    return fragments ? fragments.transform(document) : document;\n  }\n  // This method is wrapped by maybeBroadcastWatch, which is called by\n  // broadcastWatches, so that we compute and broadcast results only when\n  // the data that would be broadcast might have changed. It would be\n  // simpler to check for changes after recomputing a result but before\n  // broadcasting it, but this wrapping approach allows us to skip both\n  // the recomputation and the broadcast, in most cases.\n  broadcastWatch(c, options) {\n    const {\n      lastDiff\n    } = c;\n    // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n    // currently requires no additional properties, so we can use c (a\n    // WatchOptions object) as DiffOptions, without having to allocate a new\n    // object, and without having to enumerate the relevant properties (query,\n    // variables, etc.) explicitly. There will be some additional properties\n    // (lastDiff, callback, etc.), but cache.diff ignores them.\n    const diff = this.diff(c);\n    if (options) {\n      if (c.optimistic && typeof options.optimistic === \"string\") {\n        diff.fromOptimisticTransaction = true;\n      }\n      if (options.onWatchUpdated && options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n        // Returning false from the onWatchUpdated callback will prevent\n        // calling c.callback(diff) for this watcher.\n        return;\n      }\n    }\n    if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n      c.callback(c.lastDiff = diff, lastDiff);\n    }\n  }\n}\nif (__DEV__) {\n  InMemoryCache.prototype.getMemoryInternals = getInMemoryCacheMemoryInternals;\n}","map":{"version":3,"names":["equal","wrap","addTypenameToDocument","cacheSizes","canonicalStringify","DocumentTransform","isReference","print","__DEV__","getInMemoryCacheMemoryInternals","invariant","ApolloCache","EntityStore","supportsResultCaching","hasOwn","normalizeConfig","Policies","forgetCache","makeVar","recallCache","StoreReader","StoreWriter","InMemoryCache","data","optimisticData","config","watches","Set","storeReader","storeWriter","addTypenameTransform","maybeBroadcastWatch","assumeImmutableResults","policies","constructor","cache","dataIdFromObject","possibleTypes","typePolicies","init","rootStore","Root","resultCaching","stump","resetResultCache","fragments","resetCache","resetCaches","c","options","broadcastWatch","max","makeCacheKey","store","optimistic","id","variables","query","callback","group","forEach","resetCaching","restore","replace","extract","read","returnPartialData","diffQueryAgainstStore","result","write","txCount","writeToStore","broadcast","broadcastWatches","modify","call","fields","diff","rootId","watch","size","add","immediate","delete","forget","gc","reset","ids","retain","release","identify","object","__ref","e","warn","evict","discardWatches","clear","Promise","resolve","removeOptimistic","idToRemove","newOptimisticData","removeLayer","batch","update","onWatchUpdated","updateResult","perform","layer","alreadyDirty","addLayer","dirty","performTransaction","optimisticId","transformDocument","document","addFragmentsToDocument","fragmentMatches","fragment","typename","lookupFragment","fragmentName","lookup","transform","lastDiff","fromOptimisticTransaction","prototype","getMemoryInternals"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/cache/inmemory/inMemoryCache.ts"],"sourcesContent":["import { equal } from \"@wry/equality\";\nimport type {\n  DocumentNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n} from \"graphql\";\nimport type { OptimisticWrapperFunction } from \"optimism\";\nimport { wrap } from \"optimism\";\n\nimport type { OperationVariables } from \"@apollo/client\";\nimport type {\n  DeepPartial,\n  Reference,\n  StoreObject,\n} from \"@apollo/client/utilities\";\nimport {\n  addTypenameToDocument,\n  cacheSizes,\n  canonicalStringify,\n  DocumentTransform,\n  isReference,\n  print,\n} from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { getInMemoryCacheMemoryInternals } from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport { defaultCacheSizes } from \"../../utilities/caching/sizes.js\";\nimport { ApolloCache } from \"../core/cache.js\";\nimport type { Cache } from \"../core/types/Cache.js\";\n\nimport { EntityStore, supportsResultCaching } from \"./entityStore.js\";\nimport { hasOwn, normalizeConfig } from \"./helpers.js\";\nimport { Policies } from \"./policies.js\";\nimport { forgetCache, makeVar, recallCache } from \"./reactiveVars.js\";\nimport { StoreReader } from \"./readFromStore.js\";\nimport type { InMemoryCacheConfig, NormalizedCacheObject } from \"./types.js\";\nimport { StoreWriter } from \"./writeToStore.js\";\n\ntype BroadcastOptions = Pick<\n  Cache.BatchOptions<InMemoryCache>,\n  \"optimistic\" | \"onWatchUpdated\"\n>;\n\nexport class InMemoryCache extends ApolloCache {\n  private data!: EntityStore;\n  private optimisticData!: EntityStore;\n\n  protected config: InMemoryCacheConfig;\n  private watches = new Set<Cache.WatchOptions<any, any>>();\n\n  private storeReader!: StoreReader;\n  private storeWriter!: StoreWriter;\n  private addTypenameTransform = new DocumentTransform(addTypenameToDocument);\n\n  private maybeBroadcastWatch!: OptimisticWrapperFunction<\n    [Cache.WatchOptions<any, any>, BroadcastOptions?],\n    any,\n    [Cache.WatchOptions<any, any>]\n  >;\n\n  // Override the default value, since InMemoryCache result objects are frozen\n  // in development and expected to remain logically immutable in production.\n  public readonly assumeImmutableResults = true;\n\n  // Dynamically imported code can augment existing typePolicies or\n  // possibleTypes by calling cache.policies.addTypePolicies or\n  // cache.policies.addPossibletypes.\n  public readonly policies: Policies;\n\n  public readonly makeVar = makeVar;\n\n  constructor(config: InMemoryCacheConfig = {}) {\n    super();\n    this.config = normalizeConfig(config);\n\n    this.policies = new Policies({\n      cache: this,\n      dataIdFromObject: this.config.dataIdFromObject,\n      possibleTypes: this.config.possibleTypes,\n      typePolicies: this.config.typePolicies,\n    });\n\n    this.init();\n  }\n\n  private init() {\n    // Passing { resultCaching: false } in the InMemoryCache constructor options\n    // will completely disable dependency tracking, which will improve memory\n    // usage but worsen the performance of repeated reads.\n    const rootStore = (this.data = new EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching,\n    }));\n\n    // When no optimistic writes are currently active, cache.optimisticData ===\n    // cache.data, so there are no additional layers on top of the actual data.\n    // When an optimistic update happens, this.optimisticData will become a\n    // linked list of EntityStore Layer objects that terminates with the\n    // original this.data cache object.\n    this.optimisticData = rootStore.stump;\n\n    this.resetResultCache();\n  }\n\n  private resetResultCache() {\n    const { fragments } = this.config;\n\n    this.addTypenameTransform.resetCache();\n    fragments?.resetCaches();\n\n    // The StoreWriter is mostly stateless and so doesn't really need to be\n    // reset, but it does need to have its writer.storeReader reference updated,\n    // so it's simpler to update this.storeWriter as well.\n    this.storeWriter = new StoreWriter(\n      this,\n      (this.storeReader = new StoreReader({ cache: this, fragments })),\n      fragments\n    );\n\n    this.maybeBroadcastWatch = wrap(\n      (c: Cache.WatchOptions, options?: BroadcastOptions) => {\n        return this.broadcastWatch(c, options);\n      },\n      {\n        max:\n          cacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] ||\n          defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"],\n        makeCacheKey: (c: Cache.WatchOptions) => {\n          // Return a cache key (thus enabling result caching) only if we're\n          // currently using a data store that can track cache dependencies.\n          const store = c.optimistic ? this.optimisticData : this.data;\n          if (supportsResultCaching(store)) {\n            const { optimistic, id, variables } = c;\n            return store.makeCacheKey(\n              c.query,\n              // Different watches can have the same query, optimistic\n              // status, rootId, and variables, but if their callbacks are\n              // different, the (identical) result needs to be delivered to\n              // each distinct callback. The easiest way to achieve that\n              // separation is to include c.callback in the cache key for\n              // maybeBroadcastWatch calls. See issue #5733.\n              c.callback,\n              canonicalStringify({ optimistic, id, variables })\n            );\n          }\n        },\n      }\n    );\n\n    // Since we have thrown away all the cached functions that depend on the\n    // CacheGroup dependencies maintained by EntityStore, we should also reset\n    // all CacheGroup dependency information.\n    new Set([this.data.group, this.optimisticData.group]).forEach((group) =>\n      group.resetCaching()\n    );\n  }\n\n  public restore(data: NormalizedCacheObject): this {\n    this.init();\n    // Since calling this.init() discards/replaces the entire StoreReader, along\n    // with the result caches it maintains, this.data.replace(data) won't have\n    // to bother deleting the old data.\n    if (data) this.data.replace(data);\n    return this;\n  }\n\n  public extract(optimistic: boolean = false): NormalizedCacheObject {\n    return (optimistic ? this.optimisticData : this.data).extract();\n  }\n\n  public read<TData = unknown>(\n    options: Cache.ReadOptions<TData, OperationVariables> & {\n      returnPartialData: true;\n    }\n  ): TData | DeepPartial<TData> | null;\n\n  public read<TData = unknown>(\n    options: Cache.ReadOptions<TData, OperationVariables>\n  ): TData | null;\n\n  public read<TData = unknown>(\n    options: Cache.ReadOptions<TData, OperationVariables>\n  ): TData | DeepPartial<TData> | null {\n    const {\n      // Since read returns data or null, without any additional metadata\n      // about whether/where there might have been missing fields, the\n      // default behavior cannot be returnPartialData = true (like it is\n      // for the diff method), since defaulting to true would violate the\n      // integrity of the T in the return type. However, partial data may\n      // be useful in some cases, so returnPartialData:true may be\n      // specified explicitly.\n      returnPartialData = false,\n    } = options;\n\n    return this.storeReader.diffQueryAgainstStore<TData>({\n      ...options,\n      store: options.optimistic ? this.optimisticData : this.data,\n      config: this.config,\n      returnPartialData,\n    }).result;\n  }\n\n  public write<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(options: Cache.WriteOptions<TData, TVariables>): Reference | undefined {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore(this.data, options);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public modify<Entity extends Record<string, any> = Record<string, any>>(\n    options: Cache.ModifyOptions<Entity>\n  ): boolean {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      // To my knowledge, TypeScript does not currently provide a way to\n      // enforce that an optional property?:type must *not* be undefined\n      // when present. That ability would be useful here, because we want\n      // options.id to default to ROOT_QUERY only when no options.id was\n      // provided. If the caller attempts to pass options.id with a\n      // falsy/undefined value (perhaps because cache.identify failed), we\n      // should not assume the goal was to modify the ROOT_QUERY object.\n      // We could throw, but it seems natural to return false to indicate\n      // that nothing was modified.\n      return false;\n    }\n    const store =\n      (\n        options.optimistic // Defaults to false.\n      ) ?\n        this.optimisticData\n      : this.data;\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields, false);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public diff<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(options: Cache.DiffOptions<TData, TVariables>): Cache.DiffResult<TData> {\n    return this.storeReader.diffQueryAgainstStore({\n      ...options,\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      config: this.config,\n    });\n  }\n\n  public watch<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(watch: Cache.WatchOptions<TData, TVariables>): () => void {\n    if (!this.watches.size) {\n      // In case we previously called forgetCache(this) because\n      // this.watches became empty (see below), reattach this cache to any\n      // reactive variables on which it previously depended. It might seem\n      // paradoxical that we're able to recall something we supposedly\n      // forgot, but the point of calling forgetCache(this) is to silence\n      // useless broadcasts while this.watches is empty, and to allow the\n      // cache to be garbage collected. If, however, we manage to call\n      // recallCache(this) here, this cache object must not have been\n      // garbage collected yet, and should resume receiving updates from\n      // reactive variables, now that it has a watcher to notify.\n      recallCache(this);\n    }\n    this.watches.add(watch);\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n    return () => {\n      // Once we remove the last watch from this.watches, cache.broadcastWatches\n      // no longer does anything, so we preemptively tell the reactive variable\n      // system to exclude this cache from future broadcasts.\n      if (this.watches.delete(watch) && !this.watches.size) {\n        forgetCache(this);\n      }\n      // Remove this watch from the LRU cache managed by the\n      // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n      // leaks involving the closure of watch.callback.\n      this.maybeBroadcastWatch.forget(watch);\n    };\n  }\n\n  public gc(options?: {\n    // If true, also free non-essential result cache memory by bulk-releasing\n    // this.{store{Reader,Writer},maybeBroadcastWatch}. Defaults to false.\n    resetResultCache?: boolean;\n  }) {\n    canonicalStringify.reset();\n    print.reset();\n    const ids = this.optimisticData.gc();\n    if (options && !this.txCount && options.resetResultCache) {\n      this.resetResultCache();\n    }\n    return ids;\n  }\n\n  // Call this method to ensure the given root ID remains in the cache after\n  // garbage collection, along with its transitive child entities. Note that\n  // the cache automatically retains all directly written entities. By default,\n  // the retainment persists after optimistic updates are removed. Pass true\n  // for the optimistic argument if you would prefer for the retainment to be\n  // discarded when the top-most optimistic layer is removed. Returns the\n  // resulting (non-negative) retainment count.\n  public retain(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  }\n\n  // Call this method to undo the effect of the retain method, above. Once the\n  // retainment count falls to zero, the given ID will no longer be preserved\n  // during garbage collection, though it may still be preserved by other safe\n  // entities that refer to it. Returns the resulting (non-negative) retainment\n  // count, in case that's useful.\n  public release(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  }\n\n  // Returns the canonical ID for a given StoreObject, obeying typePolicies\n  // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n  // the object must contain a __typename and any primary key fields required\n  // to identify entities of that type. If you pass a query result object, be\n  // sure that none of the primary key fields have been renamed by aliasing.\n  // If you pass a Reference object, its __ref ID string will be returned.\n  public identify(object: StoreObject | Reference): string | undefined {\n    if (isReference(object)) return object.__ref;\n    try {\n      return this.policies.identify(object)[0];\n    } catch (e) {\n      invariant.warn(e);\n    }\n  }\n\n  public evict(options: Cache.EvictOptions): boolean {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        // See comment in modify method about why we return false when\n        // options.id exists but is falsy/undefined.\n        return false;\n      }\n      options = { ...options, id: \"ROOT_QUERY\" };\n    }\n    try {\n      // It's unlikely that the eviction will end up invoking any other\n      // cache update operations while it's running, but {in,de}crementing\n      // this.txCount still seems like a good idea, for uniformity with\n      // the other update methods.\n      ++this.txCount;\n      // Pass this.data as a limit on the depth of the eviction, so evictions\n      // during optimistic updates (when this.data is temporarily set equal to\n      // this.optimisticData) do not escape their optimistic Layer.\n      return this.optimisticData.evict(options, this.data);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public reset(options?: Cache.ResetOptions): Promise<void> {\n    this.init();\n\n    canonicalStringify.reset();\n\n    if (options && options.discardWatches) {\n      // Similar to what happens in the unsubscribe function returned by\n      // cache.watch, applied to all current watches.\n      this.watches.forEach((watch) => this.maybeBroadcastWatch.forget(watch));\n      this.watches.clear();\n      forgetCache(this);\n    } else {\n      // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n      // this.broadcastWatches() triggers a broadcast to every current watcher\n      // (letting them know their data is now missing). This default behavior is\n      // convenient because it means the watches do not have to be manually\n      // reestablished after resetting the cache. To prevent this broadcast and\n      // cancel all watches, pass true for options.discardWatches.\n      this.broadcastWatches();\n    }\n\n    return Promise.resolve();\n  }\n\n  public removeOptimistic(idToRemove: string) {\n    const newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  }\n\n  private txCount = 0;\n\n  public batch<TUpdateResult>(\n    options: Cache.BatchOptions<InMemoryCache, TUpdateResult>\n  ): TUpdateResult {\n    const {\n      update,\n      optimistic = true,\n      removeOptimistic,\n      onWatchUpdated,\n    } = options;\n\n    let updateResult: TUpdateResult;\n    const perform = (layer?: EntityStore): TUpdateResult => {\n      const { data, optimisticData } = this;\n      ++this.txCount;\n      if (layer) {\n        this.data = this.optimisticData = layer;\n      }\n      try {\n        return (updateResult = update(this));\n      } finally {\n        --this.txCount;\n        this.data = data;\n        this.optimisticData = optimisticData;\n      }\n    };\n\n    const alreadyDirty = new Set<Cache.WatchOptions>();\n\n    if (onWatchUpdated && !this.txCount) {\n      // If an options.onWatchUpdated callback is provided, we want to call it\n      // with only the Cache.WatchOptions objects affected by options.update,\n      // but there might be dirty watchers already waiting to be broadcast that\n      // have nothing to do with the update. To prevent including those watchers\n      // in the post-update broadcast, we perform this initial broadcast to\n      // collect the dirty watchers, so we can re-dirty them later, after the\n      // post-update broadcast, allowing them to receive their pending\n      // broadcasts the next time broadcastWatches is called, just as they would\n      // if we never called cache.batch.\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch) {\n          alreadyDirty.add(watch);\n          return false;\n        },\n      });\n    }\n\n    if (typeof optimistic === \"string\") {\n      // Note that there can be multiple layers with the same optimistic ID.\n      // When removeOptimistic(id) is called for that id, all matching layers\n      // will be removed, and the remaining layers will be reapplied.\n      this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n    } else if (optimistic === false) {\n      // Ensure both this.data and this.optimisticData refer to the root\n      // (non-optimistic) layer of the cache during the update. Note that\n      // this.data could be a Layer if we are currently executing an optimistic\n      // update function, but otherwise will always be an EntityStore.Root\n      // instance.\n      perform(this.data);\n    } else {\n      // Otherwise, leave this.data and this.optimisticData unchanged and run\n      // the update with broadcast batching.\n      perform();\n    }\n\n    if (typeof removeOptimistic === \"string\") {\n      this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n    }\n\n    // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n    // takes the else branch and calls this.broadcastWatches(options), which\n    // does nothing when this.txCount > 0.\n    if (onWatchUpdated && alreadyDirty.size) {\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch, diff) {\n          const result = onWatchUpdated.call(this, watch, diff);\n          if (result !== false) {\n            // Since onWatchUpdated did not return false, this diff is\n            // about to be broadcast to watch.callback, so we don't need\n            // to re-dirty it with the other alreadyDirty watches below.\n            alreadyDirty.delete(watch);\n          }\n          return result;\n        },\n      });\n      // Silently re-dirty any watches that were already dirty before the update\n      // was performed, and were not broadcast just now.\n      if (alreadyDirty.size) {\n        alreadyDirty.forEach((watch) => this.maybeBroadcastWatch.dirty(watch));\n      }\n    } else {\n      // If alreadyDirty is empty or we don't have an onWatchUpdated\n      // function, we don't need to go to the trouble of wrapping\n      // options.onWatchUpdated.\n      this.broadcastWatches(options);\n    }\n\n    return updateResult!;\n  }\n\n  public performTransaction(\n    update: (cache: InMemoryCache) => any,\n    optimisticId?: string | null\n  ) {\n    return this.batch({\n      update,\n      optimistic: optimisticId || optimisticId !== null,\n    });\n  }\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return this.addTypenameTransform.transformDocument(\n      this.addFragmentsToDocument(document)\n    );\n  }\n\n  public fragmentMatches(\n    fragment: InlineFragmentNode | FragmentDefinitionNode,\n    typename: string\n  ): boolean {\n    return this.policies.fragmentMatches(fragment, typename);\n  }\n\n  public lookupFragment(fragmentName: string): FragmentDefinitionNode | null {\n    return this.config.fragments?.lookup(fragmentName) || null;\n  }\n\n  protected broadcastWatches(options?: BroadcastOptions) {\n    if (!this.txCount) {\n      this.watches.forEach((c) => this.maybeBroadcastWatch(c, options));\n    }\n  }\n\n  private addFragmentsToDocument(document: DocumentNode) {\n    const { fragments } = this.config;\n    return fragments ? fragments.transform(document) : document;\n  }\n\n  // This method is wrapped by maybeBroadcastWatch, which is called by\n  // broadcastWatches, so that we compute and broadcast results only when\n  // the data that would be broadcast might have changed. It would be\n  // simpler to check for changes after recomputing a result but before\n  // broadcasting it, but this wrapping approach allows us to skip both\n  // the recomputation and the broadcast, in most cases.\n  private broadcastWatch(c: Cache.WatchOptions, options?: BroadcastOptions) {\n    const { lastDiff } = c;\n\n    // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n    // currently requires no additional properties, so we can use c (a\n    // WatchOptions object) as DiffOptions, without having to allocate a new\n    // object, and without having to enumerate the relevant properties (query,\n    // variables, etc.) explicitly. There will be some additional properties\n    // (lastDiff, callback, etc.), but cache.diff ignores them.\n    const diff = this.diff<any>(c);\n\n    if (options) {\n      if (c.optimistic && typeof options.optimistic === \"string\") {\n        diff.fromOptimisticTransaction = true;\n      }\n\n      if (\n        options.onWatchUpdated &&\n        options.onWatchUpdated.call(this, c, diff, lastDiff) === false\n      ) {\n        // Returning false from the onWatchUpdated callback will prevent\n        // calling c.callback(diff) for this watcher.\n        return;\n      }\n    }\n\n    if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n      c.callback((c.lastDiff = diff), lastDiff);\n    }\n  }\n\n  /**\n   * @experimental\n   * @internal\n   * This is not a stable API - it is used in development builds to expose\n   * information to the DevTools.\n   * Use at your own risk!\n   */\n  public declare getMemoryInternals?: typeof getInMemoryCacheMemoryInternals;\n}\n\nif (__DEV__) {\n  InMemoryCache.prototype.getMemoryInternals = getInMemoryCacheMemoryInternals;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
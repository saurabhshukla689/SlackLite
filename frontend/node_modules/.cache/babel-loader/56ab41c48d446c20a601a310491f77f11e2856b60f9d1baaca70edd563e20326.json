{"ast":null,"code":"const {\n  toString\n} = Object.prototype;\n/**\n* Deeply clones a value to create a new instance.\n*\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/\nexport function cloneDeep(value) {\n  return __cloneDeep(value);\n}\nfunction __cloneDeep(val, seen) {\n  switch (toString.call(val)) {\n    case \"[object Array]\":\n      {\n        seen = seen || new Map();\n        if (seen.has(val)) return seen.get(val);\n        const copy = val.slice(0);\n        seen.set(val, copy);\n        copy.forEach(function (child, i) {\n          copy[i] = __cloneDeep(child, seen);\n        });\n        return copy;\n      }\n    case \"[object Object]\":\n      {\n        seen = seen || new Map();\n        if (seen.has(val)) return seen.get(val);\n        // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n        // possible in all JS environments, so we will assume they exist/work.\n        const copy = Object.create(Object.getPrototypeOf(val));\n        seen.set(val, copy);\n        Object.keys(val).forEach(key => {\n          copy[key] = __cloneDeep(val[key], seen);\n        });\n        return copy;\n      }\n    default:\n      return val;\n  }\n}","map":{"version":3,"names":["toString","Object","prototype","cloneDeep","value","__cloneDeep","val","seen","call","Map","has","get","copy","slice","set","forEach","child","i","create","getPrototypeOf","keys","key"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/utilities/internal/cloneDeep.ts"],"sourcesContent":["const { toString } = Object.prototype;\n\n/**\n * Deeply clones a value to create a new instance.\n *\n * @internal\n */\nexport function cloneDeep<T>(value: T): T {\n  return __cloneDeep(value);\n}\n\nfunction __cloneDeep<T>(val: T, seen?: Map<any, any>): T {\n  switch (toString.call(val)) {\n    case \"[object Array]\": {\n      seen = seen || new Map();\n      if (seen.has(val)) return seen.get(val);\n      const copy: T & any[] = (val as any).slice(0);\n      seen.set(val, copy);\n      copy.forEach(function (child, i) {\n        copy[i] = __cloneDeep(child, seen);\n      });\n      return copy;\n    }\n\n    case \"[object Object]\": {\n      seen = seen || new Map();\n      if (seen.has(val)) return seen.get(val);\n      // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n      // possible in all JS environments, so we will assume they exist/work.\n      const copy = Object.create(Object.getPrototypeOf(val));\n      seen.set(val, copy);\n      Object.keys(val as T & Record<string, any>).forEach((key) => {\n        copy[key] = __cloneDeep((val as any)[key], seen);\n      });\n      return copy;\n    }\n\n    default:\n      return val;\n  }\n}\n"],"mappings":"AAAA,MAAM;EAAEA;AAAR,IAAqBC,MAAM,CAACC,SAAS;;;;;;;;AAOrC,gBAAgBC,SAASA,CAAIC,KAAQ,EAArC;EACE,OAAOC,WAAW,CAACD,KAAK,CAAC;AAC3B;AAEA,SAASC,WAAWA,CAAIC,GAAM,EAAEC,IAAoB,EAApD;EACE,QAAQP,QAAQ,CAACQ,IAAI,CAACF,GAAG,CAAC;IACxB,KAAK,gBAAgB;MAAE;QACrBC,IAAN,GAAaA,IAAb,IAAqB,IAAIE,GAAG,CAA5B,CAA8B;QACxB,IAAIF,IAAI,CAACG,GAAG,CAACJ,GAAG,CAAC,EAAE,OAAOC,IAAI,CAACI,GAAG,CAACL,GAAG,CAAC;QACvC,MAAMM,IAAZ,GAA+BN,GAAW,CAACO,KAAK,CAAC,CAAC,CAAC;QAC7CN,IAAI,CAACO,GAAG,CAACR,GAAG,EAAEM,IAAI,CAAC;QACnBA,IAAI,CAACG,OAAO,CAAC,UAAUC,KAAK,EAAEC,CAAC,EAArC;UACQL,IAAI,CAACK,CAAC,IAAIZ,WAAW,CAACW,KAAK,EAAET,IAAI,CAAC;QACpC,CAAC,CAAC;QACF,OAAOK,IAAI;MACb;IAEA,KAAK,iBAAiB;MAAE;QACtBL,IAAN,GAAaA,IAAb,IAAqB,IAAIE,GAAG,CAA5B,CAA8B;QACxB,IAAIF,IAAI,CAACG,GAAG,CAACJ,GAAG,CAAC,EAAE,OAAOC,IAAI,CAACI,GAAG,CAACL,GAAG,CAAC;QACvC;QACA;QACA,MAAMM,IAAZ,GAAmBX,MAAM,CAACiB,MAAM,CAACjB,MAAM,CAACkB,cAAc,CAACb,GAAG,CAAC,CAAC;QACtDC,IAAI,CAACO,GAAG,CAACR,GAAG,EAAEM,IAAI,CAAC;QACnBX,MAAM,CAACmB,IAAI,CAACd,GAA8B,CAAC,CAACS,OAAO,CAAEM,GAAG,IAA9D;UACQT,IAAI,CAACS,GAAG,IAAIhB,WAAW,CAAEC,GAAW,CAACe,GAAG,CAAC,EAAEd,IAAI,CAAC;QAClD,CAAC,CAAC;QACF,OAAOK,IAAI;MACb;IAEA;MACE,OAAON,GAAG;EACd;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
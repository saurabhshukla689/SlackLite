{"ast":null,"code":"import { Kind } from \"graphql\";\nimport { newInvariantError } from \"@apollo/client/utilities/invariant\";\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/\nexport function valueToObjectRepresentation(argObj, name, value, variables) {\n  if (value.kind === Kind.INT || value.kind === Kind.FLOAT) {\n    argObj[name.value] = Number(value.value);\n  } else if (value.kind === Kind.BOOLEAN || value.kind === Kind.STRING) {\n    argObj[name.value] = value.value;\n  } else if (value.kind === Kind.OBJECT) {\n    const nestedArgObj = {};\n    value.fields.map(obj => valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables));\n    argObj[name.value] = nestedArgObj;\n  } else if (value.kind === Kind.VARIABLE) {\n    const variableValue = (variables || {})[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (value.kind === Kind.LIST) {\n    argObj[name.value] = value.values.map(listValue => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n      return nestedArgArrayObj[name.value];\n    });\n  } else if (value.kind === Kind.ENUM) {\n    argObj[name.value] = value.value;\n  } else if (value.kind === Kind.NULL) {\n    argObj[name.value] = null;\n  } else {\n    throw newInvariantError(19, name.value, value.kind);\n  }\n}","map":{"version":3,"names":["Kind","newInvariantError","valueToObjectRepresentation","argObj","name","value","variables","kind","INT","FLOAT","Number","BOOLEAN","STRING","OBJECT","nestedArgObj","fields","map","obj","VARIABLE","variableValue","LIST","values","listValue","nestedArgArrayObj","ENUM","NULL"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/utilities/internal/valueToObjectRepresentation.ts"],"sourcesContent":["import type { EnumValueNode, NameNode, ValueNode } from \"graphql\";\nimport { Kind } from \"graphql\";\n\nimport { newInvariantError } from \"@apollo/client/utilities/invariant\";\n\n/** @internal */\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object\n) {\n  if (value.kind === Kind.INT || value.kind === Kind.FLOAT) {\n    argObj[name.value] = Number(value.value);\n  } else if (value.kind === Kind.BOOLEAN || value.kind === Kind.STRING) {\n    argObj[name.value] = value.value;\n  } else if (value.kind === Kind.OBJECT) {\n    const nestedArgObj = {};\n    value.fields.map((obj) =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables)\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (value.kind === Kind.VARIABLE) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (value.kind === Kind.LIST) {\n    argObj[name.value] = value.values.map((listValue) => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (value.kind === Kind.ENUM) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (value.kind === Kind.NULL) {\n    argObj[name.value] = null;\n  } else {\n    throw newInvariantError(\n      `The inline argument \"%s\" of kind \"%s\"` +\n        \"is not supported. Use variables instead of inline arguments to \" +\n        \"overcome this limitation.\",\n      name.value,\n      (value as any).kind\n    );\n  }\n}\n"],"mappings":"AACA,SAASA,IAAT,QAAqB,SAAS;AAE9B,SAASC,iBAAT,QAAkC,oCAAoC;;;;;;AAGtE,gBAAgBC,2BAA2BA,CACzCC,MAAW,EACXC,IAAc,EACdC,KAAgB,EAChBC,SAAkB,EAJpB;EAME,IAAID,KAAK,CAACE,IAAZ,KAAqBP,IAAI,CAACQ,GAA1B,IAAiCH,KAAK,CAACE,IAAvC,KAAgDP,IAAI,CAACS,KAAK,EAAE;IACxDN,MAAM,CAACC,IAAI,CAACC,KAAK,IAAIK,MAAM,CAACL,KAAK,CAACA,KAAK,CAAC;EAC1C,OAAO,IAAIA,KAAK,CAACE,IAAnB,KAA4BP,IAAI,CAACW,OAAjC,IAA4CN,KAAK,CAACE,IAAlD,KAA2DP,IAAI,CAACY,MAAM,EAAE;IACpET,MAAM,CAACC,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACA,KAAK;EAClC,OAAO,IAAIA,KAAK,CAACE,IAAnB,KAA4BP,IAAI,CAACa,MAAM,EAAE;IACrC,MAAMC,YAAV,GAAyB,CAAzB,CAA2B;IACvBT,KAAK,CAACU,MAAM,CAACC,GAAG,CAAEC,GAAG,IACnBf,2BAA2B,CAACY,YAAY,EAAEG,GAAG,CAACb,IAAI,EAAEa,GAAG,CAACZ,KAAK,EAAEC,SAAS,CAAC,CAC1E;IACDH,MAAM,CAACC,IAAI,CAACC,KAAK,IAAIS,YAAY;EACnC,OAAO,IAAIT,KAAK,CAACE,IAAnB,KAA4BP,IAAI,CAACkB,QAAQ,EAAE;IACvC,MAAMC,aAAV,GAA0B,CAACb,SAA3B,IAAyC,CAAzC,CAAmD,EAAED,KAAK,CAACD,IAAI,CAACC,KAAK,CAAC;IAClEF,MAAM,CAACC,IAAI,CAACC,KAAK,IAAIc,aAAa;EACpC,OAAO,IAAId,KAAK,CAACE,IAAnB,KAA4BP,IAAI,CAACoB,IAAI,EAAE;IACnCjB,MAAM,CAACC,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACgB,MAAM,CAACL,GAAG,CAAEM,SAAS,IAApD;MACM,MAAMC,iBAAZ,GAAgC,CAAhC,CAAkC;MAC5BrB,2BAA2B,CACzBqB,iBAAiB,EACjBnB,IAAI,EACJkB,SAAS,EACThB,SAAS,CACV;MACD,OAAQiB,iBAAyB,CAACnB,IAAI,CAACC,KAAK,CAAC;IAC/C,CAAC,CAAC;EACJ,OAAO,IAAIA,KAAK,CAACE,IAAnB,KAA4BP,IAAI,CAACwB,IAAI,EAAE;IACnCrB,MAAM,CAACC,IAAI,CAACC,KAAK,IAAKA,KAAuB,CAACA,KAAK;EACrD,OAAO,IAAIA,KAAK,CAACE,IAAnB,KAA4BP,IAAI,CAACyB,IAAI,EAAE;IACnCtB,MAAM,CAACC,IAAI,CAACC,KAAK,IAAI,IAAI;EAC3B,OAAO;IACL,MAAMJ,iBAAV,KAIMG,IAAI,CAACC,KADX,EAEOA,KAAa,CAACE,IAFrB,CAGK;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
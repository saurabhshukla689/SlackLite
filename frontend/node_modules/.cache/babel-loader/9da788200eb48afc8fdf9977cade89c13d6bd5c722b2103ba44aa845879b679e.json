{"ast":null,"code":"import * as React from \"react\";\nimport { assertWrappedQueryRef, getWrappedPromise, unwrapQueryRef, updateWrappedQueryRef } from \"@apollo/client/react/internal\";\nimport { __use, wrapHook } from \"./internal/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\n/**\n * For a detailed explanation of `useReadQuery`, see the [fetching with Suspense reference](https://www.apollographql.com/docs/react/data/suspense#avoiding-request-waterfalls).\n *\n * @param queryRef - The `QueryRef` that was generated via `useBackgroundQuery`.\n * @returns An object containing the query result data, error, and network status.\n *\n * @example\n *\n * ```jsx\n * import { Suspense } from \"react\";\n * import { useBackgroundQuery, useReadQuery } from \"@apollo/client\";\n *\n * function Parent() {\n *   const [queryRef] = useBackgroundQuery(query);\n *\n *   return (\n *     <Suspense fallback={<div>Loading...</div>}>\n *       <Child queryRef={queryRef} />\n *     </Suspense>\n *   );\n * }\n *\n * function Child({ queryRef }) {\n *   const { data } = useReadQuery(queryRef);\n *\n *   return <div>{data.name}</div>;\n * }\n * ```\n */\nexport function useReadQuery(queryRef) {\n  \"use no memo\";\n\n  const unwrapped = unwrapQueryRef(queryRef);\n  const clientOrObsQuery = useApolloClient(unwrapped ?\n  // passing an `ObservableQuery` is not supported by the types, but it will\n  // return any truthy value that is passed in as an override so we cast the result\n  unwrapped[\"observable\"] : undefined);\n  return wrapHook(\"useReadQuery\",\n  // eslint-disable-next-line react-compiler/react-compiler\n  useReadQuery_, clientOrObsQuery)(queryRef);\n}\nfunction useReadQuery_(queryRef) {\n  assertWrappedQueryRef(queryRef);\n  const internalQueryRef = React.useMemo(() => unwrapQueryRef(queryRef), [queryRef]);\n  const getPromise = React.useCallback(() => getWrappedPromise(queryRef), [queryRef]);\n  if (internalQueryRef.disposed) {\n    internalQueryRef.reinitialize();\n    updateWrappedQueryRef(queryRef, internalQueryRef.promise);\n  }\n  React.useEffect(() => internalQueryRef.retain(), [internalQueryRef]);\n  const promise = useSyncExternalStore(React.useCallback(forceUpdate => {\n    return internalQueryRef.listen(promise => {\n      updateWrappedQueryRef(queryRef, promise);\n      forceUpdate();\n    });\n  }, [internalQueryRef, queryRef]), getPromise, getPromise);\n  const result = __use(promise);\n  return React.useMemo(() => {\n    return {\n      data: result.data,\n      dataState: result.dataState,\n      networkStatus: result.networkStatus,\n      error: result.error\n    };\n  }, [result]);\n}","map":{"version":3,"names":["React","assertWrappedQueryRef","getWrappedPromise","unwrapQueryRef","updateWrappedQueryRef","__use","wrapHook","useApolloClient","useSyncExternalStore","useReadQuery","queryRef","unwrapped","clientOrObsQuery","undefined","useReadQuery_","internalQueryRef","useMemo","getPromise","useCallback","disposed","reinitialize","promise","useEffect","retain","forceUpdate","listen","result","data","dataState","networkStatus","error"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/react/hooks/useReadQuery.ts"],"sourcesContent":["import * as React from \"react\";\n\nimport type {\n  ApolloClient,\n  DataState,\n  ErrorLike,\n  GetDataState,\n  NetworkStatus,\n  ObservableQuery,\n} from \"@apollo/client\";\nimport type { MaybeMasked } from \"@apollo/client/masking\";\nimport type { QueryRef } from \"@apollo/client/react\";\nimport {\n  assertWrappedQueryRef,\n  getWrappedPromise,\n  unwrapQueryRef,\n  updateWrappedQueryRef,\n} from \"@apollo/client/react/internal\";\nimport type { DocumentationTypes as UtilityDocumentationTypes } from \"@apollo/client/utilities/internal\";\n\nimport { __use, wrapHook } from \"./internal/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\n\nexport declare namespace useReadQuery {\n  export namespace Base {\n    export interface Result<TData = unknown> {\n      /**\n       * {@inheritDoc @apollo/client!QueryResultDocumentation#error:member}\n       *\n       * This property can be ignored when using the default `errorPolicy` or an\n       * `errorPolicy` of `none`. The hook will throw the error instead of setting\n       * this property.\n       */\n      error: ErrorLike | undefined;\n      /** {@inheritDoc @apollo/client!QueryResultDocumentation#networkStatus:member} */\n      networkStatus: NetworkStatus;\n    }\n  }\n  export type Result<\n    TData = unknown,\n    TStates extends\n      DataState<TData>[\"dataState\"] = DataState<TData>[\"dataState\"],\n  > = Base.Result<TData> & GetDataState<MaybeMasked<TData>, TStates>;\n\n  export namespace DocumentationTypes {\n    namespace useReadQuery {\n      export interface Result<TData = unknown>\n        extends Base.Result<TData>,\n          UtilityDocumentationTypes.DataState<TData> {}\n    }\n\n    /** {@inheritDoc @apollo/client/react!useReadQuery:function(1)} */\n    export function useReadQuery<TData>(\n      queryRef: QueryRef<TData>\n    ): useReadQuery.Result<TData>;\n  }\n}\n\n/**\n * For a detailed explanation of `useReadQuery`, see the [fetching with Suspense reference](https://www.apollographql.com/docs/react/data/suspense#avoiding-request-waterfalls).\n *\n * @param queryRef - The `QueryRef` that was generated via `useBackgroundQuery`.\n * @returns An object containing the query result data, error, and network status.\n *\n * @example\n *\n * ```jsx\n * import { Suspense } from \"react\";\n * import { useBackgroundQuery, useReadQuery } from \"@apollo/client\";\n *\n * function Parent() {\n *   const [queryRef] = useBackgroundQuery(query);\n *\n *   return (\n *     <Suspense fallback={<div>Loading...</div>}>\n *       <Child queryRef={queryRef} />\n *     </Suspense>\n *   );\n * }\n *\n * function Child({ queryRef }) {\n *   const { data } = useReadQuery(queryRef);\n *\n *   return <div>{data.name}</div>;\n * }\n * ```\n */\nexport function useReadQuery<\n  TData,\n  TStates extends DataState<TData>[\"dataState\"],\n>(\n  queryRef: QueryRef<TData, any, TStates>\n): useReadQuery.Result<TData, TStates> {\n  \"use no memo\";\n  const unwrapped = unwrapQueryRef(queryRef);\n  const clientOrObsQuery = useApolloClient(\n    unwrapped ?\n      // passing an `ObservableQuery` is not supported by the types, but it will\n      // return any truthy value that is passed in as an override so we cast the result\n      (unwrapped[\"observable\"] as any)\n    : undefined\n  ) as ApolloClient | ObservableQuery<TData>;\n\n  return wrapHook(\n    \"useReadQuery\",\n    // eslint-disable-next-line react-compiler/react-compiler\n    useReadQuery_,\n    clientOrObsQuery\n  )(queryRef);\n}\n\nfunction useReadQuery_<TData, TStates extends DataState<TData>[\"dataState\"]>(\n  queryRef: QueryRef<TData, any, TStates>\n): useReadQuery.Result<TData, TStates> {\n  assertWrappedQueryRef(queryRef);\n  const internalQueryRef = React.useMemo(\n    () => unwrapQueryRef(queryRef),\n    [queryRef]\n  );\n\n  const getPromise = React.useCallback(\n    () => getWrappedPromise(queryRef),\n    [queryRef]\n  );\n\n  if (internalQueryRef.disposed) {\n    internalQueryRef.reinitialize();\n    updateWrappedQueryRef(queryRef, internalQueryRef.promise);\n  }\n\n  React.useEffect(() => internalQueryRef.retain(), [internalQueryRef]);\n\n  const promise = useSyncExternalStore(\n    React.useCallback(\n      (forceUpdate) => {\n        return internalQueryRef.listen((promise) => {\n          updateWrappedQueryRef(queryRef, promise);\n          forceUpdate();\n        });\n      },\n      [internalQueryRef, queryRef]\n    ),\n    getPromise,\n    getPromise\n  );\n\n  const result = __use(promise);\n\n  return React.useMemo(() => {\n    return {\n      data: result.data,\n      dataState: result.dataState,\n      networkStatus: result.networkStatus,\n      error: result.error,\n    } as useReadQuery.Result<TData, TStates>;\n  }, [result]);\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAY9B,SACEC,qBAAqB,EACrBC,iBAAiB,EACjBC,cAAc,EACdC,qBAAqB,QAChB,+BAA+B;AAGtC,SAASC,KAAK,EAAEC,QAAQ,QAAQ,qBAAqB;AACrD,SAASC,eAAe,QAAQ,sBAAsB;AACtD,SAASC,oBAAoB,QAAQ,2BAA2B;AAqChE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAM,SAAUC,YAAYA,CAI1BC,QAAuC;EAEvC,aAAa;;EACb,MAAMC,SAAS,GAAGR,cAAc,CAACO,QAAQ,CAAC;EAC1C,MAAME,gBAAgB,GAAGL,eAAe,CACtCI,SAAS;EACP;EACA;EACCA,SAAS,CAAC,YAAY,CAAS,GAChCE,SAAS,CAC6B;EAE1C,OAAOP,QAAQ,CACb,cAAc;EACd;EACAQ,aAAa,EACbF,gBAAgB,CACjB,CAACF,QAAQ,CAAC;AACb;AAEA,SAASI,aAAaA,CACpBJ,QAAuC;EAEvCT,qBAAqB,CAACS,QAAQ,CAAC;EAC/B,MAAMK,gBAAgB,GAAGf,KAAK,CAACgB,OAAO,CACpC,MAAMb,cAAc,CAACO,QAAQ,CAAC,EAC9B,CAACA,QAAQ,CAAC,CACX;EAED,MAAMO,UAAU,GAAGjB,KAAK,CAACkB,WAAW,CAClC,MAAMhB,iBAAiB,CAACQ,QAAQ,CAAC,EACjC,CAACA,QAAQ,CAAC,CACX;EAED,IAAIK,gBAAgB,CAACI,QAAQ,EAAE;IAC7BJ,gBAAgB,CAACK,YAAY,EAAE;IAC/BhB,qBAAqB,CAACM,QAAQ,EAAEK,gBAAgB,CAACM,OAAO,CAAC;EAC3D;EAEArB,KAAK,CAACsB,SAAS,CAAC,MAAMP,gBAAgB,CAACQ,MAAM,EAAE,EAAE,CAACR,gBAAgB,CAAC,CAAC;EAEpE,MAAMM,OAAO,GAAGb,oBAAoB,CAClCR,KAAK,CAACkB,WAAW,CACdM,WAAW,IAAI;IACd,OAAOT,gBAAgB,CAACU,MAAM,CAAEJ,OAAO,IAAI;MACzCjB,qBAAqB,CAACM,QAAQ,EAAEW,OAAO,CAAC;MACxCG,WAAW,EAAE;IACf,CAAC,CAAC;EACJ,CAAC,EACD,CAACT,gBAAgB,EAAEL,QAAQ,CAAC,CAC7B,EACDO,UAAU,EACVA,UAAU,CACX;EAED,MAAMS,MAAM,GAAGrB,KAAK,CAACgB,OAAO,CAAC;EAE7B,OAAOrB,KAAK,CAACgB,OAAO,CAAC,MAAK;IACxB,OAAO;MACLW,IAAI,EAAED,MAAM,CAACC,IAAI;MACjBC,SAAS,EAAEF,MAAM,CAACE,SAAS;MAC3BC,aAAa,EAAEH,MAAM,CAACG,aAAa;MACnCC,KAAK,EAAEJ,MAAM,CAACI;KACwB;EAC1C,CAAC,EAAE,CAACJ,MAAM,CAAC,CAAC;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
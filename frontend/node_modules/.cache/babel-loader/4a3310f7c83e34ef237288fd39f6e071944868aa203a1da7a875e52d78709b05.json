{"ast":null,"code":"import { equal } from \"@wry/equality\";\nimport * as React from \"react\";\nimport { mergeOptions } from \"@apollo/client/utilities/internal\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n/**\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n *\n * ```jsx\n * import { gql, useMutation } from \"@apollo/client\";\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={(e) => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = \"\";\n *         }}\n *       >\n *         <input\n *           ref={(node) => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n *\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */\nexport function useMutation(mutation, options) {\n  const client = useApolloClient(options?.client);\n  const [result, setResult] = React.useState(() => createInitialResult(client));\n  const ref = React.useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options\n  });\n  useIsomorphicLayoutEffect(() => {\n    Object.assign(ref.current, {\n      client,\n      options,\n      mutation\n    });\n  });\n  const execute = React.useCallback((executeOptions = {}) => {\n    const {\n      options,\n      mutation\n    } = ref.current;\n    const baseOptions = {\n      ...options,\n      mutation\n    };\n    const client = executeOptions.client || ref.current.client;\n    if (!ref.current.result.loading && ref.current.isMounted) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true,\n        client\n      });\n    }\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(baseOptions, executeOptions);\n    return client.mutate(clientOptions).then(response => {\n      const {\n        data,\n        error\n      } = response;\n      const onError = executeOptions.onError || ref.current.options?.onError;\n      if (error && onError) {\n        onError(error, clientOptions);\n      }\n      if (mutationId === ref.current.mutationId) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client\n        };\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n      const onCompleted = executeOptions.onCompleted || ref.current.options?.onCompleted;\n      if (!error) {\n        onCompleted?.(response.data, clientOptions);\n      }\n      return response;\n    }, error => {\n      if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client\n        };\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n      const onError = executeOptions.onError || ref.current.options?.onError;\n      if (onError) {\n        onError(error, clientOptions);\n      }\n      throw error;\n    });\n  }, []);\n  const reset = React.useCallback(() => {\n    if (ref.current.isMounted) {\n      const result = createInitialResult(ref.current.client);\n      Object.assign(ref.current, {\n        mutationId: 0,\n        result\n      });\n      setResult(result);\n    }\n  }, []);\n  React.useEffect(() => {\n    const current = ref.current;\n    current.isMounted = true;\n    return () => {\n      current.isMounted = false;\n    };\n  }, []);\n  return [execute, {\n    reset,\n    ...result\n  }];\n}\nfunction createInitialResult(client) {\n  return {\n    data: undefined,\n    error: undefined,\n    called: false,\n    loading: false,\n    client\n  };\n}","map":{"version":3,"names":["equal","React","mergeOptions","useIsomorphicLayoutEffect","useApolloClient","useMutation","mutation","options","client","result","setResult","useState","createInitialResult","ref","useRef","mutationId","isMounted","Object","assign","current","execute","useCallback","executeOptions","baseOptions","loading","error","undefined","data","called","clientOptions","mutate","then","response","onError","onCompleted","reset","useEffect"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["import type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport { equal } from \"@wry/equality\";\nimport * as React from \"react\";\n\nimport type {\n  ApolloCache,\n  ApolloClient,\n  DefaultContext,\n  DocumentNode,\n  ErrorLike,\n  ErrorPolicy,\n  InternalRefetchQueriesInclude,\n  MaybeMasked,\n  MutationFetchPolicy,\n  MutationQueryReducersMap,\n  MutationUpdaterFunction,\n  NormalizedExecutionResult,\n  OnQueryUpdated,\n  OperationVariables,\n  Unmasked,\n} from \"@apollo/client\";\nimport type { IgnoreModifier } from \"@apollo/client/cache\";\nimport type { NoInfer, Prettify } from \"@apollo/client/utilities/internal\";\nimport { mergeOptions } from \"@apollo/client/utilities/internal\";\n\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\ntype MakeRequiredVariablesOptional<\n  TVariables extends OperationVariables,\n  TConfiguredVariables extends Partial<TVariables>,\n> = Prettify<\n  {\n    [K in keyof TVariables as K extends keyof TConfiguredVariables ? K\n    : never]?: TVariables[K];\n  } & Omit<TVariables, keyof TConfiguredVariables>\n>;\n\nexport declare namespace useMutation {\n  export interface Options<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n    TCache extends ApolloCache = ApolloCache,\n    TConfiguredVariables extends Partial<TVariables> = Partial<TVariables>,\n  > {\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#optimisticResponse:member} */\n    optimisticResponse?:\n      | Unmasked<NoInfer<TData>>\n      | ((\n          vars: TVariables,\n          { IGNORE }: { IGNORE: IgnoreModifier }\n        ) => Unmasked<NoInfer<TData>> | IgnoreModifier);\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#updateQueries:member} */\n    updateQueries?: MutationQueryReducersMap<TData>;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#refetchQueries:member} */\n    refetchQueries?:\n      | ((\n          result: NormalizedExecutionResult<Unmasked<TData>>\n        ) => InternalRefetchQueriesInclude)\n      | InternalRefetchQueriesInclude;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#awaitRefetchQueries:member} */\n    awaitRefetchQueries?: boolean;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#update:member} */\n    update?: MutationUpdaterFunction<TData, TVariables, TCache>;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#onQueryUpdated:member} */\n    onQueryUpdated?: OnQueryUpdated<any>;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#errorPolicy:member} */\n    errorPolicy?: ErrorPolicy;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#variables:member} */\n    variables?: Partial<TVariables> & TConfiguredVariables;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#context:member} */\n    context?: DefaultContext;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#fetchPolicy:member} */\n    fetchPolicy?: MutationFetchPolicy;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#keepRootFields:member} */\n    keepRootFields?: boolean;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#client:member} */\n    client?: ApolloClient;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#notifyOnNetworkStatusChange:member} */\n    notifyOnNetworkStatusChange?: boolean;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#onCompleted:member} */\n    onCompleted?: (\n      data: MaybeMasked<TData>,\n      clientOptions?: Options<TData, TVariables, TCache>\n    ) => void;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#onError:member} */\n    onError?: (\n      error: ErrorLike,\n      clientOptions?: Options<TData, TVariables, TCache>\n    ) => void;\n  }\n\n  export interface Result<TData = unknown> {\n    /** {@inheritDoc @apollo/client!MutationResultDocumentation#data:member} */\n    data: MaybeMasked<TData> | null | undefined;\n\n    /** {@inheritDoc @apollo/client!MutationResultDocumentation#error:member} */\n    error: ErrorLike | undefined;\n\n    /** {@inheritDoc @apollo/client!MutationResultDocumentation#loading:member} */\n    loading: boolean;\n\n    /** {@inheritDoc @apollo/client!MutationResultDocumentation#called:member} */\n    called: boolean;\n\n    /** {@inheritDoc @apollo/client!MutationResultDocumentation#client:member} */\n    client: ApolloClient;\n\n    /** {@inheritDoc @apollo/client!MutationResultDocumentation#reset:member} */\n    reset: () => void;\n  }\n\n  export type ResultTuple<\n    TData,\n    TVariables extends OperationVariables,\n    TCache extends ApolloCache = ApolloCache,\n  > = [\n    mutate: MutationFunction<TData, TVariables, TCache>,\n    result: Result<TData>,\n  ];\n\n  export type MutationFunction<\n    TData,\n    TVariables extends OperationVariables,\n    TCache extends ApolloCache = ApolloCache,\n  > = (\n    ...[options]: {} extends TVariables ?\n      [\n        options?: MutationFunctionOptions<TData, TVariables, TCache> & {\n          /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#variables:member} */\n          variables?: TVariables;\n        },\n      ]\n    : [\n        options: MutationFunctionOptions<TData, TVariables, TCache> & {\n          /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#variables:member} */\n          variables: TVariables;\n        },\n      ]\n  ) => Promise<ApolloClient.MutateResult<MaybeMasked<TData>>>;\n\n  export type MutationFunctionOptions<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n    TCache extends ApolloCache = ApolloCache,\n  > = Options<TData, TVariables, TCache>;\n\n  export namespace DocumentationTypes {\n    /** {@inheritDoc @apollo/client/react!useMutation:function(1)} */\n    export function useMutation<\n      TData = unknown,\n      TVariables extends OperationVariables = OperationVariables,\n    >(\n      mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n      options?: useMutation.Options<TData, TVariables>\n    ): useMutation.ResultTuple<TData, TVariables>;\n  }\n}\n\n/**\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n *\n * ```jsx\n * import { gql, useMutation } from \"@apollo/client\";\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={(e) => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = \"\";\n *         }}\n *       >\n *         <input\n *           ref={(node) => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n *\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */\nexport function useMutation<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n  TCache extends ApolloCache = ApolloCache,\n  TConfiguredVariables extends Partial<TVariables> = {},\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: useMutation.Options<\n    NoInfer<TData>,\n    NoInfer<TVariables>,\n    TCache,\n    {\n      [K in keyof TConfiguredVariables]: K extends keyof TVariables ?\n        TConfiguredVariables[K]\n      : never;\n    }\n  >\n): useMutation.ResultTuple<\n  TData,\n  MakeRequiredVariablesOptional<TVariables, TConfiguredVariables>,\n  TCache\n> {\n  const client = useApolloClient(options?.client);\n  const [result, setResult] = React.useState<\n    Omit<useMutation.Result<TData>, \"reset\">\n  >(() => createInitialResult(client));\n\n  const ref = React.useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    Object.assign(ref.current, { client, options, mutation });\n  });\n\n  const execute = React.useCallback(\n    (\n      executeOptions: useMutation.MutationFunctionOptions<\n        TData,\n        TVariables,\n        TCache\n      > = {} as useMutation.MutationFunctionOptions<TData, TVariables, TCache>\n    ) => {\n      const { options, mutation } = ref.current;\n      const baseOptions = { ...options, mutation };\n      const client = executeOptions.client || ref.current.client;\n\n      if (!ref.current.result.loading && ref.current.isMounted) {\n        setResult(\n          (ref.current.result = {\n            loading: true,\n            error: undefined,\n            data: undefined,\n            called: true,\n            client,\n          })\n        );\n      }\n\n      const mutationId = ++ref.current.mutationId;\n      const clientOptions = mergeOptions(baseOptions, executeOptions as any);\n\n      return client\n        .mutate(\n          clientOptions as ApolloClient.MutateOptions<TData, OperationVariables>\n        )\n        .then(\n          (response) => {\n            const { data, error } = response;\n\n            const onError =\n              executeOptions.onError || ref.current.options?.onError;\n\n            if (error && onError) {\n              onError(error, clientOptions);\n            }\n\n            if (mutationId === ref.current.mutationId) {\n              const result = {\n                called: true,\n                loading: false,\n                data,\n                error,\n                client,\n              };\n\n              if (ref.current.isMounted && !equal(ref.current.result, result)) {\n                setResult((ref.current.result = result));\n              }\n            }\n\n            const onCompleted =\n              executeOptions.onCompleted || ref.current.options?.onCompleted;\n\n            if (!error) {\n              onCompleted?.(response.data!, clientOptions);\n            }\n\n            return response;\n          },\n          (error) => {\n            if (\n              mutationId === ref.current.mutationId &&\n              ref.current.isMounted\n            ) {\n              const result = {\n                loading: false,\n                error,\n                data: void 0,\n                called: true,\n                client,\n              };\n\n              if (!equal(ref.current.result, result)) {\n                setResult((ref.current.result = result));\n              }\n            }\n\n            const onError =\n              executeOptions.onError || ref.current.options?.onError;\n\n            if (onError) {\n              onError(error, clientOptions);\n            }\n\n            throw error;\n          }\n        );\n    },\n    []\n  );\n\n  const reset = React.useCallback(() => {\n    if (ref.current.isMounted) {\n      const result = createInitialResult(ref.current.client);\n      Object.assign(ref.current, { mutationId: 0, result });\n      setResult(result);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    const current = ref.current;\n    current.isMounted = true;\n\n    return () => {\n      current.isMounted = false;\n    };\n  }, []);\n\n  return [execute as any, { reset, ...result }];\n}\n\nfunction createInitialResult(client: ApolloClient) {\n  return {\n    data: undefined,\n    error: undefined,\n    called: false,\n    loading: false,\n    client,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
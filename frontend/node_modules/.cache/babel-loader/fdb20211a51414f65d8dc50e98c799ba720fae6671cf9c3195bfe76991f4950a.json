{"ast":null,"code":"/**\n * Determines whether the given object is a valid GraphQL execution result\n * according to the GraphQL specification.\n *\n * @remarks\n *\n * A valid execution result must be an object that contains only `data`,\n * `errors`, and/or `extensions` properties. At least one of `data` or `errors`\n * must be present.\n *\n * @param result - The object to test\n * @returns `true` if the object conforms to the GraphQL execution result format\n *\n * @example\n *\n * ```ts\n * import { isFormattedExecutionResult } from \"@apollo/client/utilities\";\n *\n * // Valid execution result\n * const validResult = { data: { user: { name: \"John\" } } };\n * console.log(isFormattedExecutionResult(validResult)); // true\n *\n * // Invalid - contains non-standard properties\n * const invalidResult = { data: {}, customField: \"value\" };\n * console.log(isFormattedExecutionResult(invalidResult)); // false\n * ```\n */\nexport function isFormattedExecutionResult(result) {\n  return !!result && (\"errors\" in result || \"data\" in result) && Object.keys(result).every(key => key === \"errors\" || key === \"data\" || key === \"extensions\");\n}","map":{"version":3,"names":["isFormattedExecutionResult","result","Object","keys","every","key"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/utilities/graphql/isFormattedExecutionResult.ts"],"sourcesContent":["import type { FormattedExecutionResult } from \"graphql\";\n\n/**\n * Determines whether the given object is a valid GraphQL execution result\n * according to the GraphQL specification.\n *\n * @remarks\n *\n * A valid execution result must be an object that contains only `data`,\n * `errors`, and/or `extensions` properties. At least one of `data` or `errors`\n * must be present.\n *\n * @param result - The object to test\n * @returns `true` if the object conforms to the GraphQL execution result format\n *\n * @example\n *\n * ```ts\n * import { isFormattedExecutionResult } from \"@apollo/client/utilities\";\n *\n * // Valid execution result\n * const validResult = { data: { user: { name: \"John\" } } };\n * console.log(isFormattedExecutionResult(validResult)); // true\n *\n * // Invalid - contains non-standard properties\n * const invalidResult = { data: {}, customField: \"value\" };\n * console.log(isFormattedExecutionResult(invalidResult)); // false\n * ```\n */\nexport function isFormattedExecutionResult(\n  result?: object\n): result is FormattedExecutionResult {\n  return (\n    !!result &&\n    (\"errors\" in result || \"data\" in result) &&\n    Object.keys(result).every(\n      (key) => key === \"errors\" || key === \"data\" || key === \"extensions\"\n    )\n  );\n}\n"],"mappings":"AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAM,SAAUA,0BAA0BA,CACxCC,MAAe;EAEf,OACE,CAAC,CAACA,MAAM,KACP,QAAQ,IAAIA,MAAM,IAAI,MAAM,IAAIA,MAAM,CAAC,IACxCC,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAACG,KAAK,CACtBC,GAAG,IAAKA,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAK,MAAM,IAAIA,GAAG,KAAK,YAAY,CACpE;AAEL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
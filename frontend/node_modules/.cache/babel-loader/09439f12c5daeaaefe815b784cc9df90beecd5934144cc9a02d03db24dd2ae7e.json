{"ast":null,"code":"import * as React from \"react\";\nimport { canonicalStringify } from \"@apollo/client/cache\";\nimport { getSuspenseCache } from \"@apollo/client/react/internal\";\nimport { __use } from \"./internal/__use.js\";\nimport { wrapHook } from \"./internal/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nconst NULL_PLACEHOLDER = [];\nexport function useSuspenseFragment(options) {\n  \"use no memo\";\n\n  return wrapHook(\"useSuspenseFragment\",\n  // eslint-disable-next-line react-compiler/react-compiler\n  useSuspenseFragment_, useApolloClient(typeof options === \"object\" ? options.client : undefined))(options);\n}\nfunction useSuspenseFragment_(options) {\n  const client = useApolloClient(options.client);\n  const {\n    from,\n    variables\n  } = options;\n  const {\n    cache\n  } = client;\n  const id = React.useMemo(() => typeof from === \"string\" ? from : from === null ? null : cache.identify(from), [cache, from]);\n  const fragmentRef = id === null ? null : getSuspenseCache(client).getFragmentRef([id, options.fragment, canonicalStringify(variables)], client, {\n    ...options,\n    variables: variables,\n    from: id\n  });\n  let [current, setPromise] = React.useState(fragmentRef === null ? NULL_PLACEHOLDER : [fragmentRef.key, fragmentRef.promise]);\n  React.useEffect(() => {\n    if (fragmentRef === null) {\n      return;\n    }\n    const dispose = fragmentRef.retain();\n    const removeListener = fragmentRef.listen(promise => {\n      setPromise([fragmentRef.key, promise]);\n    });\n    return () => {\n      dispose();\n      removeListener();\n    };\n  }, [fragmentRef]);\n  if (fragmentRef === null) {\n    return {\n      data: null\n    };\n  }\n  if (current[0] !== fragmentRef.key) {\n    // eslint-disable-next-line react-compiler/react-compiler\n    current[0] = fragmentRef.key;\n    current[1] = fragmentRef.promise;\n  }\n  const data = __use(current[1]);\n  return {\n    data\n  };\n}","map":{"version":3,"names":["React","canonicalStringify","getSuspenseCache","__use","wrapHook","useApolloClient","NULL_PLACEHOLDER","useSuspenseFragment","options","useSuspenseFragment_","client","undefined","from","variables","cache","id","useMemo","identify","fragmentRef","getFragmentRef","fragment","current","setPromise","useState","key","promise","useEffect","dispose","retain","removeListener","listen","data"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/react/hooks/useSuspenseFragment.ts"],"sourcesContent":["import * as React from \"react\";\n\nimport type {\n  ApolloClient,\n  DataValue,\n  DocumentNode,\n  OperationVariables,\n  Reference,\n  StoreObject,\n  TypedDocumentNode,\n} from \"@apollo/client\";\nimport { canonicalStringify } from \"@apollo/client/cache\";\nimport type { FragmentType, MaybeMasked } from \"@apollo/client/masking\";\nimport type { FragmentKey } from \"@apollo/client/react/internal\";\nimport { getSuspenseCache } from \"@apollo/client/react/internal\";\nimport type {\n  DocumentationTypes as UtilityDocumentationTypes,\n  NoInfer,\n  VariablesOption,\n} from \"@apollo/client/utilities/internal\";\n\nimport { __use } from \"./internal/__use.js\";\nimport { wrapHook } from \"./internal/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\ntype From<TData> =\n  | StoreObject\n  | Reference\n  | FragmentType<NoInfer<TData>>\n  | string\n  | null;\n\nexport declare namespace useSuspenseFragment {\n  import _self = useSuspenseFragment;\n  export namespace Base {\n    export type Options<TData, TVariables extends OperationVariables> = {\n      /**\n       * A GraphQL document created using the `gql` template string tag from\n       * `graphql-tag` with one or more fragments which will be used to determine\n       * the shape of data to read. If you provide more than one fragment in this\n       * document then you must also specify `fragmentName` to select a single.\n       */\n      fragment: DocumentNode | TypedDocumentNode<TData, TVariables>;\n\n      /**\n       * The name of the fragment in your GraphQL document to be used. If you do\n       * not provide a `fragmentName` and there is only one fragment in your\n       * `fragment` document then that fragment will be used.\n       */\n      fragmentName?: string;\n      from: From<TData>;\n      // Override this field to make it optional (default: true).\n      optimistic?: boolean;\n      /**\n       * The instance of `ApolloClient` to use to look up the fragment.\n       *\n       * By default, the instance that's passed down via context is used, but you\n       * can provide a different instance here.\n       *\n       * @docGroup 1. Operation options\n       */\n      client?: ApolloClient;\n    };\n  }\n  export type Options<\n    TData,\n    TVariables extends OperationVariables,\n  > = Base.Options<TData, TVariables> & VariablesOption<NoInfer<TVariables>>;\n\n  export namespace DocumentationTypes {\n    export namespace useSuspenseFragment {\n      export interface Options<\n        TData = unknown,\n        TVariables extends OperationVariables = OperationVariables,\n      > extends Base.Options<TData, TVariables>,\n          UtilityDocumentationTypes.VariableOptions<TVariables> {}\n    }\n  }\n\n  export interface Result<TData> {\n    data: DataValue.Complete<MaybeMasked<TData>>;\n  }\n  export namespace DocumentationTypes {\n    export namespace useSuspenseFragment {\n      export interface Result<TData = unknown> extends _self.Result<TData> {}\n    }\n  }\n\n  export namespace DocumentationTypes {\n    /** {@inheritDoc @apollo/client/react!useSuspenseFragment:function(1)} */\n    export function useSuspenseFragment<\n      TData,\n      TVariables extends OperationVariables = OperationVariables,\n    >(\n      options: useSuspenseFragment.Options<TData, TVariables>\n    ): useSuspenseFragment.Result<TData>;\n  }\n}\n\nconst NULL_PLACEHOLDER = [] as unknown as [\n  FragmentKey,\n  Promise<MaybeMasked<any> | null>,\n];\n\n/** #TODO documentation */\nexport function useSuspenseFragment<\n  TData,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: useSuspenseFragment.Options<TData, TVariables> & {\n    from: NonNullable<From<TData>>;\n  }\n): useSuspenseFragment.Result<TData>;\n\n/** {@inheritDoc @apollo/client/react!useSuspenseFragment:function(1)} */\nexport function useSuspenseFragment<\n  TData,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: useSuspenseFragment.Options<TData, TVariables> & {\n    from: null;\n  }\n): useSuspenseFragment.Result<null>;\n\n/** {@inheritDoc @apollo/client/react!useSuspenseFragment:function(1)} */\nexport function useSuspenseFragment<\n  TData,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: useSuspenseFragment.Options<TData, TVariables> & {\n    from: From<TData>;\n  }\n): useSuspenseFragment.Result<TData | null>;\n\n/** {@inheritDoc @apollo/client/react!useSuspenseFragment:function(1)} */\nexport function useSuspenseFragment<\n  TData,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: useSuspenseFragment.Options<TData, TVariables>\n): useSuspenseFragment.Result<TData>;\n\nexport function useSuspenseFragment<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: useSuspenseFragment.Options<TData, TVariables>\n): useSuspenseFragment.Result<TData | null> {\n  \"use no memo\";\n  return wrapHook(\n    \"useSuspenseFragment\",\n    // eslint-disable-next-line react-compiler/react-compiler\n    useSuspenseFragment_,\n    useApolloClient(typeof options === \"object\" ? options.client : undefined)\n  )(options);\n}\n\nfunction useSuspenseFragment_<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: useSuspenseFragment.Options<TData, TVariables>\n): useSuspenseFragment.Result<TData | null> {\n  const client = useApolloClient(options.client);\n  const { from, variables } = options;\n  const { cache } = client;\n\n  const id = React.useMemo(\n    () =>\n      typeof from === \"string\" ? from\n      : from === null ? null\n      : cache.identify(from),\n    [cache, from]\n  ) as string | null;\n\n  const fragmentRef =\n    id === null ? null : (\n      getSuspenseCache(client).getFragmentRef(\n        [id, options.fragment, canonicalStringify(variables)],\n        client,\n        { ...options, variables: variables as TVariables, from: id }\n      )\n    );\n\n  let [current, setPromise] = React.useState<\n    [FragmentKey, Promise<MaybeMasked<TData> | null>]\n  >(\n    fragmentRef === null ? NULL_PLACEHOLDER : (\n      [fragmentRef.key, fragmentRef.promise]\n    )\n  );\n\n  React.useEffect(() => {\n    if (fragmentRef === null) {\n      return;\n    }\n\n    const dispose = fragmentRef.retain();\n    const removeListener = fragmentRef.listen((promise) => {\n      setPromise([fragmentRef.key, promise]);\n    });\n\n    return () => {\n      dispose();\n      removeListener();\n    };\n  }, [fragmentRef]);\n\n  if (fragmentRef === null) {\n    return { data: null };\n  }\n\n  if (current[0] !== fragmentRef.key) {\n    // eslint-disable-next-line react-compiler/react-compiler\n    current[0] = fragmentRef.key;\n    current[1] = fragmentRef.promise;\n  }\n\n  const data = __use(current[1]);\n\n  return { data };\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAW9B,SAASC,kBAAkB,QAAQ,sBAAsB;AAGzD,SAASC,gBAAgB,QAAQ,+BAA+B;AAOhE,SAASC,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,eAAe,QAAQ,sBAAsB;AA4EtD,MAAMC,gBAAgB,GAAG,EAGxB;AAwCD,OAAM,SAAUC,mBAAmBA,CAIjCC,OAAuD;EAEvD,aAAa;;EACb,OAAOJ,QAAQ,CACb,qBAAqB;EACrB;EACAK,oBAAoB,EACpBJ,eAAe,CAAC,OAAOG,OAAO,KAAK,QAAQ,GAAGA,OAAO,CAACE,MAAM,GAAGC,SAAS,CAAC,CAC1E,CAACH,OAAO,CAAC;AACZ;AAEA,SAASC,oBAAoBA,CAI3BD,OAAuD;EAEvD,MAAME,MAAM,GAAGL,eAAe,CAACG,OAAO,CAACE,MAAM,CAAC;EAC9C,MAAM;IAAEE,IAAI;IAAEC;EAAS,CAAE,GAAGL,OAAO;EACnC,MAAM;IAAEM;EAAK,CAAE,GAAGJ,MAAM;EAExB,MAAMK,EAAE,GAAGf,KAAK,CAACgB,OAAO,CACtB,MACE,OAAOJ,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAC7BA,IAAI,KAAK,IAAI,GAAG,IAAI,GACpBE,KAAK,CAACG,QAAQ,CAACL,IAAI,CAAC,EACxB,CAACE,KAAK,EAAEF,IAAI,CAAC,CACG;EAElB,MAAMM,WAAW,GACfH,EAAE,KAAK,IAAI,GAAG,IAAI,GAChBb,gBAAgB,CAACQ,MAAM,CAAC,CAACS,cAAc,CACrC,CAACJ,EAAE,EAAEP,OAAO,CAACY,QAAQ,EAAEnB,kBAAkB,CAACY,SAAS,CAAC,CAAC,EACrDH,MAAM,EACN;IAAE,GAAGF,OAAO;IAAEK,SAAS,EAAEA,SAAuB;IAAED,IAAI,EAAEG;EAAE,CAAE,CAE/D;EAEH,IAAI,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGtB,KAAK,CAACuB,QAAQ,CAGxCL,WAAW,KAAK,IAAI,GAAGZ,gBAAgB,GACrC,CAACY,WAAW,CAACM,GAAG,EAAEN,WAAW,CAACO,OAAO,CACtC,CACF;EAEDzB,KAAK,CAAC0B,SAAS,CAAC,MAAK;IACnB,IAAIR,WAAW,KAAK,IAAI,EAAE;MACxB;IACF;IAEA,MAAMS,OAAO,GAAGT,WAAW,CAACU,MAAM,EAAE;IACpC,MAAMC,cAAc,GAAGX,WAAW,CAACY,MAAM,CAAEL,OAAO,IAAI;MACpDH,UAAU,CAAC,CAACJ,WAAW,CAACM,GAAG,EAAEC,OAAO,CAAC,CAAC;IACxC,CAAC,CAAC;IAEF,OAAO,MAAK;MACVE,OAAO,EAAE;MACTE,cAAc,EAAE;IAClB,CAAC;EACH,CAAC,EAAE,CAACX,WAAW,CAAC,CAAC;EAEjB,IAAIA,WAAW,KAAK,IAAI,EAAE;IACxB,OAAO;MAAEa,IAAI,EAAE;IAAI,CAAE;EACvB;EAEA,IAAIV,OAAO,CAAC,CAAC,CAAC,KAAKH,WAAW,CAACM,GAAG,EAAE;IAClC;IACAH,OAAO,CAAC,CAAC,CAAC,GAAGH,WAAW,CAACM,GAAG;IAC5BH,OAAO,CAAC,CAAC,CAAC,GAAGH,WAAW,CAACO,OAAO;EAClC;EAEA,MAAMM,IAAI,GAAG5B,KAAK,CAACkB,OAAO,CAAC,CAAC,CAAC,CAAC;EAE9B,OAAO;IAAEU;EAAI,CAAE;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
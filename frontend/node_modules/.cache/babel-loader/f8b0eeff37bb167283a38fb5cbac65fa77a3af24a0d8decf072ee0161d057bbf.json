{"ast":null,"code":"import { print } from \"@apollo/client/utilities\";\nconst defaultHttpOptions = {\n  includeQuery: true,\n  includeExtensions: true,\n  preserveHeaderCase: false\n};\nconst defaultHeaders = {\n  // headers are case insensitive (https://stackoverflow.com/a/5259004)\n  accept: \"application/graphql-response+json,application/json;q=0.9\",\n  // The content-type header describes the type of the body of the request, and\n  // so it typically only is sent with requests that actually have bodies. One\n  // could imagine that Apollo Client would remove this header when constructing\n  // a GET request (which has no body), but we historically have not done that.\n  // This means that browsers will preflight all Apollo Client requests (even\n  // GET requests). Apollo Server's CSRF prevention feature (introduced in\n  // AS3.7) takes advantage of this fact and does not block requests with this\n  // header. If you want to drop this header from GET requests, then you should\n  // probably replace it with a `apollo-require-preflight` header, or servers\n  // with CSRF prevention enabled might block your GET request. See\n  // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n  // for more details.\n  \"content-type\": \"application/json\"\n};\nconst defaultOptions = {\n  method: \"POST\"\n};\nexport const fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions\n};\nexport const defaultPrinter = (ast, printer) => printer(ast);\nexport function selectHttpOptionsAndBody(operation, fallbackConfig, ...configs) {\n  configs.unshift(fallbackConfig);\n  return selectHttpOptionsAndBodyInternal(operation, defaultPrinter, ...configs);\n}\nexport function selectHttpOptionsAndBodyInternal(operation, printer, ...configs) {\n  let options = {};\n  let http = {};\n  configs.forEach(config => {\n    options = {\n      ...options,\n      ...config.options,\n      headers: {\n        ...options.headers,\n        ...config.headers\n      }\n    };\n    if (config.credentials) {\n      options.credentials = config.credentials;\n    }\n    options.headers.accept = (config.http?.accept || []).concat(options.headers.accept).join(\",\");\n    http = {\n      ...http,\n      ...config.http\n    };\n  });\n  options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n  //The body depends on the http options\n  const {\n    operationName,\n    extensions,\n    variables,\n    query\n  } = operation;\n  const body = {\n    operationName,\n    variables\n  };\n  if (http.includeExtensions && Object.keys(extensions || {}).length) body.extensions = extensions;\n  // not sending the query (i.e persisted queries)\n  if (http.includeQuery) body.query = printer(query, print);\n  return {\n    options,\n    body\n  };\n}\n// Remove potential duplicate header names, preserving last (by insertion order).\n// This is done to prevent unintentionally duplicating a header instead of\n// overwriting it (See #8447 and #8449).\nfunction removeDuplicateHeaders(headers, preserveHeaderCase) {\n  // If we're not preserving the case, just remove duplicates w/ normalization.\n  if (!preserveHeaderCase) {\n    const normalizedHeaders = {};\n    Object.keys(Object(headers)).forEach(name => {\n      normalizedHeaders[name.toLowerCase()] = headers[name];\n    });\n    return normalizedHeaders;\n  }\n  // If we are preserving the case, remove duplicates w/ normalization,\n  // preserving the original name.\n  // This allows for non-http-spec-compliant servers that expect intentionally\n  // capitalized header names (See #6741).\n  const headerData = {};\n  Object.keys(Object(headers)).forEach(name => {\n    headerData[name.toLowerCase()] = {\n      originalName: name,\n      value: headers[name]\n    };\n  });\n  const normalizedHeaders = {};\n  Object.keys(headerData).forEach(name => {\n    normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n  });\n  return normalizedHeaders;\n}","map":{"version":3,"names":["print","defaultHttpOptions","includeQuery","includeExtensions","preserveHeaderCase","defaultHeaders","accept","defaultOptions","method","fallbackHttpConfig","http","headers","options","defaultPrinter","ast","printer","selectHttpOptionsAndBody","operation","fallbackConfig","configs","unshift","selectHttpOptionsAndBodyInternal","forEach","config","credentials","concat","join","removeDuplicateHeaders","operationName","extensions","variables","query","body","Object","keys","length","normalizedHeaders","name","toLowerCase","headerData","originalName","value"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/link/http/selectHttpOptionsAndBody.ts"],"sourcesContent":["import type { ApolloLink } from \"@apollo/client/link\";\nimport { print } from \"@apollo/client/utilities\";\n\nimport type { BaseHttpLink } from \"./BaseHttpLink.js\";\n\ninterface HttpConfig {\n  http?: BaseHttpLink.HttpOptions;\n  options?: any;\n  headers?: Record<string, string>;\n  credentials?: any;\n}\n\nconst defaultHttpOptions: BaseHttpLink.HttpOptions = {\n  includeQuery: true,\n  includeExtensions: true,\n  preserveHeaderCase: false,\n};\n\nconst defaultHeaders = {\n  // headers are case insensitive (https://stackoverflow.com/a/5259004)\n  accept: \"application/graphql-response+json,application/json;q=0.9\",\n  // The content-type header describes the type of the body of the request, and\n  // so it typically only is sent with requests that actually have bodies. One\n  // could imagine that Apollo Client would remove this header when constructing\n  // a GET request (which has no body), but we historically have not done that.\n  // This means that browsers will preflight all Apollo Client requests (even\n  // GET requests). Apollo Server's CSRF prevention feature (introduced in\n  // AS3.7) takes advantage of this fact and does not block requests with this\n  // header. If you want to drop this header from GET requests, then you should\n  // probably replace it with a `apollo-require-preflight` header, or servers\n  // with CSRF prevention enabled might block your GET request. See\n  // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n  // for more details.\n  \"content-type\": \"application/json\",\n};\n\nconst defaultOptions = {\n  method: \"POST\",\n};\n\nexport const fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions,\n};\n\nexport const defaultPrinter: BaseHttpLink.Printer = (ast, printer) =>\n  printer(ast);\n\nexport function selectHttpOptionsAndBody(\n  operation: ApolloLink.Operation,\n  fallbackConfig: HttpConfig,\n  ...configs: Array<HttpConfig>\n) {\n  configs.unshift(fallbackConfig);\n  return selectHttpOptionsAndBodyInternal(\n    operation,\n    defaultPrinter,\n    ...configs\n  );\n}\n\nexport function selectHttpOptionsAndBodyInternal(\n  operation: ApolloLink.Operation,\n  printer: BaseHttpLink.Printer,\n  ...configs: HttpConfig[]\n) {\n  let options = {} as HttpConfig & Record<string, any>;\n  let http = {} as BaseHttpLink.HttpOptions;\n\n  configs.forEach((config) => {\n    options = {\n      ...options,\n      ...config.options,\n      headers: {\n        ...options.headers,\n        ...config.headers,\n      },\n    };\n\n    if (config.credentials) {\n      options.credentials = config.credentials;\n    }\n\n    options.headers!.accept = (config.http?.accept || [])\n      .concat(options.headers!.accept)\n      .join(\",\");\n\n    http = {\n      ...http,\n      ...config.http,\n    };\n  });\n\n  options.headers = removeDuplicateHeaders(\n    options.headers!,\n    http.preserveHeaderCase\n  );\n\n  //The body depends on the http options\n  const { operationName, extensions, variables, query } = operation;\n  const body: BaseHttpLink.Body = { operationName, variables };\n\n  if (http.includeExtensions && Object.keys(extensions || {}).length)\n    (body as any).extensions = extensions;\n\n  // not sending the query (i.e persisted queries)\n  if (http.includeQuery) (body as any).query = printer(query, print);\n\n  return {\n    options,\n    body,\n  };\n}\n\n// Remove potential duplicate header names, preserving last (by insertion order).\n// This is done to prevent unintentionally duplicating a header instead of\n// overwriting it (See #8447 and #8449).\nfunction removeDuplicateHeaders(\n  headers: Record<string, string>,\n  preserveHeaderCase: boolean | undefined\n): typeof headers {\n  // If we're not preserving the case, just remove duplicates w/ normalization.\n  if (!preserveHeaderCase) {\n    const normalizedHeaders: Record<string, string> = {};\n    Object.keys(Object(headers)).forEach((name) => {\n      normalizedHeaders[name.toLowerCase()] = headers[name];\n    });\n    return normalizedHeaders;\n  }\n\n  // If we are preserving the case, remove duplicates w/ normalization,\n  // preserving the original name.\n  // This allows for non-http-spec-compliant servers that expect intentionally\n  // capitalized header names (See #6741).\n  const headerData: Record<string, { originalName: string; value: string }> =\n    {};\n  Object.keys(Object(headers)).forEach((name) => {\n    headerData[name.toLowerCase()] = {\n      originalName: name,\n      value: headers[name],\n    };\n  });\n\n  const normalizedHeaders: Record<string, string> = {};\n  Object.keys(headerData).forEach((name) => {\n    normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n  });\n  return normalizedHeaders;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
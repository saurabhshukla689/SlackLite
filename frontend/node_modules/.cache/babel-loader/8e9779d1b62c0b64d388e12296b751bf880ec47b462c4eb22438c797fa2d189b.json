{"ast":null,"code":"import { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { global } from \"@apollo/client/utilities/internal/globals\";\nimport { version } from \"../../version.js\";\n// eslint-disable-next-line local-rules/import-from-inside-other-export\nimport { stringifyForDisplay } from \"../internal/stringifyForDisplay.js\";\nconst genericMessage = \"Invariant Violation\";\nexport class InvariantError extends Error {\n  constructor(message = genericMessage) {\n    super(message);\n    this.name = genericMessage;\n    Object.setPrototypeOf(this, InvariantError.prototype);\n  }\n}\nconst verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"];\nlet verbosityLevel = verbosityLevels.indexOf(__DEV__ ? \"log\" : \"silent\");\nexport function invariant(condition, ...args) {\n  if (!condition) {\n    throw newInvariantError(...args);\n  }\n}\nfunction wrapConsoleMethod(name) {\n  return function (message, ...args) {\n    if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n      // Default to console.log if this host environment happens not to provide\n      // all the console.* methods we need.\n      const method = console[name] || console.log;\n      if (typeof message === \"number\") {\n        const arg0 = message;\n        message = getHandledErrorMsg(arg0);\n        if (!message) {\n          message = getFallbackErrorMsg(arg0, args);\n          args = [];\n        }\n      }\n      method(message, ...args);\n    }\n  };\n}\ninvariant.debug = wrapConsoleMethod(\"debug\");\ninvariant.log = wrapConsoleMethod(\"log\");\ninvariant.warn = wrapConsoleMethod(\"warn\");\ninvariant.error = wrapConsoleMethod(\"error\");\nexport function setVerbosity(level) {\n  const old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */\nexport function newInvariantError(message, ...optionalParams) {\n  return new InvariantError(getHandledErrorMsg(message, optionalParams) || getFallbackErrorMsg(message, optionalParams));\n}\n// This is duplicated between `@apollo/client/dev` and `@apollo/client/utilities/invariant` to prevent circular references.\nexport const ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + version);\nfunction stringify(arg) {\n  if (typeof arg == \"string\") {\n    return arg;\n  }\n  try {\n    return stringifyForDisplay(arg, 2).slice(0, 1000);\n  } catch {\n    return \"<non-serializable>\";\n  }\n}\nfunction getHandledErrorMsg(message, messageArgs = []) {\n  if (!message) return;\n  return global[ApolloErrorMessageHandler] && global[ApolloErrorMessageHandler](message, messageArgs.map(stringify));\n}\nfunction getFallbackErrorMsg(message, messageArgs = []) {\n  if (!message) return;\n  return `An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#${encodeURIComponent(JSON.stringify({\n    version,\n    message,\n    args: messageArgs.map(stringify)\n  }))}`;\n}","map":{"version":3,"names":["__DEV__","global","version","stringifyForDisplay","genericMessage","InvariantError","Error","constructor","message","name","Object","setPrototypeOf","prototype","verbosityLevels","verbosityLevel","indexOf","invariant","condition","args","newInvariantError","wrapConsoleMethod","method","console","log","arg0","getHandledErrorMsg","getFallbackErrorMsg","debug","warn","error","setVerbosity","level","old","Math","max","optionalParams","ApolloErrorMessageHandler","Symbol","for","stringify","arg","slice","messageArgs","map","encodeURIComponent","JSON"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/utilities/invariant/index.ts"],"sourcesContent":["import { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { global } from \"@apollo/client/utilities/internal/globals\";\n\nimport type { ErrorCodes } from \"../../invariantErrorCodes.js\";\nimport { version } from \"../../version.js\";\n// eslint-disable-next-line local-rules/import-from-inside-other-export\nimport { stringifyForDisplay } from \"../internal/stringifyForDisplay.js\";\n\nconst genericMessage = \"Invariant Violation\";\nexport class InvariantError extends Error {\n  constructor(message = genericMessage) {\n    super(message);\n    this.name = genericMessage;\n\n    Object.setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n\nconst verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"] as const;\ntype VerbosityLevel = (typeof verbosityLevels)[number];\ntype ConsoleMethodName = Exclude<VerbosityLevel, \"silent\">;\nlet verbosityLevel = verbosityLevels.indexOf(__DEV__ ? \"log\" : \"silent\");\n\nexport function invariant(\n  condition: any,\n  ...args: [message?: string | number, ...any[]]\n): asserts condition {\n  if (!condition) {\n    throw newInvariantError(...args);\n  }\n}\n\nfunction wrapConsoleMethod<M extends ConsoleMethodName>(name: M) {\n  return function (message?: string | number, ...args: any[]) {\n    if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n      // Default to console.log if this host environment happens not to provide\n      // all the console.* methods we need.\n      const method = console[name] || console.log;\n\n      if (typeof message === \"number\") {\n        const arg0 = message;\n        message = getHandledErrorMsg(arg0);\n        if (!message) {\n          message = getFallbackErrorMsg(arg0, args);\n          args = [];\n        }\n      }\n\n      method(message, ...args);\n    }\n  } as (typeof console)[M];\n}\n\ninvariant.debug = wrapConsoleMethod(\"debug\");\ninvariant.log = wrapConsoleMethod(\"log\");\ninvariant.warn = wrapConsoleMethod(\"warn\");\ninvariant.error = wrapConsoleMethod(\"error\");\n\nexport function setVerbosity(level: VerbosityLevel): VerbosityLevel {\n  const old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */\nexport function newInvariantError(\n  message?: string | number,\n  ...optionalParams: unknown[]\n) {\n  return new InvariantError(\n    getHandledErrorMsg(message, optionalParams) ||\n      getFallbackErrorMsg(message, optionalParams)\n  );\n}\n\n// This is duplicated between `@apollo/client/dev` and `@apollo/client/utilities/invariant` to prevent circular references.\nexport const ApolloErrorMessageHandler = Symbol.for(\n  \"ApolloErrorMessageHandler_\" + version\n);\ndeclare global {\n  interface Window {\n    [ApolloErrorMessageHandler]?: {\n      (message: string | number, args: string[]): string | undefined;\n    } & ErrorCodes;\n  }\n}\n\nfunction stringify(arg: any) {\n  if (typeof arg == \"string\") {\n    return arg;\n  }\n\n  try {\n    return stringifyForDisplay(arg, 2).slice(0, 1000);\n  } catch {\n    return \"<non-serializable>\";\n  }\n}\n\nfunction getHandledErrorMsg(\n  message?: string | number,\n  messageArgs: unknown[] = []\n) {\n  if (!message) return;\n  return (\n    global[ApolloErrorMessageHandler] &&\n    global[ApolloErrorMessageHandler](message, messageArgs.map(stringify))\n  );\n}\n\nfunction getFallbackErrorMsg(\n  message?: string | number,\n  messageArgs: unknown[] = []\n) {\n  if (!message) return;\n  return `An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#${encodeURIComponent(\n    JSON.stringify({\n      version,\n      message,\n      args: messageArgs.map(stringify),\n    })\n  )}`;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nexport function rewriteURIForGET(chosenURI, body) {\n  // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n  // the extra level of JSON serialization!\n  const queryParams = [];\n  const addQueryParam = (key, value) => {\n    queryParams.push(`${key}=${encodeURIComponent(value)}`);\n  };\n  if (\"query\" in body) {\n    addQueryParam(\"query\", body.query);\n  }\n  if (body.operationName) {\n    addQueryParam(\"operationName\", body.operationName);\n  }\n  if (body.variables) {\n    let serializedVariables;\n    try {\n      serializedVariables = JSON.stringify(body.variables);\n    } catch (parseError) {\n      return {\n        parseError\n      };\n    }\n    addQueryParam(\"variables\", serializedVariables);\n  }\n  if (body.extensions) {\n    let serializedExtensions;\n    try {\n      serializedExtensions = JSON.stringify(body.extensions);\n    } catch (parseError) {\n      return {\n        parseError\n      };\n    }\n    addQueryParam(\"extensions\", serializedExtensions);\n  }\n  // Reconstruct the URI with added query params.\n  // XXX This assumes that the URI is well-formed and that it doesn't\n  //     already contain any of these query params. We could instead use the\n  //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n  //     don't support URLSearchParams. Note that some browsers (and\n  //     versions of whatwg-url) support URL but not URLSearchParams!\n  let fragment = \"\",\n    preFragment = chosenURI;\n  const fragmentStart = chosenURI.indexOf(\"#\");\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  const queryParamsPrefix = preFragment.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n  const newURI = preFragment + queryParamsPrefix + queryParams.join(\"&\") + fragment;\n  return {\n    newURI\n  };\n}","map":{"version":3,"names":["rewriteURIForGET","chosenURI","body","queryParams","addQueryParam","key","value","push","encodeURIComponent","query","operationName","variables","serializedVariables","JSON","stringify","parseError","extensions","serializedExtensions","fragment","preFragment","fragmentStart","indexOf","substr","queryParamsPrefix","newURI","join"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/link/http/rewriteURIForGET.ts"],"sourcesContent":["import type { BaseHttpLink } from \"./BaseHttpLink.js\";\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nexport function rewriteURIForGET(chosenURI: string, body: BaseHttpLink.Body) {\n  // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n  // the extra level of JSON serialization!\n  const queryParams: string[] = [];\n  const addQueryParam = (key: string, value: string) => {\n    queryParams.push(`${key}=${encodeURIComponent(value)}`);\n  };\n\n  if (\"query\" in body) {\n    addQueryParam(\"query\", body.query!);\n  }\n  if (body.operationName) {\n    addQueryParam(\"operationName\", body.operationName);\n  }\n  if (body.variables) {\n    let serializedVariables;\n    try {\n      serializedVariables = JSON.stringify(body.variables);\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam(\"variables\", serializedVariables);\n  }\n  if (body.extensions) {\n    let serializedExtensions;\n    try {\n      serializedExtensions = JSON.stringify(body.extensions);\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam(\"extensions\", serializedExtensions);\n  }\n\n  // Reconstruct the URI with added query params.\n  // XXX This assumes that the URI is well-formed and that it doesn't\n  //     already contain any of these query params. We could instead use the\n  //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n  //     don't support URLSearchParams. Note that some browsers (and\n  //     versions of whatwg-url) support URL but not URLSearchParams!\n  let fragment = \"\",\n    preFragment = chosenURI;\n  const fragmentStart = chosenURI.indexOf(\"#\");\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  const queryParamsPrefix = preFragment.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n  const newURI =\n    preFragment + queryParamsPrefix + queryParams.join(\"&\") + fragment;\n  return { newURI };\n}\n"],"mappings":"AAEA;AACA;AACA,OAAM,SAAUA,gBAAgBA,CAACC,SAAiB,EAAEC,IAAuB;EACzE;EACA;EACA,MAAMC,WAAW,GAAa,EAAE;EAChC,MAAMC,aAAa,GAAGA,CAACC,GAAW,EAAEC,KAAa,KAAI;IACnDH,WAAW,CAACI,IAAI,CAAC,GAAGF,GAAG,IAAIG,kBAAkB,CAACF,KAAK,CAAC,EAAE,CAAC;EACzD,CAAC;EAED,IAAI,OAAO,IAAIJ,IAAI,EAAE;IACnBE,aAAa,CAAC,OAAO,EAAEF,IAAI,CAACO,KAAM,CAAC;EACrC;EACA,IAAIP,IAAI,CAACQ,aAAa,EAAE;IACtBN,aAAa,CAAC,eAAe,EAAEF,IAAI,CAACQ,aAAa,CAAC;EACpD;EACA,IAAIR,IAAI,CAACS,SAAS,EAAE;IAClB,IAAIC,mBAAmB;IACvB,IAAI;MACFA,mBAAmB,GAAGC,IAAI,CAACC,SAAS,CAACZ,IAAI,CAACS,SAAS,CAAC;IACtD,CAAC,CAAC,OAAOI,UAAU,EAAE;MACnB,OAAO;QAAEA;MAAU,CAAE;IACvB;IACAX,aAAa,CAAC,WAAW,EAAEQ,mBAAmB,CAAC;EACjD;EACA,IAAIV,IAAI,CAACc,UAAU,EAAE;IACnB,IAAIC,oBAAoB;IACxB,IAAI;MACFA,oBAAoB,GAAGJ,IAAI,CAACC,SAAS,CAACZ,IAAI,CAACc,UAAU,CAAC;IACxD,CAAC,CAAC,OAAOD,UAAU,EAAE;MACnB,OAAO;QAAEA;MAAU,CAAE;IACvB;IACAX,aAAa,CAAC,YAAY,EAAEa,oBAAoB,CAAC;EACnD;EAEA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIC,QAAQ,GAAG,EAAE;IACfC,WAAW,GAAGlB,SAAS;EACzB,MAAMmB,aAAa,GAAGnB,SAAS,CAACoB,OAAO,CAAC,GAAG,CAAC;EAC5C,IAAID,aAAa,KAAK,CAAC,CAAC,EAAE;IACxBF,QAAQ,GAAGjB,SAAS,CAACqB,MAAM,CAACF,aAAa,CAAC;IAC1CD,WAAW,GAAGlB,SAAS,CAACqB,MAAM,CAAC,CAAC,EAAEF,aAAa,CAAC;EAClD;EACA,MAAMG,iBAAiB,GAAGJ,WAAW,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG;EACrE,MAAMG,MAAM,GACVL,WAAW,GAAGI,iBAAiB,GAAGpB,WAAW,CAACsB,IAAI,CAAC,GAAG,CAAC,GAAGP,QAAQ;EACpE,OAAO;IAAEM;EAAM,CAAE;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
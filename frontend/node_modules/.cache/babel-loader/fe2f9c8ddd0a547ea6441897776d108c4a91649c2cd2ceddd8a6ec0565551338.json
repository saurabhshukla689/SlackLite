{"ast":null,"code":"import { getStoreKeyName } from \"./getStoreKeyName.js\";\nimport { valueToObjectRepresentation } from \"./valueToObjectRepresentation.js\";\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/\nexport function storeKeyNameFromField(field, variables) {\n  let directivesObj = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(directive => {\n      directivesObj[directive.name.value] = {};\n      if (directive.arguments) {\n        directive.arguments.forEach(({\n          name,\n          value\n        }) => valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables));\n      }\n    });\n  }\n  let argObj = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({\n      name,\n      value\n    }) => valueToObjectRepresentation(argObj, name, value, variables));\n  }\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}","map":{"version":3,"names":["getStoreKeyName","valueToObjectRepresentation","storeKeyNameFromField","field","variables","directivesObj","directives","forEach","directive","name","value","arguments","argObj","length"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/utilities/internal/storeKeyNameFromField.ts"],"sourcesContent":["import type { FieldNode } from \"graphql\";\n\nimport { getStoreKeyName } from \"./getStoreKeyName.js\";\nimport { valueToObjectRepresentation } from \"./valueToObjectRepresentation.js\";\n\n/** @internal */\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach((directive) => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables\n          )\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables)\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n"],"mappings":"AAEA,SAASA,eAAT,QAAgC,sBAAsB;AACtD,SAASC,2BAAT,QAA4C,kCAAkC;;;;;;AAG9E,gBAAgBC,qBAAqBA,CACnCC,KAAgB,EAChBC,SAAkB,EAFpB;EAIE,IAAIC,aAAN,GAA2B,IAAI;EAC7B,IAAIF,KAAK,CAACG,UAAU,EAAE;IACpBD,aAAJ,GAAoB,CAApB,CAAsB;IAClBF,KAAK,CAACG,UAAU,CAACC,OAAO,CAAEC,SAAS,IAAvC;MACMH,aAAa,CAACG,SAAS,CAACC,IAAI,CAACC,KAAK,IAAI,CAA5C,CAA8C;MAExC,IAAIF,SAAS,CAACG,SAAS,EAAE;QACvBH,SAAS,CAACG,SAAS,CAACJ,OAAO,CAAC,CAAC;UAAEE,IAAI;UAAEC;QAA7C,CAAoD,KAC1CT,2BAA2B,CACzBI,aAAa,CAACG,SAAS,CAACC,IAAI,CAACC,KAAK,CAAC,EACnCD,IAAI,EACJC,KAAK,EACLN,SAAS,CACV,CACF;MACH;IACF,CAAC,CAAC;EACJ;EAEA,IAAIQ,MAAN,GAAoB,IAAI;EACtB,IAAIT,KAAK,CAACQ,SAAZ,IAAyBR,KAAK,CAACQ,SAAS,CAACE,MAAM,EAAE;IAC7CD,MAAJ,GAAa,CAAb,CAAe;IACXT,KAAK,CAACQ,SAAS,CAACJ,OAAO,CAAC,CAAC;MAAEE,IAAI;MAAEC;IAArC,CAA4C,KACtCT,2BAA2B,CAACW,MAAM,EAAEH,IAAI,EAAEC,KAAK,EAAEN,SAAS,CAAC,CAC5D;EACH;EAEA,OAAOJ,eAAe,CAACG,KAAK,CAACM,IAAI,CAACC,KAAK,EAAEE,MAAM,EAAEP,aAAa,CAAC;AACjE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
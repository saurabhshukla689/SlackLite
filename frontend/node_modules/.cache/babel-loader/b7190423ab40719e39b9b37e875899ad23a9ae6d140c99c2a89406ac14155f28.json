{"ast":null,"code":"import { DeepMerger, hasDirectives, isNonEmptyArray } from \"@apollo/client/utilities/internal\";\nclass DeferRequest {\n  hasNext = true;\n  errors = [];\n  extensions = {};\n  data = {};\n  mergeIn(normalized, merger) {\n    if (normalized.data !== undefined) {\n      this.data = merger.merge(this.data, normalized.data);\n    }\n    if (normalized.errors) {\n      this.errors.push(...normalized.errors);\n    }\n    Object.assign(this.extensions, normalized.extensions);\n  }\n  handle(\n  // we'll get `undefined` here in case of a `no-cache` fetch policy,\n  // so we'll continue with the last value this request had accumulated\n  cacheData = this.data, chunk) {\n    this.hasNext = chunk.hasNext;\n    this.data = cacheData;\n    this.mergeIn(chunk, new DeepMerger());\n    if (hasIncrementalChunks(chunk)) {\n      const merger = new DeepMerger();\n      for (const incremental of chunk.incremental) {\n        let {\n          data,\n          path,\n          errors,\n          extensions\n        } = incremental;\n        if (data && path) {\n          for (let i = path.length - 1; i >= 0; --i) {\n            const key = path[i];\n            const isNumericKey = !isNaN(+key);\n            const parent = isNumericKey ? [] : {};\n            parent[key] = data;\n            data = parent;\n          }\n        }\n        this.mergeIn({\n          errors,\n          extensions,\n          data: data ? data : undefined\n        }, merger);\n      }\n    }\n    const result = {\n      data: this.data\n    };\n    if (isNonEmptyArray(this.errors)) {\n      result.errors = this.errors;\n    }\n    if (Object.keys(this.extensions).length > 0) {\n      result.extensions = this.extensions;\n    }\n    return result;\n  }\n}\n/**\n * This handler implements the `@defer` directive as specified in this historical commit:\n * https://github.com/graphql/graphql-spec/tree/48cf7263a71a683fab03d45d309fd42d8d9a6659/spec\n */\nexport class Defer20220824Handler {\n  isIncrementalResult(result) {\n    return \"hasNext\" in result;\n  }\n  extractErrors(result) {\n    const acc = [];\n    const push = ({\n      errors\n    }) => {\n      if (errors) {\n        acc.push(...errors);\n      }\n    };\n    if (this.isIncrementalResult(result)) {\n      push(result);\n      if (hasIncrementalChunks(result)) {\n        result.incremental.forEach(push);\n      }\n    }\n    if (acc.length) {\n      return acc;\n    }\n  }\n  prepareRequest(request) {\n    if (hasDirectives([\"defer\"], request.query)) {\n      const context = request.context ?? {};\n      const http = context.http ??= {};\n      http.accept = [\"multipart/mixed;deferSpec=20220824\", ...(http.accept || [])];\n    }\n    return request;\n  }\n  startRequest(_) {\n    return new DeferRequest();\n  }\n}\n// only exported for use in tests\nexport function hasIncrementalChunks(result) {\n  return isNonEmptyArray(result.incremental);\n}","map":{"version":3,"names":["DeepMerger","hasDirectives","isNonEmptyArray","DeferRequest","hasNext","errors","extensions","data","mergeIn","normalized","merger","undefined","merge","push","Object","assign","handle","cacheData","chunk","hasIncrementalChunks","incremental","path","i","length","key","isNumericKey","isNaN","parent","result","keys","Defer20220824Handler","isIncrementalResult","extractErrors","acc","forEach","prepareRequest","request","query","context","http","accept","startRequest","_"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/incremental/handlers/defer20220824.ts"],"sourcesContent":["import type {\n  DocumentNode,\n  FormattedExecutionResult,\n  GraphQLFormattedError,\n} from \"graphql\";\n\nimport type { ApolloLink } from \"@apollo/client/link\";\nimport type { DeepPartial, HKT } from \"@apollo/client/utilities\";\nimport {\n  DeepMerger,\n  hasDirectives,\n  isNonEmptyArray,\n} from \"@apollo/client/utilities/internal\";\n\nimport type { Incremental } from \"../types.js\";\n\nexport declare namespace Defer20220824Handler {\n  interface Defer20220824Result extends HKT {\n    arg1: unknown; // TData\n    arg2: unknown; // TExtensions\n    return: Defer20220824Handler.Chunk<Record<string, unknown>>;\n  }\n  export interface TypeOverrides {\n    AdditionalApolloLinkResultTypes: Defer20220824Result;\n  }\n\n  export type InitialResult<TData = Record<string, unknown>> = {\n    data?: TData | null | undefined;\n    errors?: ReadonlyArray<GraphQLFormattedError>;\n    extensions?: Record<string, unknown>;\n    hasNext: boolean;\n  };\n\n  export type SubsequentResult<TData = Record<string, unknown>> = {\n    data?: TData | null | undefined;\n    errors?: ReadonlyArray<GraphQLFormattedError>;\n    extensions?: Record<string, unknown>;\n    hasNext: boolean;\n    incremental?: Array<IncrementalDeferPayload<TData>>;\n  };\n\n  export type Chunk<TData extends Record<string, unknown>> =\n    | InitialResult<TData>\n    | SubsequentResult<TData>;\n\n  export type IncrementalDeferPayload<TData = Record<string, unknown>> = {\n    data?: TData | null | undefined;\n    errors?: ReadonlyArray<GraphQLFormattedError>;\n    extensions?: Record<string, unknown>;\n    path?: Incremental.Path;\n    label?: string;\n  };\n}\n\nclass DeferRequest<TData extends Record<string, unknown>>\n  implements\n    Incremental.IncrementalRequest<Defer20220824Handler.Chunk<TData>, TData>\n{\n  public hasNext = true;\n\n  private errors: Array<GraphQLFormattedError> = [];\n  private extensions: Record<string, any> = {};\n  private data: any = {};\n\n  private mergeIn(\n    normalized: FormattedExecutionResult<TData>,\n    merger: DeepMerger<any[]>\n  ) {\n    if (normalized.data !== undefined) {\n      this.data = merger.merge(this.data, normalized.data);\n    }\n    if (normalized.errors) {\n      this.errors.push(...normalized.errors);\n    }\n    Object.assign(this.extensions, normalized.extensions);\n  }\n\n  handle(\n    // we'll get `undefined` here in case of a `no-cache` fetch policy,\n    // so we'll continue with the last value this request had accumulated\n    cacheData: TData | DeepPartial<TData> | null | undefined = this.data,\n    chunk: Defer20220824Handler.Chunk<TData>\n  ): FormattedExecutionResult<TData> {\n    this.hasNext = chunk.hasNext;\n    this.data = cacheData;\n\n    this.mergeIn(chunk, new DeepMerger());\n\n    if (hasIncrementalChunks(chunk)) {\n      const merger = new DeepMerger();\n      for (const incremental of chunk.incremental) {\n        let { data, path, errors, extensions } = incremental;\n        if (data && path) {\n          for (let i = path.length - 1; i >= 0; --i) {\n            const key = path[i];\n            const isNumericKey = !isNaN(+key);\n            const parent: Record<string | number, any> = isNumericKey ? [] : {};\n            parent[key] = data;\n            data = parent as typeof data;\n          }\n        }\n        this.mergeIn(\n          {\n            errors,\n            extensions,\n            data: data ? (data as TData) : undefined,\n          },\n          merger\n        );\n      }\n    }\n\n    const result: FormattedExecutionResult<TData> = { data: this.data };\n\n    if (isNonEmptyArray(this.errors)) {\n      result.errors = this.errors;\n    }\n\n    if (Object.keys(this.extensions).length > 0) {\n      result.extensions = this.extensions;\n    }\n\n    return result;\n  }\n}\n\n/**\n * This handler implements the `@defer` directive as specified in this historical commit:\n * https://github.com/graphql/graphql-spec/tree/48cf7263a71a683fab03d45d309fd42d8d9a6659/spec\n */\nexport class Defer20220824Handler\n  implements Incremental.Handler<Defer20220824Handler.Chunk<any>>\n{\n  isIncrementalResult(\n    result: Record<string, any>\n  ): result is\n    | Defer20220824Handler.SubsequentResult\n    | Defer20220824Handler.InitialResult {\n    return \"hasNext\" in result;\n  }\n\n  extractErrors(result: ApolloLink.Result<any>) {\n    const acc: GraphQLFormattedError[] = [];\n    const push = ({\n      errors,\n    }: {\n      errors?: ReadonlyArray<GraphQLFormattedError>;\n    }) => {\n      if (errors) {\n        acc.push(...errors);\n      }\n    };\n    if (this.isIncrementalResult(result)) {\n      push(result);\n      if (hasIncrementalChunks(result)) {\n        result.incremental.forEach(push);\n      }\n    }\n    if (acc.length) {\n      return acc;\n    }\n  }\n\n  prepareRequest(request: ApolloLink.Request): ApolloLink.Request {\n    if (hasDirectives([\"defer\"], request.query)) {\n      const context = request.context ?? {};\n      const http = (context.http ??= {});\n      http.accept = [\n        \"multipart/mixed;deferSpec=20220824\",\n        ...(http.accept || []),\n      ];\n    }\n\n    return request;\n  }\n  startRequest<TData extends Record<string, unknown>>(_: {\n    query: DocumentNode;\n  }) {\n    return new DeferRequest<TData>();\n  }\n}\n\n// only exported for use in tests\nexport function hasIncrementalChunks(\n  result: Record<string, any>\n): result is Required<Defer20220824Handler.SubsequentResult> {\n  return isNonEmptyArray(result.incremental);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { dep, Slot } from \"optimism\";\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nexport const cacheSlot = new Slot();\nconst cacheInfoMap = new WeakMap();\nfunction getCacheInfo(cache) {\n  let info = cacheInfoMap.get(cache);\n  if (!info) {\n    cacheInfoMap.set(cache, info = {\n      vars: new Set(),\n      dep: dep()\n    });\n  }\n  return info;\n}\nexport function forgetCache(cache) {\n  getCacheInfo(cache).vars.forEach(rv => rv.forgetCache(cache));\n}\n// Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\nexport function recallCache(cache) {\n  getCacheInfo(cache).vars.forEach(rv => rv.attachCache(cache));\n}\nexport function makeVar(value) {\n  const caches = new Set();\n  const listeners = new Set();\n  const rv = function (newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue;\n        caches.forEach(cache => {\n          // Invalidate any fields with custom read functions that\n          // consumed this variable, so query results involving those\n          // fields will be recomputed the next time we read them.\n          getCacheInfo(cache).dep.dirty(rv);\n          // Broadcast changes to any caches that have previously read\n          // from this variable.\n          broadcast(cache);\n        });\n        // Finally, notify any listeners added via rv.onNextChange.\n        const oldListeners = Array.from(listeners);\n        listeners.clear();\n        oldListeners.forEach(listener => listener(value));\n      }\n    } else {\n      // When reading from the variable, obtain the current cache from\n      // context via cacheSlot. This isn't entirely foolproof, but it's\n      // the same system that powers varDep.\n      const cache = cacheSlot.getValue();\n      if (cache) {\n        attach(cache);\n        getCacheInfo(cache).dep(rv);\n      }\n    }\n    return value;\n  };\n  rv.onNextChange = listener => {\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n    };\n  };\n  const attach = rv.attachCache = cache => {\n    caches.add(cache);\n    getCacheInfo(cache).vars.add(rv);\n    return rv;\n  };\n  rv.forgetCache = cache => caches.delete(cache);\n  return rv;\n}\nfunction broadcast(cache) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}","map":{"version":3,"names":["dep","Slot","cacheSlot","cacheInfoMap","WeakMap","getCacheInfo","cache","info","get","set","vars","Set","forgetCache","forEach","rv","recallCache","attachCache","makeVar","value","caches","listeners","newValue","arguments","length","dirty","broadcast","oldListeners","Array","from","clear","listener","getValue","attach","onNextChange","add","delete","broadcastWatches"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/cache/inmemory/reactiveVars.ts"],"sourcesContent":["import type { OptimisticDependencyFunction } from \"optimism\";\nimport { dep, Slot } from \"optimism\";\n\nimport type { ApolloCache } from \"@apollo/client\";\n\nimport type { InMemoryCache } from \"./inMemoryCache.js\";\n\nexport interface ReactiveVar<T> {\n  (newValue?: T): T;\n  onNextChange(listener: ReactiveListener<T>): () => void;\n  attachCache(cache: ApolloCache): this;\n  forgetCache(cache: ApolloCache): boolean;\n}\n\ntype ReactiveListener<T> = (value: T) => any;\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nexport const cacheSlot = new Slot<ApolloCache>();\n\nconst cacheInfoMap = new WeakMap<\n  ApolloCache,\n  {\n    vars: Set<ReactiveVar<any>>;\n    dep: OptimisticDependencyFunction<ReactiveVar<any>>;\n  }\n>();\n\nfunction getCacheInfo(cache: ApolloCache) {\n  let info = cacheInfoMap.get(cache)!;\n  if (!info) {\n    cacheInfoMap.set(\n      cache,\n      (info = {\n        vars: new Set(),\n        dep: dep(),\n      })\n    );\n  }\n  return info;\n}\n\nexport function forgetCache(cache: ApolloCache) {\n  getCacheInfo(cache).vars.forEach((rv) => rv.forgetCache(cache));\n}\n\n// Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\nexport function recallCache(cache: ApolloCache) {\n  getCacheInfo(cache).vars.forEach((rv) => rv.attachCache(cache));\n}\n\nexport function makeVar<T>(value: T): ReactiveVar<T> {\n  const caches = new Set<ApolloCache>();\n  const listeners = new Set<ReactiveListener<T>>();\n\n  const rv: ReactiveVar<T> = function (newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue!;\n        caches.forEach((cache) => {\n          // Invalidate any fields with custom read functions that\n          // consumed this variable, so query results involving those\n          // fields will be recomputed the next time we read them.\n          getCacheInfo(cache).dep.dirty(rv);\n          // Broadcast changes to any caches that have previously read\n          // from this variable.\n          broadcast(cache);\n        });\n        // Finally, notify any listeners added via rv.onNextChange.\n        const oldListeners = Array.from(listeners);\n        listeners.clear();\n        oldListeners.forEach((listener) => listener(value));\n      }\n    } else {\n      // When reading from the variable, obtain the current cache from\n      // context via cacheSlot. This isn't entirely foolproof, but it's\n      // the same system that powers varDep.\n      const cache = cacheSlot.getValue();\n      if (cache) {\n        attach(cache);\n        getCacheInfo(cache).dep(rv);\n      }\n    }\n\n    return value;\n  };\n\n  rv.onNextChange = (listener) => {\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n    };\n  };\n\n  const attach = (rv.attachCache = (cache) => {\n    caches.add(cache);\n    getCacheInfo(cache).vars.add(rv);\n    return rv;\n  });\n\n  rv.forgetCache = (cache) => caches.delete(cache);\n\n  return rv;\n}\n\ntype Broadcastable = ApolloCache & {\n  // This method is protected in InMemoryCache, which we are ignoring, but\n  // we still want some semblance of type safety when we call it.\n  broadcastWatches?: InMemoryCache[\"broadcastWatches\"];\n};\n\nfunction broadcast(cache: Broadcastable) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { equal } from \"@wry/equality\";\nimport { Trie } from \"@wry/trie\";\nimport { Kind } from \"graphql\";\nimport { addTypenameToDocument, canonicalStringify, isReference } from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { argumentsObjectFromField, cloneDeep, getDefaultValues, getFragmentFromSelection, getOperationDefinition, isArray, isField, isNonEmptyArray, makeReference, resultKeyNameFromField, shouldInclude } from \"@apollo/client/utilities/internal\";\nimport { invariant, newInvariantError } from \"@apollo/client/utilities/invariant\";\nimport { extractFragmentContext, fieldNameFromStoreName, makeProcessedFieldsMerger, storeValueIsStoreObject } from \"./helpers.js\";\nimport { normalizeReadFieldOptions } from \"./policies.js\";\n// Since there are only four possible combinations of context.clientOnly and\n// context.deferred values, we should need at most four \"flavors\" of any given\n// WriteContext. To avoid creating multiple copies of the same context, we cache\n// the contexts in the context.flavors Map (shared by all flavors) according to\n// their clientOnly and deferred values (always in that order).\nfunction getContextFlavor(context, clientOnly, deferred) {\n  const key = `${clientOnly}${deferred}`;\n  let flavored = context.flavors.get(key);\n  if (!flavored) {\n    context.flavors.set(key, flavored = context.clientOnly === clientOnly && context.deferred === deferred ? context : {\n      ...context,\n      clientOnly,\n      deferred\n    });\n  }\n  return flavored;\n}\nexport class StoreWriter {\n  cache;\n  reader;\n  fragments;\n  constructor(cache, reader, fragments) {\n    this.cache = cache;\n    this.reader = reader;\n    this.fragments = fragments;\n  }\n  writeToStore(store, {\n    query,\n    result,\n    dataId,\n    variables,\n    overwrite\n  }) {\n    const operationDefinition = getOperationDefinition(query);\n    const merger = makeProcessedFieldsMerger();\n    variables = {\n      ...getDefaultValues(operationDefinition),\n      ...variables\n    };\n    const context = {\n      store,\n      written: {},\n      merge(existing, incoming) {\n        return merger.merge(existing, incoming);\n      },\n      variables: variables,\n      varString: canonicalStringify(variables),\n      ...extractFragmentContext(query, this.fragments),\n      overwrite: !!overwrite,\n      incomingById: new Map(),\n      clientOnly: false,\n      deferred: false,\n      flavors: new Map()\n    };\n    const ref = this.processSelectionSet({\n      result: result || {},\n      dataId,\n      selectionSet: operationDefinition.selectionSet,\n      mergeTree: {\n        map: new Map()\n      },\n      context\n    });\n    if (!isReference(ref)) {\n      throw newInvariantError(105, result);\n    }\n    // So far, the store has not been modified, so now it's time to process\n    // context.incomingById and merge those incoming fields into context.store.\n    context.incomingById.forEach(({\n      storeObject,\n      mergeTree,\n      fieldNodeSet\n    }, dataId) => {\n      const entityRef = makeReference(dataId);\n      if (mergeTree && mergeTree.map.size) {\n        const applied = this.applyMerges(mergeTree, entityRef, storeObject, context);\n        if (isReference(applied)) {\n          // Assume References returned by applyMerges have already been merged\n          // into the store. See makeMergeObjectsFunction in policies.ts for an\n          // example of how this can happen.\n          return;\n        }\n        // Otherwise, applyMerges returned a StoreObject, whose fields we should\n        // merge into the store (see store.merge statement below).\n        storeObject = applied;\n      }\n      if (__DEV__ && !context.overwrite) {\n        const fieldsWithSelectionSets = {};\n        fieldNodeSet.forEach(field => {\n          if (field.selectionSet) {\n            fieldsWithSelectionSets[field.name.value] = true;\n          }\n        });\n        const hasSelectionSet = storeFieldName => fieldsWithSelectionSets[fieldNameFromStoreName(storeFieldName)] === true;\n        const hasMergeFunction = storeFieldName => {\n          const childTree = mergeTree && mergeTree.map.get(storeFieldName);\n          return Boolean(childTree && childTree.info && childTree.info.merge);\n        };\n        Object.keys(storeObject).forEach(storeFieldName => {\n          // If a merge function was defined for this field, trust that it\n          // did the right thing about (not) clobbering data. If the field\n          // has no selection set, it's a scalar field, so it doesn't need\n          // a merge function (even if it's an object, like JSON data).\n          if (hasSelectionSet(storeFieldName) && !hasMergeFunction(storeFieldName)) {\n            warnAboutDataLoss(entityRef, storeObject, storeFieldName, context.store);\n          }\n        });\n      }\n      store.merge(dataId, storeObject);\n    });\n    // Any IDs written explicitly to the cache will be retained as\n    // reachable root IDs for garbage collection purposes. Although this\n    // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n    // retainment counts are effectively ignored because cache.gc() always\n    // includes them in its root ID set.\n    store.retain(ref.__ref);\n    return ref;\n  }\n  processSelectionSet({\n    dataId,\n    result,\n    selectionSet,\n    context,\n    // This object allows processSelectionSet to report useful information\n    // to its callers without explicitly returning that information.\n    mergeTree\n  }) {\n    const {\n      policies\n    } = this.cache;\n    // This variable will be repeatedly updated using context.merge to\n    // accumulate all fields that need to be written into the store.\n    let incoming = {};\n    // If typename was not passed in, infer it. Note that typename is\n    // always passed in for tricky-to-infer cases such as \"Query\" for\n    // ROOT_QUERY.\n    const typename = dataId && policies.rootTypenamesById[dataId] || getTypenameFromResult(result, selectionSet, context.fragmentMap) || dataId && context.store.get(dataId, \"__typename\");\n    if (\"string\" === typeof typename) {\n      incoming.__typename = typename;\n    }\n    // This readField function will be passed as context.readField in the\n    // KeyFieldsContext object created within policies.identify (called below).\n    // In addition to reading from the existing context.store (thanks to the\n    // policies.readField(options, context) line at the very bottom), this\n    // version of readField can read from Reference objects that are currently\n    // pending in context.incomingById, which is important whenever keyFields\n    // need to be extracted from a child object that processSelectionSet has\n    // turned into a Reference.\n    const readField = (...args) => {\n      const options = normalizeReadFieldOptions(args, incoming, context.variables);\n      if (isReference(options.from)) {\n        const info = context.incomingById.get(options.from.__ref);\n        if (info) {\n          const result = policies.readField({\n            ...options,\n            from: info.storeObject\n          }, context);\n          if (result !== void 0) {\n            return result;\n          }\n        }\n      }\n      return policies.readField(options, context);\n    };\n    const fieldNodeSet = new Set();\n    this.flattenFields(selectionSet, result,\n    // This WriteContext will be the default context value for fields returned\n    // by the flattenFields method, but some fields may be assigned a modified\n    // context, depending on the presence of @client and other directives.\n    context, typename).forEach((context, field) => {\n      const resultFieldKey = resultKeyNameFromField(field);\n      const value = result[resultFieldKey];\n      fieldNodeSet.add(field);\n      if (value !== void 0) {\n        const storeFieldName = policies.getStoreFieldName({\n          typename,\n          fieldName: field.name.value,\n          field,\n          variables: context.variables\n        });\n        const childTree = getChildMergeTree(mergeTree, storeFieldName);\n        let incomingValue = this.processFieldValue(value, field,\n        // Reset context.clientOnly and context.deferred to their default\n        // values before processing nested selection sets.\n        field.selectionSet ? getContextFlavor(context, false, false) : context, childTree);\n        // To determine if this field holds a child object with a merge function\n        // defined in its type policy (see PR #7070), we need to figure out the\n        // child object's __typename.\n        let childTypename;\n        // The field's value can be an object that has a __typename only if the\n        // field has a selection set. Otherwise incomingValue is scalar.\n        if (field.selectionSet && (isReference(incomingValue) || storeValueIsStoreObject(incomingValue))) {\n          childTypename = readField(\"__typename\", incomingValue);\n        }\n        const merge = policies.getMergeFunction(typename, field.name.value, childTypename);\n        if (merge) {\n          childTree.info = {\n            // TODO Check compatibility against any existing childTree.field?\n            field,\n            typename,\n            merge\n          };\n        } else {\n          maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n        }\n        incoming = context.merge(incoming, {\n          [storeFieldName]: incomingValue\n        });\n      } else if (__DEV__ && !context.clientOnly && !context.deferred && !addTypenameToDocument.added(field) &&\n      // If the field has a read function, it may be a synthetic field or\n      // provide a default value, so its absence from the written data should\n      // not be cause for alarm.\n      !policies.getReadFunction(typename, field.name.value)) {\n        invariant.error(106, resultKeyNameFromField(field), result);\n      }\n    });\n    // Identify the result object, even if dataId was already provided,\n    // since we always need keyObject below.\n    try {\n      const [id, keyObject] = policies.identify(result, {\n        typename,\n        selectionSet,\n        fragmentMap: context.fragmentMap,\n        storeObject: incoming,\n        readField\n      });\n      // If dataId was not provided, fall back to the id just generated by\n      // policies.identify.\n      dataId = dataId || id;\n      // Write any key fields that were used during identification, even if\n      // they were not mentioned in the original query.\n      if (keyObject) {\n        // TODO Reverse the order of the arguments?\n        incoming = context.merge(incoming, keyObject);\n      }\n    } catch (e) {\n      // If dataId was provided, tolerate failure of policies.identify.\n      if (!dataId) throw e;\n    }\n    if (\"string\" === typeof dataId) {\n      const dataRef = makeReference(dataId);\n      // Avoid processing the same entity object using the same selection\n      // set more than once. We use an array instead of a Set since most\n      // entity IDs will be written using only one selection set, so the\n      // size of this array is likely to be very small, meaning indexOf is\n      // likely to be faster than Set.prototype.has.\n      const sets = context.written[dataId] || (context.written[dataId] = []);\n      if (sets.indexOf(selectionSet) >= 0) return dataRef;\n      sets.push(selectionSet);\n      // If we're about to write a result object into the store, but we\n      // happen to know that the exact same (===) result object would be\n      // returned if we were to reread the result with the same inputs,\n      // then we can skip the rest of the processSelectionSet work for\n      // this object, and immediately return a Reference to it.\n      if (this.reader && this.reader.isFresh(result, dataRef, selectionSet, context)) {\n        return dataRef;\n      }\n      const previous = context.incomingById.get(dataId);\n      if (previous) {\n        previous.storeObject = context.merge(previous.storeObject, incoming);\n        previous.mergeTree = mergeMergeTrees(previous.mergeTree, mergeTree);\n        fieldNodeSet.forEach(field => previous.fieldNodeSet.add(field));\n      } else {\n        context.incomingById.set(dataId, {\n          storeObject: incoming,\n          // Save a reference to mergeTree only if it is not empty, because\n          // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and\n          // reused for entirely different parts of the result tree.\n          mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n          fieldNodeSet\n        });\n      }\n      return dataRef;\n    }\n    return incoming;\n  }\n  processFieldValue(value, field, context, mergeTree) {\n    if (!field.selectionSet || value === null) {\n      // In development, we need to clone scalar values so that they can be\n      // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n      // it's cheaper to store the scalar values directly in the cache.\n      return __DEV__ ? cloneDeep(value) : value;\n    }\n    if (isArray(value)) {\n      return value.map((item, i) => {\n        const value = this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));\n        maybeRecycleChildMergeTree(mergeTree, i);\n        return value;\n      });\n    }\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context,\n      mergeTree\n    });\n  }\n  // Implements https://spec.graphql.org/draft/#sec-Field-Collection, but with\n  // some additions for tracking @client and @defer directives.\n  flattenFields(selectionSet, result, context, typename = getTypenameFromResult(result, selectionSet, context.fragmentMap)) {\n    const fieldMap = new Map();\n    const {\n      policies\n    } = this.cache;\n    const limitingTrie = new Trie(false); // No need for WeakMap, since limitingTrie does not escape.\n    (function flatten(selectionSet, inheritedContext) {\n      const visitedNode = limitingTrie.lookup(selectionSet,\n      // Because we take inheritedClientOnly and inheritedDeferred into\n      // consideration here (in addition to selectionSet), it's possible for\n      // the same selection set to be flattened more than once, if it appears\n      // in the query with different @client and/or @directive configurations.\n      inheritedContext.clientOnly, inheritedContext.deferred);\n      if (visitedNode.visited) return;\n      visitedNode.visited = true;\n      selectionSet.selections.forEach(selection => {\n        if (!shouldInclude(selection, context.variables)) return;\n        let {\n          clientOnly,\n          deferred\n        } = inheritedContext;\n        if (\n        // Since the presence of @client or @defer on this field can only\n        // cause clientOnly or deferred to become true, we can skip the\n        // forEach loop if both clientOnly and deferred are already true.\n        !(clientOnly && deferred) && isNonEmptyArray(selection.directives)) {\n          selection.directives.forEach(dir => {\n            const name = dir.name.value;\n            if (name === \"client\") clientOnly = true;\n            if (name === \"defer\") {\n              const args = argumentsObjectFromField(dir, context.variables);\n              // The @defer directive takes an optional args.if boolean\n              // argument, similar to @include(if: boolean). Note that\n              // @defer(if: false) does not make context.deferred false, but\n              // instead behaves as if there was no @defer directive.\n              if (!args || args.if !== false) {\n                deferred = true;\n              }\n              // TODO In the future, we may want to record args.label using\n              // context.deferred, if a label is specified.\n            }\n          });\n        }\n        if (isField(selection)) {\n          const existing = fieldMap.get(selection);\n          if (existing) {\n            // If this field has been visited along another recursive path\n            // before, the final context should have clientOnly or deferred set\n            // to true only if *all* paths have the directive (hence the &&).\n            clientOnly = clientOnly && existing.clientOnly;\n            deferred = deferred && existing.deferred;\n          }\n          fieldMap.set(selection, getContextFlavor(context, clientOnly, deferred));\n        } else {\n          const fragment = getFragmentFromSelection(selection, context.lookupFragment);\n          if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n            throw newInvariantError(107, selection.name.value);\n          }\n          if (fragment && policies.fragmentMatches(fragment, typename, result, context.variables)) {\n            flatten(fragment.selectionSet, getContextFlavor(context, clientOnly, deferred));\n          }\n        }\n      });\n    })(selectionSet, context);\n    return fieldMap;\n  }\n  applyMerges(mergeTree, existing, incoming, context, getStorageArgs) {\n    if (mergeTree.map.size && !isReference(incoming)) {\n      const e =\n      // Items in the same position in different arrays are not\n      // necessarily related to each other, so when incoming is an array\n      // we process its elements as if there was no existing data.\n      !isArray(incoming) && (\n      // Likewise, existing must be either a Reference or a StoreObject\n      // in order for its fields to be safe to merge with the fields of\n      // the incoming object.\n      isReference(existing) || storeValueIsStoreObject(existing)) ? existing : void 0;\n      // This narrowing is implied by mergeTree.map.size > 0 and\n      // !isReference(incoming), though TypeScript understandably cannot\n      // hope to infer this type.\n      const i = incoming;\n      // The options.storage objects provided to read and merge functions\n      // are derived from the identity of the parent object plus a\n      // sequence of storeFieldName strings/numbers identifying the nested\n      // field name path of each field value to be merged.\n      if (e && !getStorageArgs) {\n        getStorageArgs = [isReference(e) ? e.__ref : e];\n      }\n      // It's possible that applying merge functions to this subtree will\n      // not change the incoming data, so this variable tracks the fields\n      // that did change, so we can create a new incoming object when (and\n      // only when) at least one incoming field has changed. We use a Map\n      // to preserve the type of numeric keys.\n      let changedFields;\n      const getValue = (from, name) => {\n        return isArray(from) ? typeof name === \"number\" ? from[name] : void 0 : context.store.getFieldValue(from, String(name));\n      };\n      mergeTree.map.forEach((childTree, storeFieldName) => {\n        const eVal = getValue(e, storeFieldName);\n        const iVal = getValue(i, storeFieldName);\n        // If we have no incoming data, leave any existing data untouched.\n        if (void 0 === iVal) return;\n        if (getStorageArgs) {\n          getStorageArgs.push(storeFieldName);\n        }\n        const aVal = this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);\n        if (aVal !== iVal) {\n          changedFields = changedFields || new Map();\n          changedFields.set(storeFieldName, aVal);\n        }\n        if (getStorageArgs) {\n          invariant(getStorageArgs.pop() === storeFieldName);\n        }\n      });\n      if (changedFields) {\n        // Shallow clone i so we can add changed fields to it.\n        incoming = isArray(i) ? i.slice(0) : {\n          ...i\n        };\n        changedFields.forEach((value, name) => {\n          incoming[name] = value;\n        });\n      }\n    }\n    if (mergeTree.info) {\n      return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && context.store.getStorage(...getStorageArgs));\n    }\n    return incoming;\n  }\n}\nconst emptyMergeTreePool = [];\nfunction getChildMergeTree({\n  map\n}, name) {\n  if (!map.has(name)) {\n    map.set(name, emptyMergeTreePool.pop() || {\n      map: new Map()\n    });\n  }\n  return map.get(name);\n}\nfunction mergeMergeTrees(left, right) {\n  if (left === right || !right || mergeTreeIsEmpty(right)) return left;\n  if (!left || mergeTreeIsEmpty(left)) return right;\n  const info = left.info && right.info ? {\n    ...left.info,\n    ...right.info\n  } : left.info || right.info;\n  const needToMergeMaps = left.map.size && right.map.size;\n  const map = needToMergeMaps ? new Map() : left.map.size ? left.map : right.map;\n  const merged = {\n    info,\n    map\n  };\n  if (needToMergeMaps) {\n    const remainingRightKeys = new Set(right.map.keys());\n    left.map.forEach((leftTree, key) => {\n      merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n      remainingRightKeys.delete(key);\n    });\n    remainingRightKeys.forEach(key => {\n      merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));\n    });\n  }\n  return merged;\n}\nfunction mergeTreeIsEmpty(tree) {\n  return !tree || !(tree.info || tree.map.size);\n}\nfunction maybeRecycleChildMergeTree({\n  map\n}, name) {\n  const childTree = map.get(name);\n  if (childTree && mergeTreeIsEmpty(childTree)) {\n    emptyMergeTreePool.push(childTree);\n    map.delete(name);\n  }\n}\nconst warnings = new Set();\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {\n  const getChild = objOrRef => {\n    const child = store.getFieldValue(objOrRef, storeFieldName);\n    return typeof child === \"object\" && child;\n  };\n  const existing = getChild(existingRef);\n  if (!existing) return;\n  const incoming = getChild(incomingObj);\n  if (!incoming) return;\n  // It's always safe to replace a reference, since it refers to data\n  // safely stored elsewhere.\n  if (isReference(existing)) return;\n  // If the values are structurally equivalent, we do not need to worry\n  // about incoming replacing existing.\n  if (equal(existing, incoming)) return;\n  // If we're replacing every key of the existing object, then the\n  // existing data would be overwritten even if the objects were\n  // normalized, so warning would not be helpful here.\n  if (Object.keys(existing).every(key => store.getFieldValue(incoming, key) !== void 0)) {\n    return;\n  }\n  const parentType = store.getFieldValue(existingRef, \"__typename\") || store.getFieldValue(incomingObj, \"__typename\");\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const typeDotName = `${parentType}.${fieldName}`;\n  // Avoid warning more than once for the same type and field name.\n  if (warnings.has(typeDotName)) return;\n  warnings.add(typeDotName);\n  const childTypenames = [];\n  // Arrays do not have __typename fields, and always need a custom merge\n  // function, even if their elements are normalized entities.\n  if (!isArray(existing) && !isArray(incoming)) {\n    [existing, incoming].forEach(child => {\n      const typename = store.getFieldValue(child, \"__typename\");\n      if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n        childTypenames.push(typename);\n      }\n    });\n  }\n  __DEV__ && invariant.warn(108, fieldName, parentType, childTypenames.length ? \"either ensure all objects of type \" + childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \" : \"\", typeDotName, {\n    ...existing\n  }, {\n    ...incoming\n  });\n}\nfunction getTypenameFromResult(result, selectionSet, fragmentMap) {\n  let fragments;\n  for (const selection of selectionSet.selections) {\n    if (isField(selection)) {\n      if (selection.name.value === \"__typename\") {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else if (fragments) {\n      fragments.push(selection);\n    } else {\n      fragments = [selection];\n    }\n  }\n  if (typeof result.__typename === \"string\") {\n    return result.__typename;\n  }\n  if (fragments) {\n    for (const selection of fragments) {\n      const typename = getTypenameFromResult(result, getFragmentFromSelection(selection, fragmentMap).selectionSet, fragmentMap);\n      if (typeof typename === \"string\") {\n        return typename;\n      }\n    }\n  }\n}","map":{"version":3,"names":["equal","Trie","Kind","addTypenameToDocument","canonicalStringify","isReference","__DEV__","argumentsObjectFromField","cloneDeep","getDefaultValues","getFragmentFromSelection","getOperationDefinition","isArray","isField","isNonEmptyArray","makeReference","resultKeyNameFromField","shouldInclude","invariant","newInvariantError","extractFragmentContext","fieldNameFromStoreName","makeProcessedFieldsMerger","storeValueIsStoreObject","normalizeReadFieldOptions","getContextFlavor","context","clientOnly","deferred","key","flavored","flavors","get","set","StoreWriter","cache","reader","fragments","constructor","writeToStore","store","query","result","dataId","variables","overwrite","operationDefinition","merger","written","merge","existing","incoming","varString","incomingById","Map","ref","processSelectionSet","selectionSet","mergeTree","map","forEach","storeObject","fieldNodeSet","entityRef","size","applied","applyMerges","fieldsWithSelectionSets","field","name","value","hasSelectionSet","storeFieldName","hasMergeFunction","childTree","Boolean","info","Object","keys","warnAboutDataLoss","retain","__ref","policies","typename","rootTypenamesById","getTypenameFromResult","fragmentMap","__typename","readField","args","options","from","Set","flattenFields","resultFieldKey","add","getStoreFieldName","fieldName","getChildMergeTree","incomingValue","processFieldValue","childTypename","getMergeFunction","maybeRecycleChildMergeTree","added","getReadFunction","error","id","keyObject","identify","e","dataRef","sets","indexOf","push","isFresh","previous","mergeMergeTrees","mergeTreeIsEmpty","item","i","fieldMap","limitingTrie","flatten","inheritedContext","visitedNode","lookup","visited","selections","selection","directives","dir","if","fragment","lookupFragment","kind","FRAGMENT_SPREAD","fragmentMatches","getStorageArgs","changedFields","getValue","getFieldValue","String","eVal","iVal","aVal","pop","slice","runMergeFunction","getStorage","emptyMergeTreePool","has","left","right","needToMergeMaps","merged","remainingRightKeys","leftTree","delete","tree","warnings","existingRef","incomingObj","getChild","objOrRef","child","every","parentType","typeDotName","childTypenames","includes","warn","length","join"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/cache/inmemory/writeToStore.ts"],"sourcesContent":["import { equal } from \"@wry/equality\";\nimport { Trie } from \"@wry/trie\";\nimport type {\n  FieldNode,\n  FragmentSpreadNode,\n  InlineFragmentNode,\n  SelectionSetNode,\n} from \"graphql\";\nimport { Kind } from \"graphql\";\n\nimport type { Cache, OperationVariables } from \"@apollo/client\";\nimport type {\n  Reference,\n  StoreObject,\n  StoreValue,\n} from \"@apollo/client/utilities\";\nimport {\n  addTypenameToDocument,\n  canonicalStringify,\n  isReference,\n} from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport type {\n  FragmentMap,\n  FragmentMapFunction,\n} from \"@apollo/client/utilities/internal\";\nimport {\n  argumentsObjectFromField,\n  cloneDeep,\n  getDefaultValues,\n  getFragmentFromSelection,\n  getOperationDefinition,\n  isArray,\n  isField,\n  isNonEmptyArray,\n  makeReference,\n  resultKeyNameFromField,\n  shouldInclude,\n} from \"@apollo/client/utilities/internal\";\nimport {\n  invariant,\n  newInvariantError,\n} from \"@apollo/client/utilities/invariant\";\n\nimport type { ReadFieldFunction } from \"../core/types/common.js\";\n\nimport type { EntityStore } from \"./entityStore.js\";\nimport {\n  extractFragmentContext,\n  fieldNameFromStoreName,\n  makeProcessedFieldsMerger,\n  storeValueIsStoreObject,\n} from \"./helpers.js\";\nimport type { InMemoryCache } from \"./inMemoryCache.js\";\nimport { normalizeReadFieldOptions } from \"./policies.js\";\nimport type { StoreReader } from \"./readFromStore.js\";\nimport type {\n  InMemoryCacheConfig,\n  MergeTree,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from \"./types.js\";\n\nexport interface WriteContext extends ReadMergeModifyContext {\n  readonly written: {\n    [dataId: string]: SelectionSetNode[];\n  };\n  readonly fragmentMap: FragmentMap;\n  lookupFragment: FragmentMapFunction;\n  // General-purpose deep-merge function for use during writes.\n  merge<T>(existing: T, incoming: T): T;\n  // If true, merge functions will be called with undefined existing data.\n  overwrite: boolean;\n  incomingById: Map<\n    string,\n    {\n      storeObject: StoreObject;\n      mergeTree?: MergeTree;\n      fieldNodeSet: Set<FieldNode>;\n    }\n  >;\n  // Directive metadata for @client and @defer. We could use a bitfield for this\n  // information to save some space, and use that bitfield number as the keys in\n  // the context.flavors Map.\n  clientOnly: boolean;\n  deferred: boolean;\n  flavors: Map<string, FlavorableWriteContext>;\n}\n\ntype FlavorableWriteContext = Pick<\n  WriteContext,\n  \"clientOnly\" | \"deferred\" | \"flavors\"\n>;\n\n// Since there are only four possible combinations of context.clientOnly and\n// context.deferred values, we should need at most four \"flavors\" of any given\n// WriteContext. To avoid creating multiple copies of the same context, we cache\n// the contexts in the context.flavors Map (shared by all flavors) according to\n// their clientOnly and deferred values (always in that order).\nfunction getContextFlavor<TContext extends FlavorableWriteContext>(\n  context: TContext,\n  clientOnly: TContext[\"clientOnly\"],\n  deferred: TContext[\"deferred\"]\n): TContext {\n  const key = `${clientOnly}${deferred}`;\n  let flavored = context.flavors.get(key);\n  if (!flavored) {\n    context.flavors.set(\n      key,\n      (flavored =\n        context.clientOnly === clientOnly && context.deferred === deferred ?\n          context\n        : {\n            ...context,\n            clientOnly,\n            deferred,\n          })\n    );\n  }\n  return flavored as TContext;\n}\n\ninterface ProcessSelectionSetOptions {\n  dataId?: string;\n  result: Record<string, any>;\n  selectionSet: SelectionSetNode;\n  context: WriteContext;\n  mergeTree: MergeTree;\n}\n\nexport class StoreWriter {\n  constructor(\n    public readonly cache: InMemoryCache,\n    private reader?: StoreReader,\n    private fragments?: InMemoryCacheConfig[\"fragments\"]\n  ) {}\n\n  public writeToStore<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    store: NormalizedCache,\n    {\n      query,\n      result,\n      dataId,\n      variables,\n      overwrite,\n    }: Cache.WriteOptions<TData, TVariables>\n  ): Reference | undefined {\n    const operationDefinition = getOperationDefinition(query)!;\n    const merger = makeProcessedFieldsMerger();\n\n    variables = {\n      ...getDefaultValues(operationDefinition),\n      ...variables!,\n    };\n\n    const context: WriteContext = {\n      store,\n      written: {},\n      merge<T>(existing: T, incoming: T) {\n        return merger.merge(existing, incoming) as T;\n      },\n      variables: variables as OperationVariables,\n      varString: canonicalStringify(variables),\n      ...extractFragmentContext(query, this.fragments),\n      overwrite: !!overwrite,\n      incomingById: new Map(),\n      clientOnly: false,\n      deferred: false,\n      flavors: new Map(),\n    };\n\n    const ref = this.processSelectionSet({\n      result: result || {},\n      dataId,\n      selectionSet: operationDefinition.selectionSet,\n      mergeTree: { map: new Map() },\n      context,\n    });\n\n    if (!isReference(ref)) {\n      throw newInvariantError(`Could not identify object %s`, result);\n    }\n\n    // So far, the store has not been modified, so now it's time to process\n    // context.incomingById and merge those incoming fields into context.store.\n    context.incomingById.forEach(\n      ({ storeObject, mergeTree, fieldNodeSet }, dataId) => {\n        const entityRef = makeReference(dataId);\n\n        if (mergeTree && mergeTree.map.size) {\n          const applied = this.applyMerges(\n            mergeTree,\n            entityRef,\n            storeObject,\n            context\n          );\n          if (isReference(applied)) {\n            // Assume References returned by applyMerges have already been merged\n            // into the store. See makeMergeObjectsFunction in policies.ts for an\n            // example of how this can happen.\n            return;\n          }\n          // Otherwise, applyMerges returned a StoreObject, whose fields we should\n          // merge into the store (see store.merge statement below).\n          storeObject = applied;\n        }\n\n        if (__DEV__ && !context.overwrite) {\n          const fieldsWithSelectionSets: Record<string, true> = {};\n          fieldNodeSet.forEach((field) => {\n            if (field.selectionSet) {\n              fieldsWithSelectionSets[field.name.value] = true;\n            }\n          });\n\n          const hasSelectionSet = (storeFieldName: string) =>\n            fieldsWithSelectionSets[fieldNameFromStoreName(storeFieldName)] ===\n            true;\n\n          const hasMergeFunction = (storeFieldName: string) => {\n            const childTree = mergeTree && mergeTree.map.get(storeFieldName);\n            return Boolean(childTree && childTree.info && childTree.info.merge);\n          };\n\n          Object.keys(storeObject).forEach((storeFieldName) => {\n            // If a merge function was defined for this field, trust that it\n            // did the right thing about (not) clobbering data. If the field\n            // has no selection set, it's a scalar field, so it doesn't need\n            // a merge function (even if it's an object, like JSON data).\n            if (\n              hasSelectionSet(storeFieldName) &&\n              !hasMergeFunction(storeFieldName)\n            ) {\n              warnAboutDataLoss(\n                entityRef,\n                storeObject,\n                storeFieldName,\n                context.store\n              );\n            }\n          });\n        }\n\n        store.merge(dataId, storeObject);\n      }\n    );\n\n    // Any IDs written explicitly to the cache will be retained as\n    // reachable root IDs for garbage collection purposes. Although this\n    // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n    // retainment counts are effectively ignored because cache.gc() always\n    // includes them in its root ID set.\n    store.retain(ref.__ref);\n\n    return ref;\n  }\n\n  private processSelectionSet({\n    dataId,\n    result,\n    selectionSet,\n    context,\n    // This object allows processSelectionSet to report useful information\n    // to its callers without explicitly returning that information.\n    mergeTree,\n  }: ProcessSelectionSetOptions): StoreObject | Reference {\n    const { policies } = this.cache;\n\n    // This variable will be repeatedly updated using context.merge to\n    // accumulate all fields that need to be written into the store.\n    let incoming: StoreObject = {};\n\n    // If typename was not passed in, infer it. Note that typename is\n    // always passed in for tricky-to-infer cases such as \"Query\" for\n    // ROOT_QUERY.\n    const typename: string | undefined =\n      (dataId && policies.rootTypenamesById[dataId]) ||\n      getTypenameFromResult(result, selectionSet, context.fragmentMap) ||\n      (dataId && (context.store.get(dataId, \"__typename\") as string));\n\n    if (\"string\" === typeof typename) {\n      incoming.__typename = typename;\n    }\n\n    // This readField function will be passed as context.readField in the\n    // KeyFieldsContext object created within policies.identify (called below).\n    // In addition to reading from the existing context.store (thanks to the\n    // policies.readField(options, context) line at the very bottom), this\n    // version of readField can read from Reference objects that are currently\n    // pending in context.incomingById, which is important whenever keyFields\n    // need to be extracted from a child object that processSelectionSet has\n    // turned into a Reference.\n    const readField: ReadFieldFunction = (...args) => {\n      const options = normalizeReadFieldOptions(\n        args,\n        incoming,\n        context.variables\n      );\n\n      if (isReference(options.from)) {\n        const info = context.incomingById.get(options.from.__ref);\n        if (info) {\n          const result = policies.readField(\n            {\n              ...options,\n              from: info.storeObject,\n            },\n            context\n          );\n\n          if (result !== void 0) {\n            return result;\n          }\n        }\n      }\n\n      return policies.readField(options, context);\n    };\n\n    const fieldNodeSet = new Set<FieldNode>();\n\n    this.flattenFields(\n      selectionSet,\n      result,\n      // This WriteContext will be the default context value for fields returned\n      // by the flattenFields method, but some fields may be assigned a modified\n      // context, depending on the presence of @client and other directives.\n      context,\n      typename\n    ).forEach((context, field) => {\n      const resultFieldKey = resultKeyNameFromField(field);\n      const value = result[resultFieldKey];\n\n      fieldNodeSet.add(field);\n\n      if (value !== void 0) {\n        const storeFieldName = policies.getStoreFieldName({\n          typename,\n          fieldName: field.name.value,\n          field,\n          variables: context.variables,\n        });\n\n        const childTree = getChildMergeTree(mergeTree, storeFieldName);\n\n        let incomingValue = this.processFieldValue(\n          value,\n          field,\n          // Reset context.clientOnly and context.deferred to their default\n          // values before processing nested selection sets.\n          field.selectionSet ?\n            getContextFlavor(context, false, false)\n          : context,\n          childTree\n        );\n\n        // To determine if this field holds a child object with a merge function\n        // defined in its type policy (see PR #7070), we need to figure out the\n        // child object's __typename.\n        let childTypename: string | undefined;\n\n        // The field's value can be an object that has a __typename only if the\n        // field has a selection set. Otherwise incomingValue is scalar.\n        if (\n          field.selectionSet &&\n          (isReference(incomingValue) || storeValueIsStoreObject(incomingValue))\n        ) {\n          childTypename = readField<string>(\"__typename\", incomingValue);\n        }\n\n        const merge = policies.getMergeFunction(\n          typename,\n          field.name.value,\n          childTypename\n        );\n\n        if (merge) {\n          childTree.info = {\n            // TODO Check compatibility against any existing childTree.field?\n            field,\n            typename,\n            merge,\n          };\n        } else {\n          maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n        }\n\n        incoming = context.merge(incoming, {\n          [storeFieldName]: incomingValue,\n        });\n      } else if (\n        __DEV__ &&\n        !context.clientOnly &&\n        !context.deferred &&\n        !addTypenameToDocument.added(field) &&\n        // If the field has a read function, it may be a synthetic field or\n        // provide a default value, so its absence from the written data should\n        // not be cause for alarm.\n        !policies.getReadFunction(typename, field.name.value)\n      ) {\n        invariant.error(\n          `Missing field '%s' while writing result %o`,\n          resultKeyNameFromField(field),\n          result\n        );\n      }\n    });\n\n    // Identify the result object, even if dataId was already provided,\n    // since we always need keyObject below.\n    try {\n      const [id, keyObject] = policies.identify(result, {\n        typename,\n        selectionSet,\n        fragmentMap: context.fragmentMap,\n        storeObject: incoming,\n        readField,\n      });\n\n      // If dataId was not provided, fall back to the id just generated by\n      // policies.identify.\n      dataId = dataId || id;\n\n      // Write any key fields that were used during identification, even if\n      // they were not mentioned in the original query.\n      if (keyObject) {\n        // TODO Reverse the order of the arguments?\n        incoming = context.merge(incoming, keyObject);\n      }\n    } catch (e) {\n      // If dataId was provided, tolerate failure of policies.identify.\n      if (!dataId) throw e;\n    }\n\n    if (\"string\" === typeof dataId) {\n      const dataRef = makeReference(dataId);\n\n      // Avoid processing the same entity object using the same selection\n      // set more than once. We use an array instead of a Set since most\n      // entity IDs will be written using only one selection set, so the\n      // size of this array is likely to be very small, meaning indexOf is\n      // likely to be faster than Set.prototype.has.\n      const sets = context.written[dataId] || (context.written[dataId] = []);\n      if (sets.indexOf(selectionSet) >= 0) return dataRef;\n      sets.push(selectionSet);\n\n      // If we're about to write a result object into the store, but we\n      // happen to know that the exact same (===) result object would be\n      // returned if we were to reread the result with the same inputs,\n      // then we can skip the rest of the processSelectionSet work for\n      // this object, and immediately return a Reference to it.\n      if (\n        this.reader &&\n        this.reader.isFresh(result, dataRef, selectionSet, context)\n      ) {\n        return dataRef;\n      }\n\n      const previous = context.incomingById.get(dataId);\n      if (previous) {\n        previous.storeObject = context.merge(previous.storeObject, incoming);\n        previous.mergeTree = mergeMergeTrees(previous.mergeTree, mergeTree);\n        fieldNodeSet.forEach((field) => previous.fieldNodeSet.add(field));\n      } else {\n        context.incomingById.set(dataId, {\n          storeObject: incoming,\n          // Save a reference to mergeTree only if it is not empty, because\n          // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and\n          // reused for entirely different parts of the result tree.\n          mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n          fieldNodeSet,\n        });\n      }\n\n      return dataRef;\n    }\n\n    return incoming;\n  }\n\n  private processFieldValue(\n    value: any,\n    field: FieldNode,\n    context: WriteContext,\n    mergeTree: MergeTree\n  ): StoreValue {\n    if (!field.selectionSet || value === null) {\n      // In development, we need to clone scalar values so that they can be\n      // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n      // it's cheaper to store the scalar values directly in the cache.\n      return __DEV__ ? cloneDeep(value) : value;\n    }\n\n    if (isArray(value)) {\n      return value.map((item, i) => {\n        const value = this.processFieldValue(\n          item,\n          field,\n          context,\n          getChildMergeTree(mergeTree, i)\n        );\n        maybeRecycleChildMergeTree(mergeTree, i);\n        return value;\n      });\n    }\n\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context,\n      mergeTree,\n    });\n  }\n\n  // Implements https://spec.graphql.org/draft/#sec-Field-Collection, but with\n  // some additions for tracking @client and @defer directives.\n  private flattenFields<\n    TContext extends Pick<\n      WriteContext,\n      | \"clientOnly\"\n      | \"deferred\"\n      | \"flavors\"\n      | \"fragmentMap\"\n      | \"lookupFragment\"\n      | \"variables\"\n    >,\n  >(\n    selectionSet: SelectionSetNode,\n    result: Record<string, any>,\n    context: TContext,\n    typename = getTypenameFromResult(result, selectionSet, context.fragmentMap)\n  ): Map<FieldNode, TContext> {\n    const fieldMap = new Map<FieldNode, TContext>();\n    const { policies } = this.cache;\n\n    const limitingTrie = new Trie<{\n      // Tracks whether (selectionSet, clientOnly, deferred) has been flattened\n      // before. The GraphQL specification only uses the fragment name for\n      // skipping previously visited fragments, but the top-level fragment\n      // selection set corresponds 1:1 with the fagment name (and is slightly\n      // easier too work with), and we need to consider clientOnly and deferred\n      // values as well, potentially revisiting selection sets that were\n      // previously visited with different inherited configurations of those\n      // directives.\n      visited?: boolean;\n    }>(false); // No need for WeakMap, since limitingTrie does not escape.\n\n    (function flatten(\n      this: void,\n      selectionSet: SelectionSetNode,\n      inheritedContext: TContext\n    ) {\n      const visitedNode = limitingTrie.lookup(\n        selectionSet,\n        // Because we take inheritedClientOnly and inheritedDeferred into\n        // consideration here (in addition to selectionSet), it's possible for\n        // the same selection set to be flattened more than once, if it appears\n        // in the query with different @client and/or @directive configurations.\n        inheritedContext.clientOnly,\n        inheritedContext.deferred\n      );\n      if (visitedNode.visited) return;\n      visitedNode.visited = true;\n\n      selectionSet.selections.forEach((selection) => {\n        if (!shouldInclude(selection, context.variables)) return;\n\n        let { clientOnly, deferred } = inheritedContext;\n        if (\n          // Since the presence of @client or @defer on this field can only\n          // cause clientOnly or deferred to become true, we can skip the\n          // forEach loop if both clientOnly and deferred are already true.\n          !(clientOnly && deferred) &&\n          isNonEmptyArray(selection.directives)\n        ) {\n          selection.directives.forEach((dir) => {\n            const name = dir.name.value;\n            if (name === \"client\") clientOnly = true;\n            if (name === \"defer\") {\n              const args = argumentsObjectFromField(dir, context.variables);\n              // The @defer directive takes an optional args.if boolean\n              // argument, similar to @include(if: boolean). Note that\n              // @defer(if: false) does not make context.deferred false, but\n              // instead behaves as if there was no @defer directive.\n              if (!args || (args as { if?: boolean }).if !== false) {\n                deferred = true;\n              }\n              // TODO In the future, we may want to record args.label using\n              // context.deferred, if a label is specified.\n            }\n          });\n        }\n\n        if (isField(selection)) {\n          const existing = fieldMap.get(selection);\n          if (existing) {\n            // If this field has been visited along another recursive path\n            // before, the final context should have clientOnly or deferred set\n            // to true only if *all* paths have the directive (hence the &&).\n            clientOnly = clientOnly && existing.clientOnly;\n            deferred = deferred && existing.deferred;\n          }\n\n          fieldMap.set(\n            selection,\n            getContextFlavor(context, clientOnly, deferred)\n          );\n        } else {\n          const fragment = getFragmentFromSelection(\n            selection,\n            context.lookupFragment\n          );\n\n          if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n            throw newInvariantError(\n              `No fragment named %s`,\n              selection.name.value\n            );\n          }\n\n          if (\n            fragment &&\n            policies.fragmentMatches(\n              fragment,\n              typename,\n              result,\n              context.variables\n            )\n          ) {\n            flatten(\n              fragment.selectionSet,\n              getContextFlavor(context, clientOnly, deferred)\n            );\n          }\n        }\n      });\n    })(selectionSet, context);\n\n    return fieldMap;\n  }\n\n  private applyMerges<T extends StoreValue>(\n    mergeTree: MergeTree,\n    existing: StoreValue,\n    incoming: T,\n    context: WriteContext,\n    getStorageArgs?: Parameters<EntityStore[\"getStorage\"]>\n  ): T | Reference {\n    if (mergeTree.map.size && !isReference(incoming)) {\n      const e: StoreObject | Reference | undefined =\n        // Items in the same position in different arrays are not\n        // necessarily related to each other, so when incoming is an array\n        // we process its elements as if there was no existing data.\n        (\n          !isArray(incoming) &&\n          // Likewise, existing must be either a Reference or a StoreObject\n          // in order for its fields to be safe to merge with the fields of\n          // the incoming object.\n          (isReference(existing) || storeValueIsStoreObject(existing))\n        ) ?\n          existing\n        : void 0;\n\n      // This narrowing is implied by mergeTree.map.size > 0 and\n      // !isReference(incoming), though TypeScript understandably cannot\n      // hope to infer this type.\n      const i = incoming as StoreObject | StoreValue[];\n\n      // The options.storage objects provided to read and merge functions\n      // are derived from the identity of the parent object plus a\n      // sequence of storeFieldName strings/numbers identifying the nested\n      // field name path of each field value to be merged.\n      if (e && !getStorageArgs) {\n        getStorageArgs = [isReference(e) ? e.__ref : e];\n      }\n\n      // It's possible that applying merge functions to this subtree will\n      // not change the incoming data, so this variable tracks the fields\n      // that did change, so we can create a new incoming object when (and\n      // only when) at least one incoming field has changed. We use a Map\n      // to preserve the type of numeric keys.\n      let changedFields: Map<string | number, StoreValue> | undefined;\n\n      const getValue = (\n        from: typeof e | typeof i,\n        name: string | number\n      ): StoreValue => {\n        return (\n          isArray(from) ?\n            typeof name === \"number\" ?\n              from[name]\n            : void 0\n          : context.store.getFieldValue(from, String(name))\n        );\n      };\n\n      mergeTree.map.forEach((childTree, storeFieldName) => {\n        const eVal = getValue(e, storeFieldName);\n        const iVal = getValue(i, storeFieldName);\n        // If we have no incoming data, leave any existing data untouched.\n        if (void 0 === iVal) return;\n        if (getStorageArgs) {\n          getStorageArgs.push(storeFieldName);\n        }\n        const aVal = this.applyMerges(\n          childTree,\n          eVal,\n          iVal,\n          context,\n          getStorageArgs\n        );\n        if (aVal !== iVal) {\n          changedFields = changedFields || new Map();\n          changedFields.set(storeFieldName, aVal);\n        }\n        if (getStorageArgs) {\n          invariant(getStorageArgs.pop() === storeFieldName);\n        }\n      });\n\n      if (changedFields) {\n        // Shallow clone i so we can add changed fields to it.\n        incoming = (isArray(i) ? i.slice(0) : { ...i }) as T;\n        changedFields.forEach((value, name) => {\n          (incoming as any)[name] = value;\n        });\n      }\n    }\n\n    if (mergeTree.info) {\n      return this.cache.policies.runMergeFunction(\n        existing,\n        incoming,\n        mergeTree.info,\n        context,\n        getStorageArgs && context.store.getStorage(...getStorageArgs)\n      );\n    }\n\n    return incoming;\n  }\n}\n\nconst emptyMergeTreePool: MergeTree[] = [];\n\nfunction getChildMergeTree(\n  { map }: MergeTree,\n  name: string | number\n): MergeTree {\n  if (!map.has(name)) {\n    map.set(name, emptyMergeTreePool.pop() || { map: new Map() });\n  }\n  return map.get(name)!;\n}\n\nfunction mergeMergeTrees(\n  left: MergeTree | undefined,\n  right: MergeTree | undefined\n): MergeTree {\n  if (left === right || !right || mergeTreeIsEmpty(right)) return left!;\n  if (!left || mergeTreeIsEmpty(left)) return right;\n\n  const info =\n    left.info && right.info ?\n      {\n        ...left.info,\n        ...right.info,\n      }\n    : left.info || right.info;\n\n  const needToMergeMaps = left.map.size && right.map.size;\n  const map =\n    needToMergeMaps ? new Map()\n    : left.map.size ? left.map\n    : right.map;\n\n  const merged = { info, map };\n\n  if (needToMergeMaps) {\n    const remainingRightKeys = new Set(right.map.keys());\n\n    left.map.forEach((leftTree, key) => {\n      merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n      remainingRightKeys.delete(key);\n    });\n\n    remainingRightKeys.forEach((key) => {\n      merged.map.set(\n        key,\n        mergeMergeTrees(right.map.get(key), left.map.get(key))\n      );\n    });\n  }\n\n  return merged;\n}\n\nfunction mergeTreeIsEmpty(tree: MergeTree | undefined): boolean {\n  return !tree || !(tree.info || tree.map.size);\n}\n\nfunction maybeRecycleChildMergeTree({ map }: MergeTree, name: string | number) {\n  const childTree = map.get(name);\n  if (childTree && mergeTreeIsEmpty(childTree)) {\n    emptyMergeTreePool.push(childTree);\n    map.delete(name);\n  }\n}\n\nconst warnings = new Set<string>();\n\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(\n  existingRef: Reference,\n  incomingObj: StoreObject,\n  storeFieldName: string,\n  store: NormalizedCache\n) {\n  const getChild = (objOrRef: StoreObject | Reference): StoreObject | false => {\n    const child = store.getFieldValue<StoreObject>(objOrRef, storeFieldName);\n    return typeof child === \"object\" && child;\n  };\n\n  const existing = getChild(existingRef);\n  if (!existing) return;\n\n  const incoming = getChild(incomingObj);\n  if (!incoming) return;\n\n  // It's always safe to replace a reference, since it refers to data\n  // safely stored elsewhere.\n  if (isReference(existing)) return;\n\n  // If the values are structurally equivalent, we do not need to worry\n  // about incoming replacing existing.\n  if (equal(existing, incoming)) return;\n\n  // If we're replacing every key of the existing object, then the\n  // existing data would be overwritten even if the objects were\n  // normalized, so warning would not be helpful here.\n  if (\n    Object.keys(existing).every(\n      (key) => store.getFieldValue(incoming, key) !== void 0\n    )\n  ) {\n    return;\n  }\n\n  const parentType =\n    store.getFieldValue<string>(existingRef, \"__typename\") ||\n    store.getFieldValue<string>(incomingObj, \"__typename\");\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const typeDotName = `${parentType}.${fieldName}`;\n  // Avoid warning more than once for the same type and field name.\n  if (warnings.has(typeDotName)) return;\n  warnings.add(typeDotName);\n\n  const childTypenames: string[] = [];\n  // Arrays do not have __typename fields, and always need a custom merge\n  // function, even if their elements are normalized entities.\n  if (!isArray(existing) && !isArray(incoming)) {\n    [existing, incoming].forEach((child) => {\n      const typename = store.getFieldValue(child, \"__typename\");\n      if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n        childTypenames.push(typename);\n      }\n    });\n  }\n\n  invariant.warn(\n    `Cache data may be lost when replacing the %s field of a %s object.\n\nThis could cause additional (usually avoidable) network requests to fetch data that were otherwise cached.\n\nTo address this problem (which is not a bug in Apollo Client), %sdefine a custom merge function for the %s field, so InMemoryCache can safely merge these objects:\n\n  existing: %o\n  incoming: %o\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n`,\n    fieldName,\n    parentType,\n    childTypenames.length ?\n      \"either ensure all objects of type \" +\n        childTypenames.join(\" and \") +\n        \" have an ID or a custom merge function, or \"\n    : \"\",\n    typeDotName,\n    { ...existing },\n    { ...incoming }\n  );\n}\n\nfunction getTypenameFromResult(\n  result: Record<string, any>,\n  selectionSet: SelectionSetNode,\n  fragmentMap?: FragmentMap\n): string | undefined {\n  let fragments: undefined | Array<InlineFragmentNode | FragmentSpreadNode>;\n  for (const selection of selectionSet.selections) {\n    if (isField(selection)) {\n      if (selection.name.value === \"__typename\") {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else if (fragments) {\n      fragments.push(selection);\n    } else {\n      fragments = [selection];\n    }\n  }\n  if (typeof result.__typename === \"string\") {\n    return result.__typename;\n  }\n  if (fragments) {\n    for (const selection of fragments) {\n      const typename = getTypenameFromResult(\n        result,\n        getFragmentFromSelection(selection, fragmentMap)!.selectionSet,\n        fragmentMap\n      );\n      if (typeof typename === \"string\") {\n        return typename;\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
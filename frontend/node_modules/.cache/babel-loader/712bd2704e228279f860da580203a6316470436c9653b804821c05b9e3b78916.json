{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { mergeDeep } from \"@apollo/client/utilities/internal\";\n/**\n * A basic pagination field policy that always concatenates new\n * results onto the existing array, without examining options.args.\n *\n * @param keyArgs - `keyArgs` that should be applied to the field policy\n * @returns The field policy that handles concatenating field results.\n */\nexport function concatPagination(keyArgs = false) {\n  return {\n    keyArgs,\n    merge(existing, incoming) {\n      return existing ? [...existing, ...incoming] : incoming;\n    }\n  };\n}\n/**\n * A basic field policy that uses `options.args.{offset,limit}` to splice\n * the incoming data into the existing array. If your arguments are called\n * something different (like `args.{start,count}`), feel free to copy/paste\n * this implementation and make the appropriate changes.\n *\n * @param keyArgs - `keyArgs` that should be applied to the field policy\n * @returns The field policy that handles offset/limit pagination\n */\nexport function offsetLimitPagination(keyArgs = false) {\n  return {\n    keyArgs,\n    merge(existing, incoming, {\n      args\n    }) {\n      const merged = existing ? existing.slice(0) : [];\n      if (incoming) {\n        if (args) {\n          // Assume an offset of 0 if args.offset omitted.\n          const {\n            offset = 0\n          } = args;\n          for (let i = 0; i < incoming.length; ++i) {\n            merged[offset + i] = incoming[i];\n          }\n        } else {\n          // It's unusual (probably a mistake) for a paginated field not\n          // to receive any arguments, so you might prefer to throw an\n          // exception here, instead of recovering by appending incoming\n          // onto the existing array.\n          merged.push(...incoming);\n        }\n      }\n      return merged;\n    }\n  };\n}\n// As proof of the flexibility of field policies, this function generates\n// one that handles Relay-style pagination, without Apollo Client knowing\n// anything about connections, edges, cursors, or pageInfo objects.\n/**\n * A field policy that attempts to handle pagination for fields that adhere to\n * the [Relay Connections Spec](https://relay.dev/graphql/connections.htm).\n *\n * @param keyArgs - `keyArgs` that should be applied to the field policy\n * @returns The field policy that handles Relay pagination\n */\nexport function relayStylePagination(keyArgs = false) {\n  return {\n    keyArgs,\n    read(existing, {\n      canRead,\n      readField\n    }) {\n      if (!existing) return existing;\n      const edges = [];\n      let firstEdgeCursor = \"\";\n      let lastEdgeCursor = \"\";\n      existing.edges.forEach(edge => {\n        // Edges themselves could be Reference objects, so it's important\n        // to use readField to access the edge.edge.node property.\n        if (canRead(readField(\"node\", edge))) {\n          edges.push(edge);\n          if (edge.cursor) {\n            firstEdgeCursor = firstEdgeCursor || edge.cursor || \"\";\n            lastEdgeCursor = edge.cursor || lastEdgeCursor;\n          }\n        }\n      });\n      if (edges.length > 1 && firstEdgeCursor === lastEdgeCursor) {\n        firstEdgeCursor = \"\";\n      }\n      const {\n        startCursor,\n        endCursor\n      } = existing.pageInfo || {};\n      return {\n        // Some implementations return additional Connection fields, such\n        // as existing.totalCount. These fields are saved by the merge\n        // function, so the read function should also preserve them.\n        ...getExtras(existing),\n        edges,\n        pageInfo: {\n          ...existing.pageInfo,\n          // If existing.pageInfo.{start,end}Cursor are undefined or \"\", default\n          // to firstEdgeCursor and/or lastEdgeCursor.\n          startCursor: startCursor || firstEdgeCursor,\n          endCursor: endCursor || lastEdgeCursor\n        }\n      };\n    },\n    merge(existing, incoming, {\n      args,\n      isReference,\n      readField\n    }) {\n      if (!existing) {\n        existing = makeEmptyData();\n      }\n      if (!incoming) {\n        return existing;\n      }\n      const incomingEdges = incoming.edges ? incoming.edges.map(edge => {\n        if (isReference(edge = {\n          ...edge\n        })) {\n          // In case edge is a Reference, we read out its cursor field and\n          // store it as an extra property of the Reference object.\n          edge.cursor = readField(\"cursor\", edge);\n        }\n        return edge;\n      }) : [];\n      if (incoming.pageInfo) {\n        const {\n          pageInfo\n        } = incoming;\n        const {\n          startCursor,\n          endCursor\n        } = pageInfo;\n        const firstEdge = incomingEdges[0];\n        const lastEdge = incomingEdges[incomingEdges.length - 1];\n        // In case we did not request the cursor field for edges in this\n        // query, we can still infer cursors from pageInfo.\n        if (firstEdge && startCursor) {\n          firstEdge.cursor = startCursor;\n        }\n        if (lastEdge && endCursor) {\n          lastEdge.cursor = endCursor;\n        }\n        // Cursors can also come from edges, so we default\n        // pageInfo.{start,end}Cursor to {first,last}Edge.cursor.\n        const firstCursor = firstEdge && firstEdge.cursor;\n        if (firstCursor && !startCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              startCursor: firstCursor\n            }\n          });\n        }\n        const lastCursor = lastEdge && lastEdge.cursor;\n        if (lastCursor && !endCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              endCursor: lastCursor\n            }\n          });\n        }\n      }\n      let prefix = existing.edges;\n      let suffix = [];\n      if (args && args.after) {\n        // This comparison does not need to use readField(\"cursor\", edge),\n        // because we stored the cursor field of any Reference edges as an\n        // extra property of the Reference object.\n        const index = prefix.findIndex(edge => edge.cursor === args.after);\n        if (index >= 0) {\n          prefix = prefix.slice(0, index + 1);\n          // suffix = []; // already true\n        }\n      } else if (args && args.before) {\n        const index = prefix.findIndex(edge => edge.cursor === args.before);\n        suffix = index < 0 ? prefix : prefix.slice(index);\n        prefix = [];\n      } else if (incoming.edges) {\n        // If we have neither args.after nor args.before, the incoming\n        // edges cannot be spliced into the existing edges, so they must\n        // replace the existing edges. See #6592 for a motivating example.\n        prefix = [];\n      }\n      const edges = [...prefix, ...incomingEdges, ...suffix];\n      const pageInfo = {\n        // The ordering of these two ...spreads may be surprising, but it\n        // makes sense because we want to combine PageInfo properties with a\n        // preference for existing values, *unless* the existing values are\n        // overridden by the logic below, which is permitted only when the\n        // incoming page falls at the beginning or end of the data.\n        ...incoming.pageInfo,\n        ...existing.pageInfo\n      };\n      if (incoming.pageInfo) {\n        const {\n          hasPreviousPage,\n          hasNextPage,\n          startCursor,\n          endCursor,\n          ...extras\n        } = incoming.pageInfo;\n        // If incoming.pageInfo had any extra non-standard properties,\n        // assume they should take precedence over any existing properties\n        // of the same name, regardless of where this page falls with\n        // respect to the existing data.\n        Object.assign(pageInfo, extras);\n        // Keep existing.pageInfo.has{Previous,Next}Page unless the\n        // placement of the incoming edges means incoming.hasPreviousPage\n        // or incoming.hasNextPage should become the new values for those\n        // properties in existing.pageInfo. Note that these updates are\n        // only permitted when the beginning or end of the incoming page\n        // coincides with the beginning or end of the existing data, as\n        // determined using prefix.length and suffix.length.\n        if (!prefix.length) {\n          if (void 0 !== hasPreviousPage) pageInfo.hasPreviousPage = hasPreviousPage;\n          if (void 0 !== startCursor) pageInfo.startCursor = startCursor;\n        }\n        if (!suffix.length) {\n          if (void 0 !== hasNextPage) pageInfo.hasNextPage = hasNextPage;\n          if (void 0 !== endCursor) pageInfo.endCursor = endCursor;\n        }\n      }\n      return {\n        ...getExtras(existing),\n        ...getExtras(incoming),\n        edges,\n        pageInfo\n      };\n    }\n  };\n}\n// Returns any unrecognized properties of the given object.\nconst getExtras = obj => __rest(obj, notExtras);\nconst notExtras = [\"edges\", \"pageInfo\"];\nfunction makeEmptyData() {\n  return {\n    edges: [],\n    pageInfo: {\n      hasPreviousPage: false,\n      hasNextPage: true,\n      startCursor: \"\",\n      endCursor: \"\"\n    }\n  };\n}","map":{"version":3,"names":["__rest","mergeDeep","concatPagination","keyArgs","merge","existing","incoming","offsetLimitPagination","args","merged","slice","offset","i","length","push","relayStylePagination","read","canRead","readField","edges","firstEdgeCursor","lastEdgeCursor","forEach","edge","cursor","startCursor","endCursor","pageInfo","getExtras","isReference","makeEmptyData","incomingEdges","map","firstEdge","lastEdge","firstCursor","lastCursor","prefix","suffix","after","index","findIndex","before","hasPreviousPage","hasNextPage","extras","Object","assign","obj","notExtras"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/utilities/policies/pagination.ts"],"sourcesContent":["import { __rest } from \"tslib\";\n\nimport type { FieldPolicy, Reference } from \"@apollo/client/cache\";\nimport { mergeDeep } from \"@apollo/client/utilities/internal\";\n\ntype KeyArgs = FieldPolicy<any>[\"keyArgs\"];\n\n/**\n * A basic pagination field policy that always concatenates new\n * results onto the existing array, without examining options.args.\n *\n * @param keyArgs - `keyArgs` that should be applied to the field policy\n * @returns The field policy that handles concatenating field results.\n */\nexport function concatPagination<T = Reference>(\n  keyArgs: KeyArgs = false\n): FieldPolicy<T[]> {\n  return {\n    keyArgs,\n    merge(existing, incoming) {\n      return existing ? [...existing, ...incoming] : incoming;\n    },\n  };\n}\n\n/**\n * A basic field policy that uses `options.args.{offset,limit}` to splice\n * the incoming data into the existing array. If your arguments are called\n * something different (like `args.{start,count}`), feel free to copy/paste\n * this implementation and make the appropriate changes.\n *\n * @param keyArgs - `keyArgs` that should be applied to the field policy\n * @returns The field policy that handles offset/limit pagination\n */\nexport function offsetLimitPagination<T = Reference>(\n  keyArgs: KeyArgs = false\n): FieldPolicy<T[]> {\n  return {\n    keyArgs,\n    merge(existing, incoming, { args }) {\n      const merged = existing ? existing.slice(0) : [];\n\n      if (incoming) {\n        if (args) {\n          // Assume an offset of 0 if args.offset omitted.\n          const { offset = 0 } = args;\n          for (let i = 0; i < incoming.length; ++i) {\n            merged[offset + i] = incoming[i];\n          }\n        } else {\n          // It's unusual (probably a mistake) for a paginated field not\n          // to receive any arguments, so you might prefer to throw an\n          // exception here, instead of recovering by appending incoming\n          // onto the existing array.\n          merged.push(...incoming);\n        }\n      }\n\n      return merged;\n    },\n  };\n}\n\n// Whether TRelayEdge<TNode> is a normalized Reference or a non-normalized\n// object, it needs a .cursor property where the relayStylePagination\n// merge function can store cursor strings taken from pageInfo. Storing an\n// extra reference.cursor property should be safe, and is easier than\n// attempting to update the cursor field of the normalized StoreObject\n// that the reference refers to, or managing edge wrapper objects\n// (something I attempted in #7023, but abandoned because of #7088).\ntype TRelayEdge<TNode> =\n  | {\n      cursor?: string;\n      node: TNode;\n    }\n  | (Reference & { cursor?: string });\n\nexport type TRelayPageInfo = {\n  hasPreviousPage: boolean;\n  hasNextPage: boolean;\n  startCursor: string;\n  endCursor: string;\n};\n\ntype TExistingRelay<TNode> = Readonly<{\n  edges: TRelayEdge<TNode>[];\n  pageInfo: TRelayPageInfo;\n}>;\n\ntype TIncomingRelay<TNode> = {\n  edges?: TRelayEdge<TNode>[];\n  pageInfo?: TRelayPageInfo;\n};\n\ntype RelayFieldPolicy<TNode> = FieldPolicy<\n  TExistingRelay<TNode> | null,\n  TIncomingRelay<TNode> | null,\n  TIncomingRelay<TNode> | null\n>;\n\n// As proof of the flexibility of field policies, this function generates\n// one that handles Relay-style pagination, without Apollo Client knowing\n// anything about connections, edges, cursors, or pageInfo objects.\n/**\n * A field policy that attempts to handle pagination for fields that adhere to\n * the [Relay Connections Spec](https://relay.dev/graphql/connections.htm).\n *\n * @param keyArgs - `keyArgs` that should be applied to the field policy\n * @returns The field policy that handles Relay pagination\n */\nexport function relayStylePagination<TNode extends Reference = Reference>(\n  keyArgs: KeyArgs = false\n): RelayFieldPolicy<TNode> {\n  return {\n    keyArgs,\n\n    read(existing, { canRead, readField }) {\n      if (!existing) return existing;\n\n      const edges: TRelayEdge<TNode>[] = [];\n      let firstEdgeCursor = \"\";\n      let lastEdgeCursor = \"\";\n      existing.edges.forEach((edge) => {\n        // Edges themselves could be Reference objects, so it's important\n        // to use readField to access the edge.edge.node property.\n        if (canRead(readField(\"node\", edge))) {\n          edges.push(edge);\n          if (edge.cursor) {\n            firstEdgeCursor = firstEdgeCursor || edge.cursor || \"\";\n            lastEdgeCursor = edge.cursor || lastEdgeCursor;\n          }\n        }\n      });\n\n      if (edges.length > 1 && firstEdgeCursor === lastEdgeCursor) {\n        firstEdgeCursor = \"\";\n      }\n\n      const { startCursor, endCursor } = existing.pageInfo || {};\n\n      return {\n        // Some implementations return additional Connection fields, such\n        // as existing.totalCount. These fields are saved by the merge\n        // function, so the read function should also preserve them.\n        ...getExtras(existing),\n        edges,\n        pageInfo: {\n          ...existing.pageInfo,\n          // If existing.pageInfo.{start,end}Cursor are undefined or \"\", default\n          // to firstEdgeCursor and/or lastEdgeCursor.\n          startCursor: startCursor || firstEdgeCursor,\n          endCursor: endCursor || lastEdgeCursor,\n        },\n      };\n    },\n\n    merge(existing, incoming, { args, isReference, readField }) {\n      if (!existing) {\n        existing = makeEmptyData();\n      }\n\n      if (!incoming) {\n        return existing;\n      }\n\n      const incomingEdges =\n        incoming.edges ?\n          incoming.edges.map((edge) => {\n            if (isReference((edge = { ...edge }))) {\n              // In case edge is a Reference, we read out its cursor field and\n              // store it as an extra property of the Reference object.\n              edge.cursor = readField<string>(\"cursor\", edge);\n            }\n            return edge;\n          })\n        : [];\n\n      if (incoming.pageInfo) {\n        const { pageInfo } = incoming;\n        const { startCursor, endCursor } = pageInfo;\n        const firstEdge = incomingEdges[0];\n        const lastEdge = incomingEdges[incomingEdges.length - 1];\n        // In case we did not request the cursor field for edges in this\n        // query, we can still infer cursors from pageInfo.\n        if (firstEdge && startCursor) {\n          firstEdge.cursor = startCursor;\n        }\n        if (lastEdge && endCursor) {\n          lastEdge.cursor = endCursor;\n        }\n        // Cursors can also come from edges, so we default\n        // pageInfo.{start,end}Cursor to {first,last}Edge.cursor.\n        const firstCursor = firstEdge && firstEdge.cursor;\n        if (firstCursor && !startCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              startCursor: firstCursor,\n            },\n          });\n        }\n        const lastCursor = lastEdge && lastEdge.cursor;\n        if (lastCursor && !endCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              endCursor: lastCursor,\n            },\n          });\n        }\n      }\n\n      let prefix = existing.edges;\n      let suffix: typeof prefix = [];\n\n      if (args && args.after) {\n        // This comparison does not need to use readField(\"cursor\", edge),\n        // because we stored the cursor field of any Reference edges as an\n        // extra property of the Reference object.\n        const index = prefix.findIndex((edge) => edge.cursor === args.after);\n        if (index >= 0) {\n          prefix = prefix.slice(0, index + 1);\n          // suffix = []; // already true\n        }\n      } else if (args && args.before) {\n        const index = prefix.findIndex((edge) => edge.cursor === args.before);\n        suffix = index < 0 ? prefix : prefix.slice(index);\n        prefix = [];\n      } else if (incoming.edges) {\n        // If we have neither args.after nor args.before, the incoming\n        // edges cannot be spliced into the existing edges, so they must\n        // replace the existing edges. See #6592 for a motivating example.\n        prefix = [];\n      }\n\n      const edges = [...prefix, ...incomingEdges, ...suffix];\n\n      const pageInfo: TRelayPageInfo = {\n        // The ordering of these two ...spreads may be surprising, but it\n        // makes sense because we want to combine PageInfo properties with a\n        // preference for existing values, *unless* the existing values are\n        // overridden by the logic below, which is permitted only when the\n        // incoming page falls at the beginning or end of the data.\n        ...incoming.pageInfo,\n        ...existing.pageInfo,\n      };\n\n      if (incoming.pageInfo) {\n        const {\n          hasPreviousPage,\n          hasNextPage,\n          startCursor,\n          endCursor,\n          ...extras\n        } = incoming.pageInfo;\n\n        // If incoming.pageInfo had any extra non-standard properties,\n        // assume they should take precedence over any existing properties\n        // of the same name, regardless of where this page falls with\n        // respect to the existing data.\n        Object.assign(pageInfo, extras);\n\n        // Keep existing.pageInfo.has{Previous,Next}Page unless the\n        // placement of the incoming edges means incoming.hasPreviousPage\n        // or incoming.hasNextPage should become the new values for those\n        // properties in existing.pageInfo. Note that these updates are\n        // only permitted when the beginning or end of the incoming page\n        // coincides with the beginning or end of the existing data, as\n        // determined using prefix.length and suffix.length.\n        if (!prefix.length) {\n          if (void 0 !== hasPreviousPage)\n            pageInfo.hasPreviousPage = hasPreviousPage;\n          if (void 0 !== startCursor) pageInfo.startCursor = startCursor;\n        }\n        if (!suffix.length) {\n          if (void 0 !== hasNextPage) pageInfo.hasNextPage = hasNextPage;\n          if (void 0 !== endCursor) pageInfo.endCursor = endCursor;\n        }\n      }\n\n      return {\n        ...getExtras(existing),\n        ...getExtras(incoming),\n        edges,\n        pageInfo,\n      };\n    },\n  };\n}\n\n// Returns any unrecognized properties of the given object.\nconst getExtras = (obj: Record<string, any>) => __rest(obj, notExtras);\nconst notExtras = [\"edges\", \"pageInfo\"];\n\nfunction makeEmptyData(): TExistingRelay<any> {\n  return {\n    edges: [],\n    pageInfo: {\n      hasPreviousPage: false,\n      hasNextPage: true,\n      startCursor: \"\",\n      endCursor: \"\",\n    },\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { brand, isBranded } from \"./utils.js\";\n/**\n * Represents a fatal error when executing `@client` fields from `LocalState`,\n * typically to indicate a problem with the `LocalState` configuration or\n * incorrect usage of a resolver function. This error does not represent user\n * errors thrown in a local resolver when resolving `@client` fields.\n *\n * @example\n *\n * ```ts\n * import { LocalStateError } from \"@apollo/client/errors\";\n *\n * // Check if an error is a LocalStateError instance\n * if (LocalStateError.is(error)) {\n *   console.log(\"Original error:\", error.cause);\n *\n *   // Determine which field caused the error\n *   if (error.path) {\n *     console.log(\"Error occurred at field path:\", error.path.join(\".\"));\n *   }\n * }\n * ```\n */\nexport class LocalStateError extends Error {\n  /**\n   * A method that determines whether an error is a `LocalStateError`\n   * object. This method enables TypeScript to narrow the error type.\n   *\n   * @example\n   *\n   * ```ts\n   * if (LocalStateError.is(error)) {\n   *   // TypeScript now knows `error` is a LocalStateError object\n   *   console.log(error.path);\n   * }\n   * ```\n   */\n  static is(error) {\n    return isBranded(error, \"LocalStateError\");\n  }\n  /**\n  * The path to the field that caused the error.\n  */\n  path;\n  constructor(message, options = {}) {\n    super(message, {\n      cause: options.sourceError\n    });\n    this.name = \"LocalStateError\";\n    this.path = options.path;\n    brand(this);\n    Object.setPrototypeOf(this, LocalStateError.prototype);\n  }\n}","map":{"version":3,"names":["brand","isBranded","LocalStateError","Error","is","error","path","constructor","message","options","cause","sourceError","name","Object","setPrototypeOf","prototype"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/errors/LocalStateError.ts"],"sourcesContent":["import { brand, isBranded } from \"./utils.js\";\n\nexport declare namespace LocalStateError {\n  export interface Options {\n    path?: Array<string | number>;\n    sourceError?: unknown;\n  }\n\n  namespace DocumentationTypes {\n    interface InstanceProperties {\n      /** The path to the field that caused the error. */\n      readonly path?: Array<string | number>;\n    }\n  }\n}\n\n/**\n * Represents a fatal error when executing `@client` fields from `LocalState`,\n * typically to indicate a problem with the `LocalState` configuration or\n * incorrect usage of a resolver function. This error does not represent user\n * errors thrown in a local resolver when resolving `@client` fields.\n *\n * @example\n *\n * ```ts\n * import { LocalStateError } from \"@apollo/client/errors\";\n *\n * // Check if an error is a LocalStateError instance\n * if (LocalStateError.is(error)) {\n *   console.log(\"Original error:\", error.cause);\n *\n *   // Determine which field caused the error\n *   if (error.path) {\n *     console.log(\"Error occurred at field path:\", error.path.join(\".\"));\n *   }\n * }\n * ```\n */\nexport class LocalStateError extends Error {\n  /**\n   * A method that determines whether an error is a `LocalStateError`\n   * object. This method enables TypeScript to narrow the error type.\n   *\n   * @example\n   *\n   * ```ts\n   * if (LocalStateError.is(error)) {\n   *   // TypeScript now knows `error` is a LocalStateError object\n   *   console.log(error.path);\n   * }\n   * ```\n   */\n  static is(error: unknown): error is LocalStateError {\n    return isBranded(error, \"LocalStateError\");\n  }\n\n  /** {@inheritDoc @apollo/client!LocalStateError.DocumentationTypes.InstanceProperties#path:member} */\n  readonly path?: Array<string | number>;\n\n  constructor(message: string, options: LocalStateError.Options = {}) {\n    super(message, { cause: options.sourceError });\n    this.name = \"LocalStateError\";\n    this.path = options.path;\n\n    brand(this);\n    Object.setPrototypeOf(this, LocalStateError.prototype);\n  }\n}\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,SAAhB,QAAiC,YAAY;AAgB7C;;;;;;;;;;;;;;;;;;;;;;AAsBA,aAAaC,eAAb,SAAqCC,KAArC;EACE;;;;;;;;;;;;;EAaA,OAAOC,EAAEA,CAACC,KAAc,EAA1B;IACI,OAAOJ,SAAS,CAACI,KAAK,EAAE,iBAAiB,CAAC;EAC5C;;;;EAGSC,IAAI;EAEbC,WAAFA,CAAcC,OAAe,EAAEC,OAA/B,GAAkE,CAAlE,CAAoE,EAApE;IACI,KAAK,CAACD,OAAO,EAAE;MAAEE,KAAK,EAAED,OAAO,CAACE;IAApC,CAAiD,CAAC;IAC9C,IAAI,CAACC,IAAT,GAAgB,iBAAiB;IAC7B,IAAI,CAACN,IAAT,GAAgBG,OAAO,CAACH,IAAI;IAExBN,KAAK,CAAC,IAAI,CAAC;IACXa,MAAM,CAACC,cAAc,CAAC,IAAI,EAAEZ,eAAe,CAACa,SAAS,CAAC;EACxD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
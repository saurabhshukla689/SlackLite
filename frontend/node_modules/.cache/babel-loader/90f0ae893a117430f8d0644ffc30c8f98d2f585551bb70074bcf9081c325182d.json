{"ast":null,"code":"import { ApolloLink } from \"@apollo/client/link\";\nimport { compact } from \"@apollo/client/utilities/internal\";\n/**\n * `ClientAwarenessLink` provides support for providing client awareness\n * features.\n *\n * @remarks\n *\n * Client awareness adds identifying information about the client to HTTP\n * requests for use with metrics reporting tools, such as [Apollo GraphOS](https://apollographql.com/docs/graphos/platform).\n * It is included in the functionality of [`HttpLink`](https://apollographql.com/docs/react/api/link/apollo-link-http) by default.\n *\n * Client awareness distinguishes between user-provided client awareness\n * (provided by the `clientAwareness` option) and enhanced client awareness\n * (provided by the `enhancedClientAwareness` option). User-provided client\n * awareness enables you to set a customized client name and version for\n * identification in metrics reporting tools. Enhanced client awareness enables\n * the identification of the Apollo Client package name and version.\n *\n * @example\n *\n * ```ts\n * import { ClientAwarenessLink } from \"@apollo/client/link/client-awareness\";\n *\n * const link = new ClientAwarenessLink({\n *   clientAwareness: {\n *     name: \"My Client\",\n *     version: \"1\",\n *   },\n *   enhancedClientAwareness: {\n *     transport: \"extensions\",\n *   },\n * });\n * ```\n */\nexport class ClientAwarenessLink extends ApolloLink {\n  constructor(options = {}) {\n    super((operation, forward) => {\n      const client = operation.client;\n      const clientOptions = client[\"queryManager\"].clientOptions;\n      const context = operation.getContext();\n      {\n        const {\n          name,\n          version,\n          transport = \"headers\"\n        } = compact({}, clientOptions.clientAwareness, options.clientAwareness, context.clientAwareness);\n        if (transport === \"headers\") {\n          operation.setContext(({\n            headers,\n            extensions\n          }) => {\n            return {\n              headers: compact(\n              // setting these first so that they can be overridden by user-provided headers\n              {\n                \"apollographql-client-name\": name,\n                \"apollographql-client-version\": version\n              }, headers)\n            };\n          });\n        }\n      }\n      {\n        const {\n          transport = \"extensions\"\n        } = compact({}, clientOptions.enhancedClientAwareness, options.enhancedClientAwareness);\n        if (transport === \"extensions\") {\n          operation.extensions = compact(\n          // setting these first so that it can be overridden by user-provided extensions\n          {\n            clientLibrary: {\n              name: \"@apollo/client\",\n              version: client.version\n            }\n          }, operation.extensions);\n        }\n      }\n      return forward(operation);\n    });\n  }\n}","map":{"version":3,"names":["ApolloLink","compact","ClientAwarenessLink","constructor","options","operation","forward","client","clientOptions","context","getContext","name","version","transport","clientAwareness","setContext","headers","extensions","enhancedClientAwareness","clientLibrary"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/link/client-awareness/ClientAwarenessLink.ts"],"sourcesContent":["import { ApolloLink } from \"@apollo/client/link\";\nimport { compact } from \"@apollo/client/utilities/internal\";\n\nexport declare namespace ClientAwarenessLink {\n  /**\n   * Options passed to `ClientAwarenessLink` through [request context](https://apollographql.com/docs/react/api/link/introduction#managing-context). Previous\n   * non-terminating links in the link chain also can set these values to\n   * customize the behavior of `ClientAwarenessLink` for each operation.\n   *\n   * > [!NOTE]\n   * > Some of these values can also be provided to the `ClientAwarenessLink`\n   * > constructor. If a value is provided to both, the value in `context` takes\n   * > precedence.\n   */\n  export interface ContextOptions {\n    /** {@inheritDoc @apollo/client/link/client-awareness!ClientAwarenessLink.Options#clientAwareness:member} */\n    clientAwareness?: ClientAwarenessLink.ClientAwarenessOptions;\n  }\n\n  export interface ClientAwarenessOptions {\n    /**\n     * A custom name (e.g., `iOS`) that identifies this particular client among your set of clients. Apollo Server and Apollo Studio use this property as part of the [client awareness](https://www.apollographql.com/docs/apollo-server/monitoring/metrics#identifying-distinct-clients) feature.\n     *\n     * This option can either be set as part of the Apollo Client constructor call or when manually constructing a `HttpLink`, `BatchHttpLink` or `ClientAwarenessLink`.\n     */\n    name?: string;\n    /**\n     * A custom version that identifies the current version of this particular client (e.g., `1.2`). Apollo Server and Apollo Studio use this property as part of the [client awareness](https://www.apollographql.com/docs/apollo-server/monitoring/metrics#identifying-distinct-clients) feature.\n     *\n     * This is **not** the version of Apollo Client that you are using, but rather any version string that helps you differentiate between versions of your client.\n     *\n     * This option can either be set as part of the Apollo Client constructor call or when manually constructing a `HttpLink`, `BatchHttpLink` or `ClientAwarenessLink`.\n     */\n    version?: string;\n    /**\n     * Determines how `name` and `version` are sent in outgoing requests.\n     *\n     * If `name` and `version` are not provided, this option will be ignored.\n     * (These options can either be set as part of the Apollo Client constructor call or when manually constructing a `HttpLink`, `BatchHttpLink` or `ClientAwarenessLink`.)\n     *\n     * - If set to `\"headers\"`, `name` and `version` will be sent in the request headers as `apollographql-client-name` and `apollographql-client-version`, respectively.\n     * - If set to `false`, `name` and `version` will not be included in outgoing requests.\n     *\n     * @defaultValue \"headers\"\n     */\n    transport?: \"headers\" | false;\n  }\n  export interface EnhancedClientAwarenessOptions {\n    /**\n     * Determines how the the version information of Apollo Client is sent in outgoing requests.\n     *\n     * - If set to `\"extensions\"`, library `name` and `version` will be sent in an object in the request extensions as `clientLibrary`.\n     * - If set to `false`, library name and version will not be included in outgoing requests.\n     *\n     * @defaultValue \"extensions\"\n     */\n    transport?: \"extensions\" | false;\n  }\n\n  export interface Options {\n    /**\n     * Configures the \"client awareness\" feature.\n     * This feature allows you to identify distinct applications in Apollo Studio\n     * and Apollo Server logs (and other monitoring or analytics tools) by adding\n     * information about the your application to outgoing requests.\n     */\n    clientAwareness?: ClientAwarenessLink.ClientAwarenessOptions;\n    /**\n     * Configures the \"enhanced client awareness\" feature.\n     * This feature allows you to identify the version of the Apollo Client library\n     * used in your application in Apollo Studio (and other monitoring or analytics tools)\n     * by adding information about the Apollo Client library to outgoing requests.\n     */\n    enhancedClientAwareness?: ClientAwarenessLink.EnhancedClientAwarenessOptions;\n  }\n}\n\n/**\n * `ClientAwarenessLink` provides support for providing client awareness\n * features.\n *\n * @remarks\n *\n * Client awareness adds identifying information about the client to HTTP\n * requests for use with metrics reporting tools, such as [Apollo GraphOS](https://apollographql.com/docs/graphos/platform).\n * It is included in the functionality of [`HttpLink`](https://apollographql.com/docs/react/api/link/apollo-link-http) by default.\n *\n * Client awareness distinguishes between user-provided client awareness\n * (provided by the `clientAwareness` option) and enhanced client awareness\n * (provided by the `enhancedClientAwareness` option). User-provided client\n * awareness enables you to set a customized client name and version for\n * identification in metrics reporting tools. Enhanced client awareness enables\n * the identification of the Apollo Client package name and version.\n *\n * @example\n *\n * ```ts\n * import { ClientAwarenessLink } from \"@apollo/client/link/client-awareness\";\n *\n * const link = new ClientAwarenessLink({\n *   clientAwareness: {\n *     name: \"My Client\",\n *     version: \"1\",\n *   },\n *   enhancedClientAwareness: {\n *     transport: \"extensions\",\n *   },\n * });\n * ```\n */\nexport class ClientAwarenessLink extends ApolloLink {\n  constructor(options: ClientAwarenessLink.Options = {}) {\n    super((operation, forward) => {\n      const client = operation.client;\n\n      const clientOptions = client[\"queryManager\"].clientOptions;\n      const context = operation.getContext();\n      {\n        const {\n          name,\n          version,\n          transport = \"headers\",\n        } = compact(\n          {},\n          clientOptions.clientAwareness,\n          options.clientAwareness,\n          context.clientAwareness\n        );\n\n        if (transport === \"headers\") {\n          operation.setContext(({ headers, extensions }) => {\n            return {\n              headers: compact(\n                // setting these first so that they can be overridden by user-provided headers\n                {\n                  \"apollographql-client-name\": name,\n                  \"apollographql-client-version\": version,\n                },\n                headers\n              ),\n            };\n          });\n        }\n      }\n      {\n        const { transport = \"extensions\" } = compact(\n          {},\n          clientOptions.enhancedClientAwareness,\n          options.enhancedClientAwareness\n        );\n        if (transport === \"extensions\") {\n          operation.extensions = compact(\n            // setting these first so that it can be overridden by user-provided extensions\n            {\n              clientLibrary: {\n                name: \"@apollo/client\",\n                version: client.version,\n              },\n            },\n            operation.extensions\n          );\n        }\n      }\n\n      return forward(operation);\n    });\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,qBAAqB;AAChD,SAASC,OAAO,QAAQ,mCAAmC;AA4E3D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,OAAM,MAAOC,mBAAoB,SAAQF,UAAU;EACjDG,YAAYC,OAAA,GAAuC,EAAE;IACnD,KAAK,CAAC,CAACC,SAAS,EAAEC,OAAO,KAAI;MAC3B,MAAMC,MAAM,GAAGF,SAAS,CAACE,MAAM;MAE/B,MAAMC,aAAa,GAAGD,MAAM,CAAC,cAAc,CAAC,CAACC,aAAa;MAC1D,MAAMC,OAAO,GAAGJ,SAAS,CAACK,UAAU,EAAE;MACtC;QACE,MAAM;UACJC,IAAI;UACJC,OAAO;UACPC,SAAS,GAAG;QAAS,CACtB,GAAGZ,OAAO,CACT,EAAE,EACFO,aAAa,CAACM,eAAe,EAC7BV,OAAO,CAACU,eAAe,EACvBL,OAAO,CAACK,eAAe,CACxB;QAED,IAAID,SAAS,KAAK,SAAS,EAAE;UAC3BR,SAAS,CAACU,UAAU,CAAC,CAAC;YAAEC,OAAO;YAAEC;UAAU,CAAE,KAAI;YAC/C,OAAO;cACLD,OAAO,EAAEf,OAAO;cACd;cACA;gBACE,2BAA2B,EAAEU,IAAI;gBACjC,8BAA8B,EAAEC;eACjC,EACDI,OAAO;aAEV;UACH,CAAC,CAAC;QACJ;MACF;MACA;QACE,MAAM;UAAEH,SAAS,GAAG;QAAY,CAAE,GAAGZ,OAAO,CAC1C,EAAE,EACFO,aAAa,CAACU,uBAAuB,EACrCd,OAAO,CAACc,uBAAuB,CAChC;QACD,IAAIL,SAAS,KAAK,YAAY,EAAE;UAC9BR,SAAS,CAACY,UAAU,GAAGhB,OAAO;UAC5B;UACA;YACEkB,aAAa,EAAE;cACbR,IAAI,EAAE,gBAAgB;cACtBC,OAAO,EAAEL,MAAM,CAACK;;WAEnB,EACDP,SAAS,CAACY,UAAU,CACrB;QACH;MACF;MAEA,OAAOX,OAAO,CAACD,SAAS,CAAC;IAC3B,CAAC,CAAC;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
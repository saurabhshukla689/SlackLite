{"ast":null,"code":"import { Observable } from \"rxjs\";\nimport { ApolloLink } from \"@apollo/client/link\";\nimport { filterOperationVariables } from \"@apollo/client/link/utils\";\nimport { isMutationOperation, isSubscriptionOperation } from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { compact } from \"@apollo/client/utilities/internal\";\nimport { maybe } from \"@apollo/client/utilities/internal/globals\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { parseAndCheckHttpResponse, readMultipartBody } from \"./parseAndCheckHttpResponse.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { defaultPrinter, fallbackHttpConfig, selectHttpOptionsAndBodyInternal } from \"./selectHttpOptionsAndBody.js\";\nimport { selectURI } from \"./selectURI.js\";\nconst backupFetch = maybe(() => fetch);\nfunction noop() {}\n/**\n * `BaseHttpLink` is a terminating link that sends a GraphQL operation to a\n * remote endpoint over HTTP. It serves as a base link to `HttpLink`.\n *\n * @remarks\n *\n * `BaseHttpLink` supports both POST and GET requests, and you can configure\n * HTTP options on a per-operation basis. You can use these options for\n * authentication, persisted queries, dynamic URIs, and other granular updates.\n *\n * > [!NOTE]\n * > Prefer using `HttpLink` over `BaseHttpLink`. Use `BaseHttpLink` when you\n * > need to disable client awareness features and would like to tree-shake\n * > the implementation of `ClientAwarenessLink` out of your app bundle.\n *\n * @example\n *\n * ```ts\n * import { BaseHttpLink } from \"@apollo/client/link/http\";\n *\n * const link = new BaseHttpLink({\n *   uri: \"http://localhost:4000/graphql\",\n *   headers: {\n *     authorization: `Bearer ${token}`,\n *   },\n * });\n * ```\n */\nexport class BaseHttpLink extends ApolloLink {\n  constructor(options = {}) {\n    let {\n      uri = \"/graphql\",\n      // use default global fetch if nothing passed in\n      fetch: preferredFetch,\n      print = defaultPrinter,\n      includeExtensions,\n      preserveHeaderCase,\n      useGETForQueries,\n      includeUnusedVariables = false,\n      ...requestOptions\n    } = options;\n    if (__DEV__) {\n      // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n      // defined, so requests won't fail at runtime.\n      checkFetcher(preferredFetch || backupFetch);\n    }\n    const linkConfig = {\n      http: compact({\n        includeExtensions,\n        preserveHeaderCase\n      }),\n      options: requestOptions.fetchOptions,\n      credentials: requestOptions.credentials,\n      headers: requestOptions.headers\n    };\n    super(operation => {\n      let chosenURI = selectURI(operation, uri);\n      const context = operation.getContext();\n      const http = {\n        ...context.http\n      };\n      if (isSubscriptionOperation(operation.query)) {\n        http.accept = [\"multipart/mixed;boundary=graphql;subscriptionSpec=1.0\", ...(http.accept || [])];\n      }\n      const contextConfig = {\n        http,\n        options: context.fetchOptions,\n        credentials: context.credentials,\n        headers: context.headers\n      };\n      //uses fallback, link, and then context to build options\n      const {\n        options,\n        body\n      } = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig);\n      if (body.variables && !includeUnusedVariables) {\n        body.variables = filterOperationVariables(body.variables, operation.query);\n      }\n      let controller = new AbortController();\n      let cleanupController = () => {\n        controller = undefined;\n      };\n      if (options.signal) {\n        const externalSignal = options.signal;\n        // in an ideal world we could use `AbortSignal.any` here, but\n        // React Native uses https://github.com/mysticatea/abort-controller as\n        // a polyfill for `AbortController`, and it does not support `AbortSignal.any`.\n        const listener = () => {\n          controller?.abort(externalSignal.reason);\n        };\n        externalSignal.addEventListener(\"abort\", listener, {\n          once: true\n        });\n        cleanupController = () => {\n          controller?.signal.removeEventListener(\"abort\", cleanupController);\n          controller = undefined;\n          // on cleanup, we need to stop listening to `options.signal` to avoid memory leaks\n          externalSignal.removeEventListener(\"abort\", listener);\n          cleanupController = noop;\n        };\n        // react native also does not support the addEventListener `signal` option\n        // so we have to simulate that ourself\n        controller.signal.addEventListener(\"abort\", cleanupController, {\n          once: true\n        });\n      }\n      options.signal = controller.signal;\n      if (useGETForQueries && !isMutationOperation(operation.query)) {\n        options.method = \"GET\";\n      }\n      return new Observable(observer => {\n        if (options.method === \"GET\") {\n          const {\n            newURI,\n            parseError\n          } = rewriteURIForGET(chosenURI, body);\n          if (parseError) {\n            throw parseError;\n          }\n          chosenURI = newURI;\n        } else {\n          options.body = JSON.stringify(body);\n        }\n        // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n        // fall back to the *current* global window.fetch function (see issue\n        // #7832), or (if all else fails) the backupFetch function we saved when\n        // this module was first evaluated. This last option protects against the\n        // removal of window.fetch, which is unlikely but not impossible.\n        const currentFetch = preferredFetch || maybe(() => fetch) || backupFetch;\n        const observerNext = observer.next.bind(observer);\n        currentFetch(chosenURI, options).then(response => {\n          operation.setContext({\n            response\n          });\n          const ctype = response.headers?.get(\"content-type\");\n          if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n            return readMultipartBody(response, observerNext);\n          } else {\n            return parseAndCheckHttpResponse(operation)(response).then(observerNext);\n          }\n        }).then(() => {\n          cleanupController();\n          observer.complete();\n        }).catch(err => {\n          cleanupController();\n          observer.error(err);\n        });\n        return () => {\n          // XXX support canceling this request\n          // https://developers.google.com/web/updates/2017/09/abortable-fetch\n          if (controller) controller.abort();\n        };\n      });\n    });\n  }\n}","map":{"version":3,"names":["Observable","ApolloLink","filterOperationVariables","isMutationOperation","isSubscriptionOperation","__DEV__","compact","maybe","checkFetcher","parseAndCheckHttpResponse","readMultipartBody","rewriteURIForGET","defaultPrinter","fallbackHttpConfig","selectHttpOptionsAndBodyInternal","selectURI","backupFetch","fetch","noop","BaseHttpLink","constructor","options","uri","preferredFetch","print","includeExtensions","preserveHeaderCase","useGETForQueries","includeUnusedVariables","requestOptions","linkConfig","http","fetchOptions","credentials","headers","operation","chosenURI","context","getContext","query","accept","contextConfig","body","variables","controller","AbortController","cleanupController","undefined","signal","externalSignal","listener","abort","reason","addEventListener","once","removeEventListener","method","observer","newURI","parseError","JSON","stringify","currentFetch","observerNext","next","bind","then","response","setContext","ctype","get","test","complete","catch","err","error"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/link/http/BaseHttpLink.ts"],"sourcesContent":["import type { ASTNode, print } from \"graphql\";\nimport { Observable } from \"rxjs\";\n\nimport { ApolloLink } from \"@apollo/client/link\";\nimport { filterOperationVariables } from \"@apollo/client/link/utils\";\nimport {\n  isMutationOperation,\n  isSubscriptionOperation,\n} from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { compact } from \"@apollo/client/utilities/internal\";\nimport { maybe } from \"@apollo/client/utilities/internal/globals\";\n\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport {\n  parseAndCheckHttpResponse,\n  readMultipartBody,\n} from \"./parseAndCheckHttpResponse.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport {\n  defaultPrinter,\n  fallbackHttpConfig,\n  selectHttpOptionsAndBodyInternal,\n} from \"./selectHttpOptionsAndBody.js\";\nimport { selectURI } from \"./selectURI.js\";\n\nconst backupFetch = maybe(() => fetch);\nfunction noop() {}\n\nexport declare namespace BaseHttpLink {\n  /**\n   * Options passed to `BaseHttpLink` through [request context](https://apollographql.com/docs/react/api/link/introduction#managing-context). Previous\n   * non-terminating links in the link chain also can set these values to\n   * customize the behavior of `BaseHttpLink` for each operation.\n   *\n   * > [!NOTE]\n   * > Some of these values can also be provided to the `HttpLink` constructor.\n   * > If a value is provided to both, the value in `context` takes precedence.\n   */\n  interface ContextOptions {\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#uri:member} */\n    uri?: string | BaseHttpLink.UriFunction;\n\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#headers:member} */\n    headers?: Record<string, string>;\n\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#credentials:member} */\n    credentials?: RequestCredentials;\n\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#fetchOptions:member} */\n    fetchOptions?: RequestInit;\n\n    /**\n     * An object that configures advanced functionality, such as support for\n     * persisted queries.\n     */\n    http?: BaseHttpLink.HttpOptions;\n  }\n\n  /**\n   * Options passed to `BaseHttpLink` through the `http` property of a request\n   * context.\n   */\n  export interface HttpOptions {\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#includeExtensions:member} */\n    includeExtensions?: boolean;\n\n    /**\n     * If `false`, the GraphQL query string is not included in the request. Set\n     * this option if you're sending a request that uses a [persisted query](https://www.apollographql.com/docs/react/api/link/persisted-queries/).\n     *\n     * @defaultValue `true`\n     */\n    includeQuery?: boolean;\n\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#preserveHeaderCase:member} */\n    preserveHeaderCase?: boolean;\n\n    /**\n     * A list of additional `accept` headers to include in the request,\n     * as defined in https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.2\n     *\n     * @example\n     *\n     * ```json\n     * [\"application/custom+json;q=1.0\"]\n     * ```\n     */\n    accept?: string[];\n  }\n\n  export namespace Shared {\n    /** These options are shared between `BaseHttpLink` and `BaseBatchHttpLink` */\n    export interface Options {\n      /**\n       * The URL of the GraphQL endpoint to send requests to. Can also be a\n       * function that accepts an `ApolloLink.Operation` object and returns the\n       * string URL to use for that operation.\n       *\n       * @defaultValue \"/graphql\"\n       */\n      uri?: string | BaseHttpLink.UriFunction;\n\n      /**\n       * If `true`, includes the `extensions` field in operations sent to your\n       * GraphQL endpoint.\n       *\n       * @defaultValue true\n       */\n      includeExtensions?: boolean;\n\n      /**\n       * A function to use instead of calling the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch) directly\n       * when sending HTTP requests to your GraphQL endpoint. The function must\n       * conform to the signature of `fetch`.\n       *\n       * By default, the Fetch API is used unless it isn't available in your\n       * runtime environment.\n       *\n       * See [Customizing `fetch`](https://apollographql.com/docs/react/api/link/introduction#customizing-fetch).\n       */\n      fetch?: typeof fetch;\n\n      /**\n       * An object representing headers to include in every HTTP request.\n       *\n       * @example\n       *\n       * ```json\n       * {\n       *   \"Authorization\": \"Bearer 1234\"\n       * }\n       * ```\n       */\n      headers?: Record<string, string>;\n\n      /**\n       * If `true`, header names won't be automatically normalized to lowercase.\n       * This allows for non-http-spec-compliant servers that might expect\n       * capitalized header names.\n       *\n       * @defaultValue false\n       */\n      preserveHeaderCase?: boolean;\n\n      /**\n       * The credentials policy to use for each `fetch` call.\n       */\n      credentials?: RequestCredentials;\n\n      /**\n       * Any overrides of the fetch options argument to pass to the fetch call.\n       *\n       * An object containing options to use for each call to `fetch`. If a\n       * particular option is not included in this object, the default value of\n       * that option is used.\n       *\n       * > [!NOTE]\n       * > If you set `fetchOptions.method` to `GET`, `HttpLink` follows [standard\n       * > GraphQL HTTP GET encoding](http://graphql.org/learn/serving-over-http/#get-request).\n       *\n       * See [available options](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n       */\n      fetchOptions?: RequestInit;\n\n      /**\n       * If `true`, unused variables from the operation will not be stripped from\n       * the request and will instead be sent to the GraphQL endpoint.\n       *\n       * @remarks\n       * Unused variables are likely to trigger server-side validation errors,\n       * per https://spec.graphql.org/draft/#sec-All-Variables-Used.\n       * `includeUnusedVariables` can be useful if your server deviates\n       * from the GraphQL specification by not strictly enforcing that rule.\n       *\n       * @defaultValue false\n       */\n      includeUnusedVariables?: boolean;\n      /**\n       * A function to use when transforming a GraphQL document into a string. It\n       * accepts an `ASTNode` (typically a `DocumentNode`) and the original `print`\n       * function as arguments, and is expected to return a string. This option\n       * enables you to, for example, use `stripIgnoredCharacters` to remove\n       * whitespace from queries.\n       *\n       * By default the [GraphQL `print` function](https://graphql.org/graphql-js/language/#print) is used.\n       *\n       * @example\n       *\n       * ```ts\n       * import { stripIgnoredCharacters } from \"graphql\";\n       *\n       * const httpLink = new HttpLink({\n       *   uri: \"/graphql\",\n       *   print: (ast, originalPrint) => stripIgnoredCharacters(originalPrint(ast)),\n       * });\n       * ```\n       */\n      print?: BaseHttpLink.Printer;\n    }\n  }\n\n  /**\n   * Options provided to the `BaseHttpLink` constructor.\n   *\n   * > [!NOTE]\n   * > Some of these options are also available to override in [request context](https://apollographql.com/docs/react/api/link/introduction#managing-context).\n   * > Context options override the options passed to the constructor. Treat\n   * > these options as default values that are used when the request context\n   * > does not override the value.\n   */\n  interface Options extends Shared.Options {\n    /**\n     * If `true`, the link uses an HTTP `GET` request when sending query\n     * operations to your GraphQL endpoint. Mutation operations continue to use\n     * `POST` requests. If you want all operations to use `GET` requests,\n     * set `fetchOptions.method` instead.\n     *\n     * @defaultValue false\n     */\n    useGETForQueries?: boolean;\n  }\n\n  interface Body {\n    query?: string;\n    operationName?: string;\n    variables?: Record<string, any>;\n    extensions?: Record<string, any>;\n  }\n\n  type Printer = (node: ASTNode, originalPrint: typeof print) => string;\n  type UriFunction = (operation: ApolloLink.Operation) => string;\n}\n\n/**\n * `BaseHttpLink` is a terminating link that sends a GraphQL operation to a\n * remote endpoint over HTTP. It serves as a base link to `HttpLink`.\n *\n * @remarks\n *\n * `BaseHttpLink` supports both POST and GET requests, and you can configure\n * HTTP options on a per-operation basis. You can use these options for\n * authentication, persisted queries, dynamic URIs, and other granular updates.\n *\n * > [!NOTE]\n * > Prefer using `HttpLink` over `BaseHttpLink`. Use `BaseHttpLink` when you\n * > need to disable client awareness features and would like to tree-shake\n * > the implementation of `ClientAwarenessLink` out of your app bundle.\n *\n * @example\n *\n * ```ts\n * import { BaseHttpLink } from \"@apollo/client/link/http\";\n *\n * const link = new BaseHttpLink({\n *   uri: \"http://localhost:4000/graphql\",\n *   headers: {\n *     authorization: `Bearer ${token}`,\n *   },\n * });\n * ```\n */\nexport class BaseHttpLink extends ApolloLink {\n  constructor(options: BaseHttpLink.Options = {}) {\n    let {\n      uri = \"/graphql\",\n      // use default global fetch if nothing passed in\n      fetch: preferredFetch,\n      print = defaultPrinter,\n      includeExtensions,\n      preserveHeaderCase,\n      useGETForQueries,\n      includeUnusedVariables = false,\n      ...requestOptions\n    } = options;\n\n    if (__DEV__) {\n      // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n      // defined, so requests won't fail at runtime.\n      checkFetcher(preferredFetch || backupFetch);\n    }\n\n    const linkConfig = {\n      http: compact({ includeExtensions, preserveHeaderCase }),\n      options: requestOptions.fetchOptions,\n      credentials: requestOptions.credentials,\n      headers: requestOptions.headers,\n    };\n\n    super((operation) => {\n      let chosenURI = selectURI(operation, uri);\n\n      const context = operation.getContext();\n\n      const http = { ...context.http };\n      if (isSubscriptionOperation(operation.query)) {\n        http.accept = [\n          \"multipart/mixed;boundary=graphql;subscriptionSpec=1.0\",\n          ...(http.accept || []),\n        ];\n      }\n\n      const contextConfig = {\n        http,\n        options: context.fetchOptions,\n        credentials: context.credentials,\n        headers: context.headers,\n      };\n\n      //uses fallback, link, and then context to build options\n      const { options, body } = selectHttpOptionsAndBodyInternal(\n        operation,\n        print,\n        fallbackHttpConfig,\n        linkConfig,\n        contextConfig\n      );\n\n      if (body.variables && !includeUnusedVariables) {\n        body.variables = filterOperationVariables(\n          body.variables,\n          operation.query\n        );\n      }\n\n      let controller: AbortController | undefined = new AbortController();\n      let cleanupController = () => {\n        controller = undefined;\n      };\n      if (options.signal) {\n        const externalSignal: AbortSignal = options.signal;\n        // in an ideal world we could use `AbortSignal.any` here, but\n        // React Native uses https://github.com/mysticatea/abort-controller as\n        // a polyfill for `AbortController`, and it does not support `AbortSignal.any`.\n\n        const listener = () => {\n          controller?.abort(externalSignal.reason);\n        };\n        externalSignal.addEventListener(\"abort\", listener, { once: true });\n        cleanupController = () => {\n          controller?.signal.removeEventListener(\"abort\", cleanupController);\n          controller = undefined;\n          // on cleanup, we need to stop listening to `options.signal` to avoid memory leaks\n          externalSignal.removeEventListener(\"abort\", listener);\n          cleanupController = noop;\n        };\n        // react native also does not support the addEventListener `signal` option\n        // so we have to simulate that ourself\n        controller.signal.addEventListener(\"abort\", cleanupController, {\n          once: true,\n        });\n      }\n      options.signal = controller.signal;\n\n      if (useGETForQueries && !isMutationOperation(operation.query)) {\n        options.method = \"GET\";\n      }\n\n      return new Observable((observer) => {\n        if (options.method === \"GET\") {\n          const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n          if (parseError) {\n            throw parseError;\n          }\n          chosenURI = newURI;\n        } else {\n          options.body = JSON.stringify(body);\n        }\n        // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n        // fall back to the *current* global window.fetch function (see issue\n        // #7832), or (if all else fails) the backupFetch function we saved when\n        // this module was first evaluated. This last option protects against the\n        // removal of window.fetch, which is unlikely but not impossible.\n        const currentFetch =\n          preferredFetch || maybe(() => fetch) || backupFetch;\n\n        const observerNext = observer.next.bind(observer);\n        currentFetch!(chosenURI, options)\n          .then((response) => {\n            operation.setContext({ response });\n            const ctype = response.headers?.get(\"content-type\");\n\n            if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n              return readMultipartBody(response, observerNext);\n            } else {\n              return parseAndCheckHttpResponse(operation)(response).then(\n                observerNext\n              );\n            }\n          })\n          .then(() => {\n            cleanupController();\n            observer.complete();\n          })\n          .catch((err) => {\n            cleanupController();\n            observer.error(err);\n          });\n\n        return () => {\n          // XXX support canceling this request\n          // https://developers.google.com/web/updates/2017/09/abortable-fetch\n          if (controller) controller.abort();\n        };\n      });\n    });\n  }\n}\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,MAAM;AAEjC,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,wBAAwB,QAAQ,2BAA2B;AACpE,SACEC,mBAAmB,EACnBC,uBAAuB,QAClB,0BAA0B;AACjC,SAASC,OAAO,QAAQ,sCAAsC;AAC9D,SAASC,OAAO,QAAQ,mCAAmC;AAC3D,SAASC,KAAK,QAAQ,2CAA2C;AAEjE,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SACEC,yBAAyB,EACzBC,iBAAiB,QACZ,gCAAgC;AACvC,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SACEC,cAAc,EACdC,kBAAkB,EAClBC,gCAAgC,QAC3B,+BAA+B;AACtC,SAASC,SAAS,QAAQ,gBAAgB;AAE1C,MAAMC,WAAW,GAAGT,KAAK,CAAC,MAAMU,KAAK,CAAC;AACtC,SAASC,IAAIA,CAAA,GAAI;AA+MjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAM,MAAOC,YAAa,SAAQlB,UAAU;EAC1CmB,YAAYC,OAAA,GAAgC,EAAE;IAC5C,IAAI;MACFC,GAAG,GAAG,UAAU;MAChB;MACAL,KAAK,EAAEM,cAAc;MACrBC,KAAK,GAAGZ,cAAc;MACtBa,iBAAiB;MACjBC,kBAAkB;MAClBC,gBAAgB;MAChBC,sBAAsB,GAAG,KAAK;MAC9B,GAAGC;IAAc,CAClB,GAAGR,OAAO;IAEX,IAAIhB,OAAO,EAAE;MACX;MACA;MACAG,YAAY,CAACe,cAAc,IAAIP,WAAW,CAAC;IAC7C;IAEA,MAAMc,UAAU,GAAG;MACjBC,IAAI,EAAEzB,OAAO,CAAC;QAAEmB,iBAAiB;QAAEC;MAAkB,CAAE,CAAC;MACxDL,OAAO,EAAEQ,cAAc,CAACG,YAAY;MACpCC,WAAW,EAAEJ,cAAc,CAACI,WAAW;MACvCC,OAAO,EAAEL,cAAc,CAACK;KACzB;IAED,KAAK,CAAEC,SAAS,IAAI;MAClB,IAAIC,SAAS,GAAGrB,SAAS,CAACoB,SAAS,EAAEb,GAAG,CAAC;MAEzC,MAAMe,OAAO,GAAGF,SAAS,CAACG,UAAU,EAAE;MAEtC,MAAMP,IAAI,GAAG;QAAE,GAAGM,OAAO,CAACN;MAAI,CAAE;MAChC,IAAI3B,uBAAuB,CAAC+B,SAAS,CAACI,KAAK,CAAC,EAAE;QAC5CR,IAAI,CAACS,MAAM,GAAG,CACZ,uDAAuD,EACvD,IAAIT,IAAI,CAACS,MAAM,IAAI,EAAE,CAAC,CACvB;MACH;MAEA,MAAMC,aAAa,GAAG;QACpBV,IAAI;QACJV,OAAO,EAAEgB,OAAO,CAACL,YAAY;QAC7BC,WAAW,EAAEI,OAAO,CAACJ,WAAW;QAChCC,OAAO,EAAEG,OAAO,CAACH;OAClB;MAED;MACA,MAAM;QAAEb,OAAO;QAAEqB;MAAI,CAAE,GAAG5B,gCAAgC,CACxDqB,SAAS,EACTX,KAAK,EACLX,kBAAkB,EAClBiB,UAAU,EACVW,aAAa,CACd;MAED,IAAIC,IAAI,CAACC,SAAS,IAAI,CAACf,sBAAsB,EAAE;QAC7Cc,IAAI,CAACC,SAAS,GAAGzC,wBAAwB,CACvCwC,IAAI,CAACC,SAAS,EACdR,SAAS,CAACI,KAAK,CAChB;MACH;MAEA,IAAIK,UAAU,GAAgC,IAAIC,eAAe,EAAE;MACnE,IAAIC,iBAAiB,GAAGA,CAAA,KAAK;QAC3BF,UAAU,GAAGG,SAAS;MACxB,CAAC;MACD,IAAI1B,OAAO,CAAC2B,MAAM,EAAE;QAClB,MAAMC,cAAc,GAAgB5B,OAAO,CAAC2B,MAAM;QAClD;QACA;QACA;QAEA,MAAME,QAAQ,GAAGA,CAAA,KAAK;UACpBN,UAAU,EAAEO,KAAK,CAACF,cAAc,CAACG,MAAM,CAAC;QAC1C,CAAC;QACDH,cAAc,CAACI,gBAAgB,CAAC,OAAO,EAAEH,QAAQ,EAAE;UAAEI,IAAI,EAAE;QAAI,CAAE,CAAC;QAClER,iBAAiB,GAAGA,CAAA,KAAK;UACvBF,UAAU,EAAEI,MAAM,CAACO,mBAAmB,CAAC,OAAO,EAAET,iBAAiB,CAAC;UAClEF,UAAU,GAAGG,SAAS;UACtB;UACAE,cAAc,CAACM,mBAAmB,CAAC,OAAO,EAAEL,QAAQ,CAAC;UACrDJ,iBAAiB,GAAG5B,IAAI;QAC1B,CAAC;QACD;QACA;QACA0B,UAAU,CAACI,MAAM,CAACK,gBAAgB,CAAC,OAAO,EAAEP,iBAAiB,EAAE;UAC7DQ,IAAI,EAAE;SACP,CAAC;MACJ;MACAjC,OAAO,CAAC2B,MAAM,GAAGJ,UAAU,CAACI,MAAM;MAElC,IAAIrB,gBAAgB,IAAI,CAACxB,mBAAmB,CAACgC,SAAS,CAACI,KAAK,CAAC,EAAE;QAC7DlB,OAAO,CAACmC,MAAM,GAAG,KAAK;MACxB;MAEA,OAAO,IAAIxD,UAAU,CAAEyD,QAAQ,IAAI;QACjC,IAAIpC,OAAO,CAACmC,MAAM,KAAK,KAAK,EAAE;UAC5B,MAAM;YAAEE,MAAM;YAAEC;UAAU,CAAE,GAAGhD,gBAAgB,CAACyB,SAAS,EAAEM,IAAI,CAAC;UAChE,IAAIiB,UAAU,EAAE;YACd,MAAMA,UAAU;UAClB;UACAvB,SAAS,GAAGsB,MAAM;QACpB,CAAC,MAAM;UACLrC,OAAO,CAACqB,IAAI,GAAGkB,IAAI,CAACC,SAAS,CAACnB,IAAI,CAAC;QACrC;QACA;QACA;QACA;QACA;QACA;QACA,MAAMoB,YAAY,GAChBvC,cAAc,IAAIhB,KAAK,CAAC,MAAMU,KAAK,CAAC,IAAID,WAAW;QAErD,MAAM+C,YAAY,GAAGN,QAAQ,CAACO,IAAI,CAACC,IAAI,CAACR,QAAQ,CAAC;QACjDK,YAAa,CAAC1B,SAAS,EAAEf,OAAO,CAAC,CAC9B6C,IAAI,CAAEC,QAAQ,IAAI;UACjBhC,SAAS,CAACiC,UAAU,CAAC;YAAED;UAAQ,CAAE,CAAC;UAClC,MAAME,KAAK,GAAGF,QAAQ,CAACjC,OAAO,EAAEoC,GAAG,CAAC,cAAc,CAAC;UAEnD,IAAID,KAAK,KAAK,IAAI,IAAI,oBAAoB,CAACE,IAAI,CAACF,KAAK,CAAC,EAAE;YACtD,OAAO3D,iBAAiB,CAACyD,QAAQ,EAAEJ,YAAY,CAAC;UAClD,CAAC,MAAM;YACL,OAAOtD,yBAAyB,CAAC0B,SAAS,CAAC,CAACgC,QAAQ,CAAC,CAACD,IAAI,CACxDH,YAAY,CACb;UACH;QACF,CAAC,CAAC,CACDG,IAAI,CAAC,MAAK;UACTpB,iBAAiB,EAAE;UACnBW,QAAQ,CAACe,QAAQ,EAAE;QACrB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAI;UACb5B,iBAAiB,EAAE;UACnBW,QAAQ,CAACkB,KAAK,CAACD,GAAG,CAAC;QACrB,CAAC,CAAC;QAEJ,OAAO,MAAK;UACV;UACA;UACA,IAAI9B,UAAU,EAAEA,UAAU,CAACO,KAAK,EAAE;QACpC,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { ApolloLink } from \"@apollo/client/link\";\nimport { ClientAwarenessLink } from \"@apollo/client/link/client-awareness\";\nimport { BaseHttpLink } from \"./BaseHttpLink.js\";\n/**\n * `HttpLink` is a terminating link that sends a GraphQL operation to a remote\n * endpoint over HTTP. It combines the functionality of `BaseHttpLink` and\n * `ClientAwarenessLink` into a single link.\n *\n * @remarks\n *\n * `HttpLink` supports both POST and GET requests, and you can configure HTTP\n * options on a per-operation basis. You can use these options for\n * authentication, persisted queries, dynamic URIs, and other granular updates.\n *\n * @example\n *\n * ```ts\n * import { HttpLink } from \"@apollo/client\";\n *\n * const link = new HttpLink({\n *   uri: \"http://localhost:4000/graphql\",\n *   // Additional options\n * });\n * ```\n */\nexport class HttpLink extends ApolloLink {\n  constructor(options = {}) {\n    const {\n      left,\n      right,\n      request\n    } = ApolloLink.from([new ClientAwarenessLink(options), new BaseHttpLink(options)]);\n    super(request);\n    Object.assign(this, {\n      left,\n      right\n    });\n  }\n}\n/**\n * @deprecated\n * Use `HttpLink` from `@apollo/client/link/http` instead.\n */\nexport const createHttpLink = (options = {}) => new HttpLink(options);","map":{"version":3,"names":["ApolloLink","ClientAwarenessLink","BaseHttpLink","HttpLink","constructor","options","left","right","request","from","Object","assign","createHttpLink"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/link/http/HttpLink.ts"],"sourcesContent":["import { ApolloLink } from \"@apollo/client/link\";\nimport { ClientAwarenessLink } from \"@apollo/client/link/client-awareness\";\n\nimport { BaseHttpLink } from \"./BaseHttpLink.js\";\n\nexport declare namespace HttpLink {\n  /**\n   * Options passed to `HttpLink` through [request context](https://apollographql.com/docs/react/api/link/introduction#managing-context). Previous\n   * non-terminating links in the link chain also can set these values to\n   * customize the behavior of `HttpLink` for each operation.\n   *\n   * > [!NOTE]\n   * > Some of these values can also be provided to the `HttpLink` constructor.\n   * > If a value is provided to both, the value in `context` takes precedence.\n   */\n  interface ContextOptions\n    extends BaseHttpLink.ContextOptions,\n      ClientAwarenessLink.ContextOptions {}\n\n  /**\n   * Options provided to the `HttpLink` constructor.\n   *\n   * > [!NOTE]\n   * > Some of these options are also available to override in [request context](https://apollographql.com/docs/react/api/link/introduction#managing-context).\n   * > Context options override the options passed to the constructor. Treat\n   * > these options as default values that are used when the request context\n   * > does not override the value.\n   */\n  interface Options extends BaseHttpLink.Options, ClientAwarenessLink.Options {}\n}\n\n/**\n * `HttpLink` is a terminating link that sends a GraphQL operation to a remote\n * endpoint over HTTP. It combines the functionality of `BaseHttpLink` and\n * `ClientAwarenessLink` into a single link.\n *\n * @remarks\n *\n * `HttpLink` supports both POST and GET requests, and you can configure HTTP\n * options on a per-operation basis. You can use these options for\n * authentication, persisted queries, dynamic URIs, and other granular updates.\n *\n * @example\n *\n * ```ts\n * import { HttpLink } from \"@apollo/client\";\n *\n * const link = new HttpLink({\n *   uri: \"http://localhost:4000/graphql\",\n *   // Additional options\n * });\n * ```\n */\nexport class HttpLink extends ApolloLink {\n  constructor(options: HttpLink.Options = {}) {\n    const { left, right, request } = ApolloLink.from([\n      new ClientAwarenessLink(options),\n      new BaseHttpLink(options),\n    ]);\n    super(request);\n    Object.assign(this, { left, right });\n  }\n}\n\n/**\n * @deprecated\n * Use `HttpLink` from `@apollo/client/link/http` instead.\n */\nexport const createHttpLink = (options: HttpLink.Options = {}) =>\n  new HttpLink(options);\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,qBAAqB;AAChD,SAASC,mBAAmB,QAAQ,sCAAsC;AAE1E,SAASC,YAAY,QAAQ,mBAAmB;AA4BhD;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,MAAOC,QAAS,SAAQH,UAAU;EACtCI,YAAYC,OAAA,GAA4B,EAAE;IACxC,MAAM;MAAEC,IAAI;MAAEC,KAAK;MAAEC;IAAO,CAAE,GAAGR,UAAU,CAACS,IAAI,CAAC,CAC/C,IAAIR,mBAAmB,CAACI,OAAO,CAAC,EAChC,IAAIH,YAAY,CAACG,OAAO,CAAC,CAC1B,CAAC;IACF,KAAK,CAACG,OAAO,CAAC;IACdE,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;MAAEL,IAAI;MAAEC;IAAK,CAAE,CAAC;EACtC;;AAGF;;;;AAIA,OAAO,MAAMK,cAAc,GAAGA,CAACP,OAAA,GAA4B,EAAE,KAC3D,IAAIF,QAAQ,CAACE,OAAO,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
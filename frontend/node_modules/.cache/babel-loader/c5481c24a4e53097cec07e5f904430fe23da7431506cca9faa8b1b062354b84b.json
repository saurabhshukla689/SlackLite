{"ast":null,"code":"// Checks the document for errors and throws an exception if there is an error.\nimport { WeakCache } from \"@wry/caches\";\nimport { Kind, visit } from \"graphql\";\nimport { wrap } from \"optimism\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { invariant, newInvariantError } from \"@apollo/client/utilities/invariant\";\nimport { cacheSizes } from \"../caching/sizes.js\";\nimport { getOperationName } from \"./getOperationName.js\";\n/**\n* Checks the document for errors and throws an exception if there is an error.\n*\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/\nexport const checkDocument = wrap((doc, expectedType) => {\n  invariant(doc && doc.kind === \"Document\", 1);\n  const operations = doc.definitions.filter(d => d.kind === \"OperationDefinition\");\n  if (__DEV__) {\n    doc.definitions.forEach(definition => {\n      if (definition.kind !== \"OperationDefinition\" && definition.kind !== \"FragmentDefinition\") {\n        throw newInvariantError(2, definition.kind);\n      }\n    });\n    invariant(operations.length <= 1, 3, operations.length);\n  }\n  if (expectedType) {\n    invariant(operations.length == 1 && operations[0].operation === expectedType, 4, expectedType, expectedType, operations[0].operation);\n  }\n  visit(doc, {\n    Field(field, _, __, path) {\n      if (field.alias && (field.alias.value === \"__typename\" || field.alias.value.startsWith(\"__ac_\")) && field.alias.value !== field.name.value) {\n        // not using `invariant` so path calculation only happens in error case\n        let current = doc,\n          fieldPath = [];\n        for (const key of path) {\n          current = current[key];\n          if (current.kind === Kind.FIELD) {\n            fieldPath.push(current.alias?.value || current.name.value);\n          }\n        }\n        fieldPath.splice(-1, 1, field.name.value);\n        throw newInvariantError(5, field.alias.value, fieldPath.join(\".\"), operations[0].operation, getOperationName(doc, \"(anonymous)\"));\n      }\n    }\n  });\n}, {\n  max: cacheSizes[\"checkDocument\"] || 2000 /* defaultCacheSizes[\"checkDocument\"] */,\n  cache: WeakCache\n});","map":{"version":3,"names":["WeakCache","Kind","visit","wrap","__DEV__","invariant","newInvariantError","cacheSizes","getOperationName","checkDocument","doc","expectedType","kind","operations","definitions","filter","d","forEach","definition","length","operation","Field","field","_","__","path","alias","value","startsWith","name","current","fieldPath","key","FIELD","push","splice","join","max","cache"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/utilities/internal/checkDocument.ts"],"sourcesContent":["// Checks the document for errors and throws an exception if there is an error.\n\nimport { WeakCache } from \"@wry/caches\";\nimport type { ASTNode } from \"graphql\";\nimport type { DocumentNode, OperationTypeNode } from \"graphql\";\nimport { Kind, visit } from \"graphql\";\nimport { wrap } from \"optimism\";\n\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport {\n  invariant,\n  newInvariantError,\n} from \"@apollo/client/utilities/invariant\";\n\nimport { defaultCacheSizes } from \"../../utilities/caching/sizes.js\";\nimport { cacheSizes } from \"../caching/sizes.js\";\n\nimport { getOperationName } from \"./getOperationName.js\";\n\n/**\n * Checks the document for errors and throws an exception if there is an error.\n *\n * @internal\n */\nexport const checkDocument: (\n  doc: DocumentNode,\n  expectedType?: OperationTypeNode\n) => void = wrap(\n  (doc: DocumentNode, expectedType?: OperationTypeNode): void => {\n    invariant(\n      doc && doc.kind === \"Document\",\n      `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`\n    );\n    const operations = doc.definitions.filter(\n      (d) => d.kind === \"OperationDefinition\"\n    );\n    if (__DEV__) {\n      doc.definitions.forEach((definition) => {\n        if (\n          definition.kind !== \"OperationDefinition\" &&\n          definition.kind !== \"FragmentDefinition\"\n        ) {\n          throw newInvariantError(\n            `Schema type definitions not allowed in queries. Found: \"%s\"`,\n            definition.kind\n          );\n        }\n      });\n\n      invariant(\n        operations.length <= 1,\n        `Ambiguous GraphQL document: contains %s operations`,\n        operations.length\n      );\n    }\n\n    if (expectedType) {\n      invariant(\n        operations.length == 1 && operations[0].operation === expectedType,\n        `Running a %s requires a graphql ` + `%s, but a %s was used instead.`,\n        expectedType,\n        expectedType,\n        operations[0].operation\n      );\n    }\n\n    visit(doc, {\n      Field(field, _, __, path) {\n        if (\n          field.alias &&\n          (field.alias.value === \"__typename\" ||\n            field.alias.value.startsWith(\"__ac_\")) &&\n          field.alias.value !== field.name.value\n        ) {\n          // not using `invariant` so path calculation only happens in error case\n          let current: ASTNode = doc,\n            fieldPath: string[] = [];\n          for (const key of path) {\n            current = (current as any)[key];\n            if (current.kind === Kind.FIELD) {\n              fieldPath.push(current.alias?.value || current.name.value);\n            }\n          }\n          fieldPath.splice(-1, 1, field.name.value);\n\n          throw newInvariantError(\n            '`%s` is a forbidden field alias name in the selection set for field `%s` in %s \"%s\".',\n            field.alias.value,\n            fieldPath.join(\".\"),\n            operations[0].operation,\n            getOperationName(doc, \"(anonymous)\")\n          );\n        }\n      },\n    });\n  },\n  {\n    max: cacheSizes[\"checkDocument\"] || defaultCacheSizes[\"checkDocument\"],\n    cache: WeakCache,\n  }\n);\n"],"mappings":"AAAA;AAEA,SAASA,SAAT,QAA0B,aAAa;AAGvC,SAASC,IAAI,EAAEC,KAAf,QAA4B,SAAS;AACrC,SAASC,IAAT,QAAqB,UAAU;AAE/B,SAASC,OAAT,QAAwB,sCAAsC;AAC9D,SACEC,SAAS,EACTC,iBAAiB,QACZ,oCAAoC;AAG3C,SAASC,UAAT,QAA2B,qBAAqB;AAEhD,SAASC,gBAAT,QAAiC,uBAAuB;;;;;;;;AAOxD,OAAO,MAAMC,aAAb,GAGYN,IAAI,CACd,CAACO,GAAiB,EAAEC,YAAgC,KAJtD;EAKIN,SAAJ,CACMK,GADN,IACaA,GAAG,CAACE,IADjB,KAC0B,UAD1B,IAIK;EACD,MAAMC,UAAV,GAAuBH,GAAG,CAACI,WAAW,CAACC,MAAM,CACtCC,CAAC,IAAKA,CAAC,CAACJ,IADf,KACwB,qBAAqB,CACxC;EACD,IAAIR,OAAO,EAAE;IACXM,GAAG,CAACI,WAAW,CAACG,OAAO,CAAEC,UAAU,IAAzC;MACQ,IACEA,UAAU,CAACN,IADrB,KAC8B,qBAD9B,IAEUM,UAAU,CAACN,IAArB,KAA8B,oBAAoB,EACxC;QACA,MAAMN,iBAAhB,IAEYY,UAAU,CAACN,IAFvB,CAGW;MACH;IACF,CAAC,CAAC;IAEFP,SAAN,CACQQ,UAAU,CAACM,MADnB,IAC6B,MAErBN,UAAU,CAACM,MAHnB,CAIO;EACH;EAEA,IAAIR,YAAY,EAAE;IAChBN,SAAN,CACQQ,UAAU,CAACM,MADnB,IAC6B,KAAKN,UAAU,CAAC,CAAC,CAAC,CAACO,SADhD,KAC8DT,YAD9D,E,GAGQA,YAHR,EAIQA,YAJR,EAKQE,UAAU,CAAC,CAAC,CAAC,CAACO,S,CACf;EACH;EAEAlB,KAAK,CAACQ,GAAG,EAAE;IACTW,KAAKA,CAACC,KAAK,EAAEC,CAAC,EAAEC,EAAE,EAAEC,IAAI,EAA9B;MACQ,IACEH,KAAK,CAACI,KADhB,KAEWJ,KAAK,CAACI,KAAK,CAACC,KAAvB,KAAiC,YAAjC,IACYL,KAAK,CAACI,KAAK,CAACC,KAAK,CAACC,UAAU,CAAC,OAAO,CAAC,KACvCN,KAAK,CAACI,KAAK,CAACC,KAAtB,KAAgCL,KAAK,CAACO,IAAI,CAACF,KAAK,EACtC;QACA;QACA,IAAIG,OAAd,GAAiCpB,GAAG;UACxBqB,SADZ,GACkC,EAAE;QAC1B,KAAK,MAAMC,GAArB,IAA4BP,IAAI,EAAE;UACtBK,OAAZ,GAAuBA,OAAe,CAACE,GAAG,CAAC;UAC/B,IAAIF,OAAO,CAAClB,IAAxB,KAAiCX,IAAI,CAACgC,KAAK,EAAE;YAC/BF,SAAS,CAACG,IAAI,CAACJ,OAAO,CAACJ,KAAK,EAAEC,KAA5C,IAAqDG,OAAO,CAACD,IAAI,CAACF,KAAK,CAAC;UAC5D;QACF;QACAI,SAAS,CAACI,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAEb,KAAK,CAACO,IAAI,CAACF,KAAK,CAAC;QAEzC,MAAMrB,iBAAhB,C,GAEYgB,KAAK,CAACI,KAAK,CAACC,KAFxB,EAGYI,SAAS,CAACK,IAAI,CAAC,GAAG,GAClBvB,UAAU,CAAC,CAAC,CAAC,CAACO,SAJ1B,EAKYZ,gBAAgB,CAACE,GAAG,EAAE,aAAa,C,CACpC;MACH;IACF;EACN,CAAK,CAAC;AACJ,CAAC,EACD;EACE2B,GAAG,EAAE9B,UAAU,CAAC,eAAe,KAAnC;EACI+B,KAAK,EAAEtC;AACX,CAAG,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createFragmentMap, getFragmentDefinitions, getOperationDefinition } from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\nimport { maskDefinition } from \"./maskDefinition.js\";\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/\nexport function maskOperation(data, document, cache) {\n  const definition = getOperationDefinition(document);\n  invariant(definition, 43);\n  if (data == null) {\n    // Maintain the original `null` or `undefined` value\n    return data;\n  }\n  return maskDefinition(data, definition.selectionSet, {\n    operationType: definition.operation,\n    operationName: definition.name?.value,\n    fragmentMap: createFragmentMap(getFragmentDefinitions(document)),\n    cache,\n    mutableTargets: new WeakMap(),\n    knownChanged: new WeakSet()\n  });\n}","map":{"version":3,"names":["createFragmentMap","getFragmentDefinitions","getOperationDefinition","invariant","maskDefinition","maskOperation","data","document","cache","definition","selectionSet","operationType","operation","operationName","name","value","fragmentMap","mutableTargets","WeakMap","knownChanged","WeakSet"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/masking/maskOperation.ts"],"sourcesContent":["import type {\n  ApolloCache,\n  DocumentNode,\n  TypedDocumentNode,\n} from \"@apollo/client\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport {\n  createFragmentMap,\n  getFragmentDefinitions,\n  getOperationDefinition,\n} from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport { maskDefinition } from \"./maskDefinition.js\";\n\n/** @internal */\nexport function maskOperation<TData = unknown>(\n  data: TData,\n  document: DocumentNode | TypedDocumentNode<TData>,\n  cache: ApolloCache\n): TData {\n  const definition = getOperationDefinition(document);\n\n  invariant(\n    definition,\n    \"Expected a parsed GraphQL document with a query, mutation, or subscription.\"\n  );\n\n  if (data == null) {\n    // Maintain the original `null` or `undefined` value\n    return data;\n  }\n\n  return maskDefinition(data, definition.selectionSet, {\n    operationType: definition.operation,\n    operationName: definition.name?.value,\n    fragmentMap: createFragmentMap(getFragmentDefinitions(document)),\n    cache,\n    mutableTargets: new WeakMap(),\n    knownChanged: new WeakSet(),\n  });\n}\n"],"mappings":"AAMA,SACEA,iBAAiB,EACjBC,sBAAsB,EACtBC,sBAAsB,QACjB,mCAAmC;AAC1C,SAASC,SAAT,QAA0B,oCAAoC;AAE9D,SAASC,cAAT,QAA+B,qBAAqB;;;;;;AAGpD,gBAAgBC,aAAaA,CAC3BC,IAAW,EACXC,QAAiD,EACjDC,KAAkB,EAHpB;EAKE,MAAMC,UAAR,GAAqBP,sBAAsB,CAACK,QAAQ,CAAC;EAEnDJ,SAAF,CACIM,UADJ,KAGG;EAED,IAAIH,IAAN,IAAc,IAAI,EAAE;IAChB;IACA,OAAOA,IAAI;EACb;EAEA,OAAOF,cAAc,CAACE,IAAI,EAAEG,UAAU,CAACC,YAAY,EAAE;IACnDC,aAAa,EAAEF,UAAU,CAACG,SAAS;IACnCC,aAAa,EAAEJ,UAAU,CAACK,IAAI,EAAEC,KAAK;IACrCC,WAAW,EAAEhB,iBAAiB,CAACC,sBAAsB,CAACM,QAAQ,CAAC,CAAC;IAChEC,KAAK;IACLS,cAAc,EAAE,IAAIC,OAAO,CAA/B,CAAiC;IAC7BC,YAAY,EAAE,IAAIC,OAAO,CAA7B;EACA,CAAG,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
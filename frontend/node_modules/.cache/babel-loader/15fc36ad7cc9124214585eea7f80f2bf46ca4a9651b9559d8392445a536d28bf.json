{"ast":null,"code":"import { invariant } from \"@apollo/client/utilities/invariant\";\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/\nexport function shouldInclude({\n  directives\n}, variables) {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(directives).every(({\n    directive,\n    ifArgument\n  }) => {\n    let evaledValue = false;\n    if (ifArgument.value.kind === \"Variable\") {\n      evaledValue = variables && variables[ifArgument.value.name.value];\n      invariant(evaledValue !== void 0, 15, directive.name.value);\n    } else {\n      evaledValue = ifArgument.value.value;\n    }\n    return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n  });\n}\nfunction isInclusionDirective({\n  name: {\n    value\n  }\n}) {\n  return value === \"skip\" || value === \"include\";\n}\nfunction getInclusionDirectives(directives) {\n  const result = [];\n  if (directives && directives.length) {\n    directives.forEach(directive => {\n      if (!isInclusionDirective(directive)) return;\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n      invariant(directiveArguments && directiveArguments.length === 1, 16, directiveName);\n      const ifArgument = directiveArguments[0];\n      invariant(ifArgument.name && ifArgument.name.value === \"if\", 17, directiveName);\n      const ifValue = ifArgument.value;\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(ifValue && (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"), 18, directiveName);\n      result.push({\n        directive,\n        ifArgument\n      });\n    });\n  }\n  return result;\n}","map":{"version":3,"names":["invariant","shouldInclude","directives","variables","length","getInclusionDirectives","every","directive","ifArgument","evaledValue","value","kind","name","isInclusionDirective","result","forEach","directiveArguments","arguments","directiveName","ifValue","push"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/utilities/internal/shouldInclude.ts"],"sourcesContent":["import type {\n  ArgumentNode,\n  BooleanValueNode,\n  DirectiveNode,\n  SelectionNode,\n  ValueNode,\n  VariableNode,\n} from \"graphql\";\n\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\n/** @internal */\nexport function shouldInclude(\n  { directives }: SelectionNode,\n  variables?: Record<string, any>\n): boolean {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(directives).every(\n    ({ directive, ifArgument }) => {\n      let evaledValue: boolean = false;\n      if (ifArgument.value.kind === \"Variable\") {\n        evaledValue =\n          variables && variables[(ifArgument.value as VariableNode).name.value];\n        invariant(\n          evaledValue !== void 0,\n          `Invalid variable referenced in @%s directive.`,\n          directive.name.value\n        );\n      } else {\n        evaledValue = (ifArgument.value as BooleanValueNode).value;\n      }\n      return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n    }\n  );\n}\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === \"skip\" || value === \"include\";\n}\n\ntype InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>\n): InclusionDirectives {\n  const result: InclusionDirectives = [];\n\n  if (directives && directives.length) {\n    directives.forEach((directive) => {\n      if (!isInclusionDirective(directive)) return;\n\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n\n      invariant(\n        directiveArguments && directiveArguments.length === 1,\n        `Incorrect number of arguments for the @%s directive.`,\n        directiveName\n      );\n\n      const ifArgument = directiveArguments![0];\n      invariant(\n        ifArgument.name && ifArgument.name.value === \"if\",\n        `Invalid argument for the @%s directive.`,\n        directiveName\n      );\n\n      const ifValue: ValueNode = ifArgument.value;\n\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(\n        ifValue &&\n          (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"),\n        `Argument for the @%s directive must be a variable or a boolean value.`,\n        directiveName\n      );\n\n      result.push({ directive, ifArgument });\n    });\n  }\n\n  return result;\n}\n"],"mappings":"AASA,SAASA,SAAT,QAA0B,oCAAoC;;;;;;AAG9D,gBAAgBC,aAAaA,CAC3B;EAAEC;AADJ,CAC+B,EAC7BC,SAA+B,EAFjC;EAIE,IAAI,CAACD,UAAP,IAAqB,CAACA,UAAU,CAACE,MAAM,EAAE;IACrC,OAAO,IAAI;EACb;SACOC,sBAAsB,CAACH,UAAU,CAAC,CAACI,KAAK,CAC7C,CAAC;IAAEC,SAAS;IAAEC;EADlB,CAC8B,KAD9B;IAEM,IAAIC,WAAV,GAAiC,KAAK;IAChC,IAAID,UAAU,CAACE,KAAK,CAACC,IAA3B,KAAoC,UAAU,EAAE;MACxCF,WAAR,GACUN,SAAV,IAAuBA,SAAS,CAAEK,UAAU,CAACE,KAAsB,CAACE,IAAI,CAACF,KAAK,CAAC;MACvEV,SAAR,CACUS,WADV,KAC0B,KAAK,OAErBF,SAAS,CAACK,IAAI,CAACF,KAHzB,CAIS;IACH,OAAO;MACLD,WAAR,GAAuBD,UAAU,CAACE,KAA0B,CAACA,KAAK;IAC5D;IACA,OAAOH,SAAS,CAACK,IAAI,CAACF,KAA5B,KAAsC,MAAtC,GAA+C,CAACD,WAAhD,GAA8DA,WAAW;EACrE,CAAC;AAEL;AAEA,SAASI,oBAAoBA,CAAC;EAAED,IAAI,EAAE;IAAEF;EAAxC;AAAA,CAAgE,EAAhE;EACE,OAAOA,KAAT,KAAmB,MAAnB,IAA6BA,KAA7B,KAAuC,SAAS;AAChD;AAOA,SAASL,sBAAsBA,CAC7BH,UAAwC,EAD1C;EAGE,MAAMY,MAAR,GAAsC,EAAE;EAEtC,IAAIZ,UAAN,IAAoBA,UAAU,CAACE,MAAM,EAAE;IACnCF,UAAU,CAACa,OAAO,CAAER,SAAS,IAAjC;MACM,IAAI,CAACM,oBAAoB,CAACN,SAAS,CAAC,EAAE;MAEtC,MAAMS,kBAAZ,GAAiCT,SAAS,CAACU,SAAS;MAC9C,MAAMC,aAAZ,GAA4BX,SAAS,CAACK,IAAI,CAACF,KAAK;MAE1CV,SAAN,CACQgB,kBADR,IAC8BA,kBAAkB,CAACZ,MADjD,KAC4D,OAEpDc,aAHR,CAIO;MAED,MAAMV,UAAZ,GAAyBQ,kBAAmB,CAAC,CAAC,CAAC;MACzChB,SAAN,CACQQ,UAAU,CAACI,IADnB,IAC2BJ,UAAU,CAACI,IAAI,CAACF,KAD3C,KACqD,IADrD,MAGQQ,aAHR,CAIO;MAED,MAAMC,OAAZ,GAAiCX,UAAU,CAACE,KAAK;MAE3C;MACAV,SAAN,CACQmB,OADR,KAEWA,OAAO,CAACR,IAAnB,KAA4B,UAA5B,IAA0CQ,OAAO,CAACR,IAAlD,KAA2D,cAAc,OAEjEO,aAFR,CAGO;MAEDJ,MAAM,CAACM,IAAI,CAAC;QAAEb,SAAS;QAAEC;MAA/B,CAA2C,CAAC;IACxC,CAAC,CAAC;EACJ;EAEA,OAAOM,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
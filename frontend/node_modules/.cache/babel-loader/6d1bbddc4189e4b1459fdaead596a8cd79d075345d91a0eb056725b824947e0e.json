{"ast":null,"code":"import { WeakCache } from \"@wry/caches\";\nimport { visit } from \"graphql\";\nimport { wrap } from \"optimism\";\nimport { cacheSizes } from \"@apollo/client/utilities\";\nimport { getFragmentDefinitions } from \"@apollo/client/utilities/internal\";\n// As long as createFragmentRegistry is not imported or used, the\n// FragmentRegistry example implementation provided below should not be bundled\n// (by tree-shaking bundlers like Rollup), because the implementation of\n// InMemoryCache refers only to the TypeScript interface FragmentRegistryAPI,\n// never the concrete implementation FragmentRegistry (which is deliberately not\n// exported from this module).\nexport function createFragmentRegistry(...fragments) {\n  return new FragmentRegistry(...fragments);\n}\nclass FragmentRegistry {\n  registry = {};\n  // Call `createFragmentRegistry` instead of invoking the\n  // FragmentRegistry constructor directly. This reserves the constructor for\n  // future configuration of the FragmentRegistry.\n  constructor(...fragments) {\n    this.resetCaches();\n    if (fragments.length) {\n      this.register(...fragments);\n    }\n  }\n  register(...fragments) {\n    const definitions = new Map();\n    fragments.forEach(doc => {\n      getFragmentDefinitions(doc).forEach(node => {\n        definitions.set(node.name.value, node);\n      });\n    });\n    definitions.forEach((node, name) => {\n      if (node !== this.registry[name]) {\n        this.registry[name] = node;\n        this.invalidate(name);\n      }\n    });\n    return this;\n  }\n  // Overridden in the resetCaches method below.\n  invalidate(name) {}\n  resetCaches() {\n    const proto = FragmentRegistry.prototype;\n    this.invalidate = (this.lookup = wrap(proto.lookup.bind(this), {\n      makeCacheKey: arg => arg,\n      max: cacheSizes[\"fragmentRegistry.lookup\"] || 1000 /* defaultCacheSizes[\"fragmentRegistry.lookup\"] */\n    })).dirty; // This dirty function is bound to the wrapped lookup method.\n    this.transform = wrap(proto.transform.bind(this), {\n      cache: WeakCache,\n      max: cacheSizes[\"fragmentRegistry.transform\"] || 2000 /* defaultCacheSizes[\"fragmentRegistry.transform\"] */\n    });\n    this.findFragmentSpreads = wrap(proto.findFragmentSpreads.bind(this), {\n      cache: WeakCache,\n      max: cacheSizes[\"fragmentRegistry.findFragmentSpreads\"] || 4000 /* defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"] */\n    });\n  }\n  /*\n   * Note:\n   * This method is only memoized so it can serve as a dependency to `tranform`,\n   * so calling `invalidate` will invalidate cache entries for `transform`.\n   */\n  lookup(fragmentName) {\n    return this.registry[fragmentName] || null;\n  }\n  transform(document) {\n    const defined = new Map();\n    getFragmentDefinitions(document).forEach(def => {\n      defined.set(def.name.value, def);\n    });\n    const unbound = new Set();\n    const enqueue = spreadName => {\n      if (!defined.has(spreadName)) {\n        unbound.add(spreadName);\n      }\n    };\n    const enqueueChildSpreads = node => Object.keys(this.findFragmentSpreads(node)).forEach(enqueue);\n    enqueueChildSpreads(document);\n    const missing = [];\n    const map = {};\n    // This Set forEach loop can be extended during iteration by adding\n    // additional strings to the unbound set.\n    unbound.forEach(fragmentName => {\n      const knownFragmentDef = defined.get(fragmentName);\n      if (knownFragmentDef) {\n        enqueueChildSpreads(map[fragmentName] = knownFragmentDef);\n      } else {\n        missing.push(fragmentName);\n        const def = this.lookup(fragmentName);\n        if (def) {\n          enqueueChildSpreads(map[fragmentName] = def);\n        }\n      }\n    });\n    if (missing.length) {\n      const defsToAppend = [];\n      missing.forEach(name => {\n        const def = map[name];\n        if (def) {\n          defsToAppend.push(def);\n        }\n      });\n      if (defsToAppend.length) {\n        document = {\n          ...document,\n          definitions: document.definitions.concat(defsToAppend)\n        };\n      }\n    }\n    return document;\n  }\n  findFragmentSpreads(root) {\n    const spreads = {};\n    visit(root, {\n      FragmentSpread(node) {\n        spreads[node.name.value] = node;\n      }\n    });\n    return spreads;\n  }\n}","map":{"version":3,"names":["WeakCache","visit","wrap","cacheSizes","getFragmentDefinitions","createFragmentRegistry","fragments","FragmentRegistry","registry","constructor","resetCaches","length","register","definitions","Map","forEach","doc","node","set","name","value","invalidate","proto","prototype","lookup","bind","makeCacheKey","arg","max","dirty","transform","cache","findFragmentSpreads","fragmentName","document","defined","def","unbound","Set","enqueue","spreadName","has","add","enqueueChildSpreads","Object","keys","missing","map","knownFragmentDef","get","push","defsToAppend","concat","root","spreads","FragmentSpread"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/cache/inmemory/fragmentRegistry.ts"],"sourcesContent":["import { WeakCache } from \"@wry/caches\";\nimport type {\n  ASTNode,\n  DocumentNode,\n  FragmentDefinitionNode,\n  FragmentSpreadNode,\n} from \"graphql\";\nimport { visit } from \"graphql\";\nimport { wrap } from \"optimism\";\n\nimport { cacheSizes } from \"@apollo/client/utilities\";\nimport type { FragmentMap } from \"@apollo/client/utilities/internal\";\nimport { getFragmentDefinitions } from \"@apollo/client/utilities/internal\";\n\nimport { defaultCacheSizes } from \"../../utilities/caching/sizes.js\";\nexport interface FragmentRegistryAPI {\n  register(...fragments: DocumentNode[]): this;\n  lookup(fragmentName: string): FragmentDefinitionNode | null;\n  transform<D extends DocumentNode>(document: D): D;\n  resetCaches(): void;\n}\n\n// As long as createFragmentRegistry is not imported or used, the\n// FragmentRegistry example implementation provided below should not be bundled\n// (by tree-shaking bundlers like Rollup), because the implementation of\n// InMemoryCache refers only to the TypeScript interface FragmentRegistryAPI,\n// never the concrete implementation FragmentRegistry (which is deliberately not\n// exported from this module).\nexport function createFragmentRegistry(\n  ...fragments: DocumentNode[]\n): FragmentRegistryAPI {\n  return new FragmentRegistry(...fragments);\n}\n\nclass FragmentRegistry implements FragmentRegistryAPI {\n  private registry: FragmentMap = {};\n\n  // Call `createFragmentRegistry` instead of invoking the\n  // FragmentRegistry constructor directly. This reserves the constructor for\n  // future configuration of the FragmentRegistry.\n  constructor(...fragments: DocumentNode[]) {\n    this.resetCaches();\n    if (fragments.length) {\n      this.register(...fragments);\n    }\n  }\n\n  public register(...fragments: DocumentNode[]): this {\n    const definitions = new Map<string, FragmentDefinitionNode>();\n    fragments.forEach((doc: DocumentNode) => {\n      getFragmentDefinitions(doc).forEach((node) => {\n        definitions.set(node.name.value, node);\n      });\n    });\n\n    definitions.forEach((node, name) => {\n      if (node !== this.registry[name]) {\n        this.registry[name] = node;\n        this.invalidate(name);\n      }\n    });\n\n    return this;\n  }\n\n  // Overridden in the resetCaches method below.\n  private invalidate(name: string) {}\n\n  public resetCaches() {\n    const proto = FragmentRegistry.prototype;\n    this.invalidate = (this.lookup = wrap(proto.lookup.bind(this), {\n      makeCacheKey: (arg) => arg,\n      max:\n        cacheSizes[\"fragmentRegistry.lookup\"] ||\n        defaultCacheSizes[\"fragmentRegistry.lookup\"],\n    })).dirty; // This dirty function is bound to the wrapped lookup method.\n    this.transform = wrap(proto.transform.bind(this), {\n      cache: WeakCache,\n      max:\n        cacheSizes[\"fragmentRegistry.transform\"] ||\n        defaultCacheSizes[\"fragmentRegistry.transform\"],\n    });\n    this.findFragmentSpreads = wrap(proto.findFragmentSpreads.bind(this), {\n      cache: WeakCache,\n      max:\n        cacheSizes[\"fragmentRegistry.findFragmentSpreads\"] ||\n        defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"],\n    });\n  }\n\n  /*\n   * Note:\n   * This method is only memoized so it can serve as a dependency to `tranform`,\n   * so calling `invalidate` will invalidate cache entries for `transform`.\n   */\n  public lookup(fragmentName: string): FragmentDefinitionNode | null {\n    return this.registry[fragmentName] || null;\n  }\n\n  public transform<D extends DocumentNode>(document: D): D {\n    const defined = new Map<string, FragmentDefinitionNode>();\n    getFragmentDefinitions(document).forEach((def) => {\n      defined.set(def.name.value, def);\n    });\n\n    const unbound = new Set<string>();\n    const enqueue = (spreadName: string) => {\n      if (!defined.has(spreadName)) {\n        unbound.add(spreadName);\n      }\n    };\n\n    const enqueueChildSpreads = (node: ASTNode) =>\n      Object.keys(this.findFragmentSpreads(node)).forEach(enqueue);\n\n    enqueueChildSpreads(document);\n\n    const missing: string[] = [];\n    const map: FragmentMap = {};\n\n    // This Set forEach loop can be extended during iteration by adding\n    // additional strings to the unbound set.\n    unbound.forEach((fragmentName) => {\n      const knownFragmentDef = defined.get(fragmentName);\n      if (knownFragmentDef) {\n        enqueueChildSpreads((map[fragmentName] = knownFragmentDef));\n      } else {\n        missing.push(fragmentName);\n        const def = this.lookup(fragmentName);\n        if (def) {\n          enqueueChildSpreads((map[fragmentName] = def));\n        }\n      }\n    });\n\n    if (missing.length) {\n      const defsToAppend: FragmentDefinitionNode[] = [];\n      missing.forEach((name) => {\n        const def = map[name];\n        if (def) {\n          defsToAppend.push(def);\n        }\n      });\n\n      if (defsToAppend.length) {\n        document = {\n          ...document,\n          definitions: document.definitions.concat(defsToAppend),\n        };\n      }\n    }\n\n    return document;\n  }\n\n  public findFragmentSpreads(root: ASTNode): FragmentSpreadMap {\n    const spreads: FragmentSpreadMap = {};\n\n    visit(root, {\n      FragmentSpread(node) {\n        spreads[node.name.value] = node;\n      },\n    });\n\n    return spreads;\n  }\n}\n\ninterface FragmentSpreadMap {\n  [fragmentSpreadName: string]: FragmentSpreadNode;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
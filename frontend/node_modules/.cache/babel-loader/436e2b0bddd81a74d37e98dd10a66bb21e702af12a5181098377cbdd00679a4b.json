{"ast":null,"code":"import { brand, isBranded } from \"./utils.js\";\n/**\n * Represents a failure to parse the response as JSON from the server. This\n * error helps debug issues where the server returns malformed JSON or non-JSON\n * content.\n *\n * @remarks\n *\n * This error occurs when Apollo Client receives a response from the server but\n * cannot parse it as valid JSON. This typically happens when the server returns\n * HTML error pages, plain text responses, or malformed JSON instead of the\n * expected GraphQL JSON response format.\n *\n * @example\n *\n * ```ts\n * import { ServerParseError } from \"@apollo/client/errors\";\n *\n * // Check if an error is a ServerParseError instance\n * if (ServerParseError.is(error)) {\n *   console.log(`Failed to parse response from ${error.response.url}`);\n *   console.log(`Raw response: ${error.bodyText}`);\n *   console.log(`Status code: ${error.statusCode}`);\n *\n *   // Access the original parse error\n *   console.log(`Parse error: ${error.cause}`);\n * }\n * ```\n */\nexport class ServerParseError extends Error {\n  /**\n   * A method that determines whether an error is a `ServerParseError`\n   * object. This method enables TypeScript to narrow the error type.\n   *\n   * @example\n   *\n   * ```ts\n   * if (ServerParseError.is(error)) {\n   *   // TypeScript now knows `error` is a ServerParseError object\n   *   console.log(error.statusCode);\n   * }\n   * ```\n   */\n  static is(error) {\n    return isBranded(error, \"ServerParseError\");\n  }\n  /**\n  * The raw [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) object provided by the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n  */\n  response;\n  /**\n  * The status code returned by the server in the response. This is provided\n  * as a shortcut for `response.status`.\n  */\n  statusCode;\n  /**\n  * The raw response body text.\n  */\n  bodyText;\n  constructor(originalParseError, options) {\n    super(originalParseError instanceof Error ? originalParseError.message : \"Could not parse server response\", {\n      cause: originalParseError\n    });\n    this.name = \"ServerParseError\";\n    this.response = options.response;\n    this.statusCode = options.response.status;\n    this.bodyText = options.bodyText;\n    brand(this);\n    Object.setPrototypeOf(this, ServerParseError.prototype);\n  }\n}","map":{"version":3,"names":["brand","isBranded","ServerParseError","Error","is","error","response","statusCode","bodyText","constructor","originalParseError","options","message","cause","name","status","Object","setPrototypeOf","prototype"],"sources":["/home/saurabh-shukla/Desktop/Slack Lite/frontend/node_modules/@apollo/src/errors/ServerParseError.ts"],"sourcesContent":["import { brand, isBranded } from \"./utils.js\";\n\nexport declare namespace ServerParseError {\n  export interface Options {\n    response: Response;\n    bodyText: string;\n  }\n\n  namespace DocumentationTypes {\n    interface InstanceProperties {\n      /**\n       * The raw [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) object provided by the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n       */\n      readonly response: Response;\n      /**\n       * The status code returned by the server in the response. This is provided\n       * as a shortcut for `response.status`.\n       */\n      readonly statusCode: number;\n      /**\n       * The raw response body text.\n       */\n      readonly bodyText: string;\n    }\n  }\n}\n\n/**\n * Represents a failure to parse the response as JSON from the server. This\n * error helps debug issues where the server returns malformed JSON or non-JSON\n * content.\n *\n * @remarks\n *\n * This error occurs when Apollo Client receives a response from the server but\n * cannot parse it as valid JSON. This typically happens when the server returns\n * HTML error pages, plain text responses, or malformed JSON instead of the\n * expected GraphQL JSON response format.\n *\n * @example\n *\n * ```ts\n * import { ServerParseError } from \"@apollo/client/errors\";\n *\n * // Check if an error is a ServerParseError instance\n * if (ServerParseError.is(error)) {\n *   console.log(`Failed to parse response from ${error.response.url}`);\n *   console.log(`Raw response: ${error.bodyText}`);\n *   console.log(`Status code: ${error.statusCode}`);\n *\n *   // Access the original parse error\n *   console.log(`Parse error: ${error.cause}`);\n * }\n * ```\n */\nexport class ServerParseError extends Error {\n  /**\n   * A method that determines whether an error is a `ServerParseError`\n   * object. This method enables TypeScript to narrow the error type.\n   *\n   * @example\n   *\n   * ```ts\n   * if (ServerParseError.is(error)) {\n   *   // TypeScript now knows `error` is a ServerParseError object\n   *   console.log(error.statusCode);\n   * }\n   * ```\n   */\n  static is(error: unknown): error is ServerParseError {\n    return isBranded(error, \"ServerParseError\");\n  }\n  /** {@inheritDoc @apollo/client!ServerParseError.DocumentationTypes.InstanceProperties#response:member} */\n  readonly response: Response;\n\n  /** {@inheritDoc @apollo/client!ServerParseError.DocumentationTypes.InstanceProperties#statusCode:member} */\n  readonly statusCode: number;\n\n  /** {@inheritDoc @apollo/client!ServerParseError.DocumentationTypes.InstanceProperties#bodyText:member} */\n  readonly bodyText: string;\n\n  constructor(originalParseError: unknown, options: ServerParseError.Options) {\n    super(\n      originalParseError instanceof Error ?\n        originalParseError.message\n      : \"Could not parse server response\",\n      { cause: originalParseError }\n    );\n    this.name = \"ServerParseError\";\n    this.response = options.response;\n    this.statusCode = options.response.status;\n    this.bodyText = options.bodyText;\n\n    brand(this);\n    Object.setPrototypeOf(this, ServerParseError.prototype);\n  }\n}\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,SAAhB,QAAiC,YAAY;AA2B7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,aAAaC,gBAAb,SAAsCC,KAAtC;EACE;;;;;;;;;;;;;EAaA,OAAOC,EAAEA,CAACC,KAAc,EAA1B;IACI,OAAOJ,SAAS,CAACI,KAAK,EAAE,kBAAkB,CAAC;EAC7C;;;;EAESC,QAAQ;;;;;EAGRC,UAAU;;;;EAGVC,QAAQ;EAEjBC,WAAFA,CAAcC,kBAA2B,EAAEC,OAAiC,EAA5E;IACI,KAAK,CACHD,kBADN,YACoCP,KADpC,GAEQO,kBAAkB,CAACE,OAA3B,GACQ,iCAAiC,EACnC;MAAEC,KAAK,EAAEH;IADf,CACmC,CAC9B;IACD,IAAI,CAACI,IAAT,GAAgB,kBAAkB;IAC9B,IAAI,CAACR,QAAT,GAAoBK,OAAO,CAACL,QAAQ;IAChC,IAAI,CAACC,UAAT,GAAsBI,OAAO,CAACL,QAAQ,CAACS,MAAM;IACzC,IAAI,CAACP,QAAT,GAAoBG,OAAO,CAACH,QAAQ;IAEhCR,KAAK,CAAC,IAAI,CAAC;IACXgB,MAAM,CAACC,cAAc,CAAC,IAAI,EAAEf,gBAAgB,CAACgB,SAAS,CAAC;EACzD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}